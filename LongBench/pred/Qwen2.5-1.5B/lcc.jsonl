{"pred": "\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t{\n\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\tif ( pl != null )\n\t\t\t\t{\n\t\t\t\t\tpl.Mobile.CloseGump( types[defs[j]]", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "A = self.best(root)\nA = self.best(root)\nThe line of code you provided is incomplete and does not contain any valid Python code. It seems to be a placeholder for a function call that is not defined in the provided code snippet. To complete the code, you would need to define the `best` function", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "        a = Sndfile(ofilename, 'r')\n        a.seek(0)\n        a.sync()\n        a.write_frames(np.random.random_integers(-100, 100, 1000))\n        a.close()\n        a = Sndfile(ofilename, 'r')\n       ", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "    def video_embed_code(self):\n        return self.get_text_by_css(self._EMBED_CODE)\n    def video_embed_help(self):\n        return self.get_text_by_css(self._EMBED_HELP)\n    def video_embed_present(self):\n        if self.is_element_present(self._EMBEDDED_VIDEO):\n            return True\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\tOLStyleValue style = (OLStyleValue) value;\n\t\t\t\twriter.addAttribute(\"current\", style.getCurrent());\n\t\t\t\twriter.addAttribute(\"value\", style.getValue());\n\t\t\t}\n\t\t\tpublic Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n\t\t\t\tOLBaseClass ol = new OLBaseClass();\n", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "    def is_correct(self, answer):\n        for a in self.answers:\n            if a.lower() in answer.lower():\n                return True\n        return False\n    def __str__(self):\n        return \"Question %d: %s\" % (self.id, self.question)\nclass _TriviaData(_QAData", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "            for (X509Certificate cert : chain) {\n                s.println(cert);\n            }\n        }\n    }\n}\n/*\n * ServerKeyExchange ... SERVER --> CLIENT\n *\n * Server sends its public key to the client, and optionally a signature\n * of the public key.  The client can use this to", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "        try {\n            sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        } catch (Exception e) {\n            throw new SpaceError (e);\n        }\n        }\n        return sp;\n    }\n    public synchronized static JESpace getSpace (String name) {\n", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t}\n\t\t}\n\t\t@Override\n\t\tpublic void onEnter() {\n\t\t\tsuper.onEnter();\n\t\t\tSample.INSTANCE.play(Assets.SND_CLICK);\n\t\t}\n\t\t@Override\n\t\tpublic void onExit() {\n\t\t\tsuper.onExit();\n\t\t\tSample.INSTANCE.play(Assets.SND_CLICK);\n\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "        request = self.rfile.read(int(self.headers.getheader('content-length')))\n        response = self.dispatcher.dispatch(request)\n        start_response('200 OK', [('Content-Type', 'text/xml'), ('Content-Length', str(len(response)))])\n        return [response]\nWhat is the purpose of the `SOAPHandler", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "    def lock_status(self, status_id):\n        lock = \"lockStatus('%s');\" % status_id\n        self.webview.execute_javascript(lock)\n    def unlock_status(self, status_id):\n        lock = \"unlockStatus('%s');\" % status_id\n        self.webview.execute_javascript(lock)\n    def", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "        def action_copy_between_sftp(self, login, password, status_id, params, session):\n            try:\n                self.logger.info(\"FM starting subprocess worker copy_between_sftp %s %s\", pprint.pformat(status_id),\n                                 pprint.pformat(login))\n                p = Process(target=self.run_subprocess,\n                           ", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission c = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsTrue (Same (a, c), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, c), \"!ReferenceEquals1\");\n\t\t\tc = (ZoneIdentityPermission) b.Union (", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "        for trust_manager in self.trust_managers:\n            issuers = trustManager.getAcceptedIssuers()\n            if issuers:\n                return issuers\n        return None\n    def getAcceptedIssuers(self):\n        issuers = []\n        for trust_manager in self.trust_managers:\n            issuers.extend", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "        DomainInfo domainInfo = manager.getDomainInfo(domain);\n        if (domainInfo != null)\n        {\n            request.setAttribute(\"domainInfo\", domainInfo);\n        }\n        else\n        {\n            request.setAttribute(\"domainInfo\", null);\n        }\n    }\n}", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "        self.__tmp_dir, 'datastream')\n        self.__datastream_transport, self.__datastream_fd = await asyncio.open_pipe(\n            loop=self.__event_loop)\n        self.__datastream_protocol = DataStreamProtocol(\n            stream=self.__datastream_transport,\n            event_loop=self.__event_loop)\n        self", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t}\n\t\t}\n\t}\n\t\n\tprotected void on_treeview1_row_activated (object o, TreeViewColumn column, TreeIter iter, int column_id, int row, int col)\n\t{\n\t\tGtk.TreeModel model = treeview1.Model;\n\t\tGtk.TreeIter iter;\n\t\tif (model", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "        String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {\n                argValues[i] = getVarValue(args[i", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t{\n\t\t\tfirms = loadFromFile();\n\t\t}\n\t}, SERVER(new ConfigFile<UUID, ServerData>()\n\t{\n\t\t@Override\n\t\tpublic ServerData create(UUID id, ConfigurationSection conf)\n\t\t{\n\t\t\treturn new ServerData(id, conf);\n\t\t}\n\t\t@Override\n\t\tpublic", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(SHOW_MINI_MODE_DIALOG,\n\t\t\t\t\t\t\"Show mini mode dialog\", getFieldEditorParent()));\n\t\t\t\taddField(new IntegerFieldEditor(TEXT_FILE_CACHE_LENG", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "            if (m_Owner.SpellTarget != null)\n            {\n                if (m_Owner.SpellTarget is IPoint3D)\n                {\n                    m_Owner.SpellTarget = null;\n                    m_Owner.Caster.SendAsciiMessage(\"Target is no longer valid\");\n                }\n                else\n                {\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "    for state in states:\n        state.expire(state.dict, self.identity_map._modified)\n    self._flushing = False\n    self._new = {}\n    self._deleted = {}\n    self._key_switches = {}\n    self._active = True\n    self._prepared = False\n    self._", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) {\n\t\t\tfinal String name = field.getName();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) {\n\t\t\t\tnamed = new ArrayList<IField>(3);\n\t\t\t\tname2Field.put(name, named);\n\t\t\t}\n\t\t\tnamed", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "    r'/foo/*'`` in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if self.request.path.endswith(\"/\"):\n            return method(self, *args, **kwargs)\n        if self.request.method in (\"GET\",", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t{\n\t\t\twriter.Write (\"<div id=\\\"MultiView\\\" class=\\\"MultiView\\\">\");\n\t\t\tforeach (View v in Controls)\n\t\t\t\tv.Render (writer);\n\t\t\twriter.Write (\"</div>\");\n\t\t}\n\t}\n\t\n\t[Serializable]\n\tpublic class ViewCollection : ControlCollection\n\t{\n\t\tpublic ViewCollection", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "    wigle_downloader = WigleDownloader( user, password, coordfile, outpath )\n    wigle_downloader.run()\nWhat is the purpose of the wigle_downloader object and how does it interact with the wigle.py module? The `wigle_downloader` object is a class that is used", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "                if (mod >= 156 && mod <= 160)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.PossibleSkills)\n                        {\n                            if (i.SkillBonuses.GetSkill", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "    for platform, platform_builds in platforms.items():\n        for build, version in platform_builds.items():\n            if build == 'aurora':\n                builds.extend(android_builds(build, builds))\n            else:\n                builds.append({'os': platform,\n                               'os_pretty': platform,\n                               'os_arch_p", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID==null && issueTypeID==null) {\n\t\t\tstateBeansList = StatusBL.loadAll();\n\t\t} else {\n\t\t\tstateBeansList = StatusBL.getByProjectTypeIssueTypeAssignments(projectID, issueTypeID, null);\n\t\t}\n\t\tif (stateBeansList!=null && !", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if ( argumentSyntax.Parent is MethodDeclarationSyntax ) {\n                    var methodDeclarationSyntax = (MethodDeclarationSyntax) argumentSyntax.Parent;\n                    var methodBody = methodDeclarationSyntax.Body;\n                    var methodBodyStatements = methodBody.DescendantNodes().OfType<", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "        split_test = self._update_partition_id(0)\n        # Verify that the group_id_to_child mapping is correct.\n        self.assertEqual(2, len(split_test.group_id_to_child))\n        self.assertEqual(vertical_0.location, split_test.group_id_to_child['0'])\n        self.assertEqual(vertical_1.location,", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "            foreach (Object o in longTag.Values) {\n                if (o is PdfDictionary) {\n                    PdfDictionary dic = (PdfDictionary)o;\n                    if (dic.Get(PdfName.SUBTYPE) == PdfName.CIDFONTTYPE2) {\n                        PdfDictionary cdic = (PdfDictionary)dic.Get(P", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn.depth = cgn.main.depth + 1;\n\t\t\t\t\t\t\tcgn.main = cgn;\n\t\t\t\t\t\t\tcgn.x = 0;\n\t\t\t\t\t\t\tcgn.y = yOffset;\n\t\t\t\t\t\t\tcgn", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "    public Bitmap loadPage() throws IOException {\n      if (bitmapReference != null) {\n        return bitmapReference.get();\n      }\n      Bitmap bitmap = null;\n      try {\n        InputStream inputStream = context.getAssets().open(model.getSprite());\n        bitmap = BitmapUtil.decodeStream(inputStream, EMOJI_RAW_WIDTH, E", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "                if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * When the input field loses focus, the command history", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "# TODO: add a way to get the node name from the object\n# TODO: add a way to get the node provider from the object\n# TODO: add a way to get the node appliance from the object\n# TODO: add a way to get the node collection from the object\n# TODO: add", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles, sequences);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t\tfor (IJPoseListener listener : poseListeners) {\n\t\t\tlistener.onPose(timestamp, pose);\n", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "            if (Enabled)\n                ImageUrl = EnabledImageURL;\n            else\n                ImageUrl = DisabledImageURL;\n            base.Render(writer);\n            }\n        }\n    }\nThe provided code snippet is a part of a class `ToolbarButton` in the `ClearCanvas.ImageServer.Web.Common.WebControls.UI` namespace. This", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t}\n\t\n\t@Override\n\tpublic NBTTagCompound writeToNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.writeToNBT(compound);\n\t\t\n\t\tItemStackHelper.saveAllItems(compound, inventory);\n\t\t\n\t\tcompound.setInteger(\"ToolDamage\", damage);\n\t\t\n\t\treturn compound;\n\t}\n\t\n\t@Override\n\tpublic", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "    return \"Effect [probability=\" + probability + \", scopes=\" + scopes + \"]\";\n    }\n}", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',\n        'lasttime': arrow.utcnow().datetime,\n        'reporttime", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "        self.assertEqual(person.owns[0], organization)\n        self.assertEqual(organization.owner, person)\n        self.assertEqual(organization.employees[0], employee)\n        self.assertEqual(employee.employer, organization)\n        self.assertEqual(employee.employer.employees[0], person)\n        self.assertEqual(person.owns[0].employees", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "import os.path\nimport bokeh\nimport bokeh.io\nimport bokeh.model\nimport bokeh.plotting\nimport bokeh.util.platform\nimport ipywidgets as widgets\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pyproj\nfrom IPython.display import display\nfrom bokeh.models import", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "            if (ignored.Contains(path))\n            {\n                continue;\n            }\n            if (toScan.Contains(path))\n            {\n                continue;\n            }\n            toScan.Add(path);\n            _logger.Trace(\"Scanning {0}\", path);\n            _commandQueueManager.Enqueue(new ScanCommand(path));\n        }\n        private void Dispose", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform(remappingFunction));\n\t\treturn read(key, computed);\n\t}\n\t@Override\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "        resbrains = cat.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\n            isDiscussable = contobj.isDiscussable()\n            canReply = canreply(contobj)\n            if isDiscussable and canReply:                \n                passedcommentcount", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t}\n\t\tpublic int Z\n\t\t{\n\t\t\tget { return m_Z; }\n\t\t}\n\t\tpublic static Tile[] PatchTiles( Tile[] tiles, Season season )\n\t\t{\n\t\t\tTile[] result = new Tile[season.Tiles.Length];\n\t\t\tfor ( int i = 0; i", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                // if (land.Flags & (uint)ParcelFlags.AllowVoiceChat) == 0)\n                {\n                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": voice enabled for parcel\",\n                    //                  scene.Region", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriods.Update(PayPeriodCur);\n\t\t\tDialogResult=DialogResult.OK;\n\t\t}\n\t\tprivate void butCancel_Click(object sender, System.EventArgs e) {\n\t\t\tDialogResult=DialogResult.Cancel;\n\t\t}\n", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_headings['Time Av or Int'])\n        # Skip the line after the column headings", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "    return {'success': True}\ndef group_member_create(context, data_dict):\n    model = context['model']\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('Valid API key needed to create a group member')}\n    return authz.is_authorized('", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\tAttribute labelAttribute = getTrainingHeader().getAttributes().getLabel();\n\t\tint numberOfLabels = labelAttribute.getMapping().size();\n\t\tAttribute[] confidenceAttributes = new Attribute[numberOfLabels];\n\t\tfor (int i = 0; i < numberOfLabels; i++) {\n\t\t\tconfidenceAttributes[i]", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"segments\">The array containing the segments to search for.</param>\n        /// <returns>\n        ///", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "         codePoint = (codePoint << 8) | string.charAt(offset++);\n         if (codePoint < 0x10000) {\n            return _range.contains(codePoint) ? offset : -1;\n         }\n         return -1;\n      }\n   }\n   static class SetNot extends Abstract", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "        if (studyFormName == null) {\n          return ValidationResults.SUCCESS;\n        }\n        ObservationHistoryDAO observationHistoryDAO = new ObservationHistoryDAOImpl();\n        ObservationHistory observationHistory = observationHistoryDAO.getObservationHistoryByAccessionNumber(accessionNumber);\n        if (observationHistory == null) {\n          return", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tLog.Write(\"server\", \"Rejected connection from {0}; {1}\", newConn.Socket.RemoteEndPoint, e);\n\t\t\t\tSendOrderTo(newConn, \"ServerError\", \"The server is not ready yet\");\n\t\t\t\tDropClient(newConn);\n\t\t\t\treturn;\n", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tcoll.setFirstResult(0);\n\t\tcoll.setSortOrder(SortOrder.ASCENDING);\n\t\tcoll.setSortDirection(SortDirection.UP);\n\t\tcoll.setPageSize(10);\n\t\tcoll.setCount(0);\n\t\tcoll.setCountTotal(0);\n\t\tcoll.setCount", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'notify':\n    notify()\nelif prnum == 'donate':\n    donate()\nelse:\n    xbmc.executebuiltin(\"Notification(\"+localtxt", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "        public static int[] ind2sub(ILArray<bool>   A, int seqindex) {  \n            if (object.Equals(A,null) || A.IsEmpty)\n                return new int[0]; \nNext line of code:\n        public static int[] ind2sub(ILArray<Byte>   A, int seq", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "  plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not 'plotType' in pD:\n    return S_ERROR( \"Missing plot type!\" )\n  plotType = pD[ 'plotType' ]\n", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t{\n\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPointsForNewProductionBuildings(bot);\n\t\t}\n\t}\n\t}\n\t#region BaseBuilderQueueManager\n\tpublic class BaseBuilderQueueManager : IBotTick, IBotPositionsUpdated, IBotRespondToAttack, IBotRequestPause", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "        return plan;\n    }\n    /**\n     * Compile a statement and return the head of the plan.\n     * @param sql\n     * @param paramCount\n     * @param joinOrder\n     * @param partitionParameter\n     * @param inferSP\n     * @param lockInSP\n    ", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(121, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.comboBox1_SelectedIndexChanged);\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\tthis.textBox2.Anchor = ((System", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.ByteSize = data_bits;\n\t\t\tdcb.Parity = parity;\n\t\t\tdcb.StopBits = bits;\n\t\t\tdcb.fRtsControl = 0;\n\t\t\tdcb.fOutxCtsFlow = false;\n\t\t\tdcb.fOutxDsr", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "        page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=self.user)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n        page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=admin)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "    args = parser.parse_args()\n    if args.keep_tempdir:\n        _keep_tempdir = True\n    unittest.main()\nif __name__ == '__main__':\n    main()", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\tself.newAPList.append(self.buildEntryComponent(ap, bssid, encrypted, iface, maxrate, signal))\n\t\tself.newAPList.append(self.buildEntryComponent(ap, bssid, encrypted, iface, maxrate, signal))\n\t\tself.newAPList.append(self.buildEntryComponent(ap, bssid, encrypted", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "                int n = fCode.Length;\n                int n2 = n / 2;\n                int n3 = n - n2;\n                int n4 = n2 * 2;\n                int n5 = n3 * 2;\n                int n6 = n4 * 2;\n                int n", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "    return ArrayUtils.toPrimitive(results);\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n   *    \n   * getStringArray(props", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "        y_points = np.arange(-90.0, +90.0, 1.0)\n        x_points, y_points = np.meshgrid(x_points, y_points)\n        sample_points = [\n            (\"longitude\", x_points.flatten()),\n            (\"latitude\", y_points.flatten()),\n        ]\n        result", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "            if (currPacket != null)\n            {\n                Clipboard.SetText(currPacket.ToString());\n            }\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\n            if (currPacket != null)\n            {\n                currPacket.Save();\n            }\n        }\n", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "    print \"hello world\"\n    print '\\033[0m'\n    return 0\ndef main():\n    # build_dataset('mir1k-Wavfile')\n    # build_dataset('mir1k-Wavfile')\n    # build_dataset('mir1k-Wavfile')\n    # build_dataset", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "        /// <summary>\n        /// Returns the number of values in the collection.\n        /// </summary>\n        /// <returns> size\n        /// </returns>\n        public virtual int Count {\n            get { return _numValues; }\n        }\n        /// <summary>\n        /// Clear out the collection.\n        ///", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "            this.treeView1.Nodes.AddRange(new System.Windows.Forms.TreeNode[] {\n            treeNode1,\n            treeNode28,\n            treeNode63});\n            this.treeView1.SelectedImageIndex = 0;\n            this.treeView1.Size = new System.Drawing.Size(245, 297);\n            this", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "        return self.constructFunction(\n            original.__name__,\n            original.DLL, \n            resultType = original.restype, \n            argTypes= original.argtypes,\n            doc = original.__doc__,\n            argNames = original.argNames,\n            extension = original.extension,\n        )\n    def getGLUTFontPointer", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "        final DataOutputStream dos = new DataOutputStream(baos);\n        dos.writeBoolean(hasEmptyStreams);\n        for (int i = 0; i < files.size(); i++) {\n            if (emptyStreams.get(i)) {\n                dos.writeBoolean(true);\n            } else {\n                dos.writeBoolean(false);\n            }\n", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                if (System.currentTimeMillis() - start >= rampDelay)\n                {\n                    alphaLevel = rampUp ? 255 : 0;\n                    inRamp = !inRamp;\n                }\n                else\n                {\n                    alphaLevel = rampUp ? (int) (255.0f *", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_removable_if_max_idletime_configured_and_not_paused()\n        {\n            GivenGlobalSeedLimits(", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "            if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n            }\n            if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken, wepar, ItemId.ItemWeparBerry);\n            }\n        }\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "        f.writelines(['F) 1\t\t\t# Number of PSF iterations\\n'])\n        f.writelines(['G) 1\t\t\t# Number of iterations for',\\\n                      ' the Sersic function\\n'])\n        f.writelines(['H) 1\t\t\t# Number of iterations for',\\\n", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "            i += ((b & 0x08) << 2);\n            i += ((b & 0x04) << 5);\n            i &= 0xFF;\n            break;\n                case 0x08:\n                    /* D */\n                    i = b & 0x23", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "        return self._course_dict['org'] + '/' + self._course_dict['number'] + '/' + self._course_dict['run']\n    @property\n    def _course_key(self):\n        \"\"\"\n        Return the course key for the course.\n        \"\"\"\n        return CourseKey.from_string(self._course_location)\n", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length>1) {\n\t\t\tchance = Float.parseFloat(splitNumber[1]);\n\t\t}\n\t\treturn (int)(chance/100.0*100);\n\t}\n}", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "        try:\n            os.remove('%s/%s.pem' % (config_directory,'key'))\n        except:\n            pass\n        try:\n            os.remove('%s/%s.pem' % (config_directory,'ca'))\n        except:\n            pass\n        return 0, \"Meter \" + name + \" deleted\"\n", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "            this.chkPrivacy.CheckedChanged += new System.EventHandler(this.chkPrivacy_CheckedChanged);\n            // \n            // tbPrefs\n            // \n            this.tbPrefs.Controls.Add(this.tabGeneral);\n            this.tbPrefs.Controls.Add(this.tabSite);\n            this.tbPrefs.Controls.Add(this.tabEditing);\n            this.tbPrefs.Controls.Add(this.tabPrivacy", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "        for plugname, plug in self.loaded_plugins:\n            try:\n                plug.collect()\n                plugruncount += 1\n            except KeyboardInterrupt:\n                raise\n            except (OSError, IOError) as e:\n                if e.errno in fatal_fs_errors:\n                    self.ui_log.error(\"\")\n                    self.ui", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "    def getRoomFullName(self):\n        \"\"\" Session Room \"\"\"\n    getRoomFullName.convert = Conversion.roomName\n    def getRoomFullNameNoTitle(self):\n        \"\"\" Session Room \"\"\"\n    getRoomFullNameNoTitle.convert = Conversion.roomName\n    def getRoomBookingList(self):\n        \"\"\" Session Reservations \"\"\"\n    get", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "        }\n        }\n                };\n                result = messageWriter.write(fileTextField.getText());\n            } else {\n                MessageImporter messageImporter = new MessageImporter() {\n                    @Override\n                    public MessageImportResult importMessages() throws MessageImportInvalidPathException {\n                        try {\n                            return parent.mirthClient.importMessages(channelId,", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "    \t\t\t}\n\t\t    \t}\n    \t\t}\n    \t\treturn layer;\n    \t} catch (Exception e) {\n    \t\tthrow e;\n    \t}\n    }\n    \n    protected String getView(Object options) throws Exception {\n    \tString view = null;\n    \ttry {\n    \t\tif (options != null) {\n    \t\t\tObject value = null", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "        if (currentSession != null && currentSession.isOpened()) {\n            userInfoSession = currentSession;\n            userInfoSession.addCallback(new Session.StatusCallback() {\n                @Override\n                public void call(Session session, SessionState state, Exception exception) {\n                    if (session != null && session.equals(userInfoSession)) {\n", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.strength;\n\t\tfor (Emotion emotion : emotions)\n\t\t\temotion.chance = emotion.chance / sum;\n\t}\n\t@Override\n\tpublic void update() {\n\t\tif (currentEmotion != null){\n\t\t\tcurrentEmotion.strength += new", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                    'property1': 2, 'property2': 3}\n            }],\n            self.build.stages_to_list())\n    def test_to_xml(self):\n        \"\"\"Test exporting as an xml string.\"\"\"\n        # read and parse sample file\n        self.build = BuildJob(constants.TEST_SAMPLE_TIMESTAMP_FILE)\n        # test", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "    phi2Rad = (mu + (3*e1/2-27*e1*e1*e1/32)*sin(2*mu) \n               + (21*e1*e1/16-55*e1*e1*e1*e1/32)*sin(4", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "        form = ReportUserForm(request.POST, instance=user)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Report submitted successfully!\")\n            return HttpResponseRedirect(reverse('profile-user', args=[user.username]))\n    else:\n        form = ReportUserForm(instance=user)\n    return render_to_response('accounts", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "    @property\n    def page_title(self):\n        \"\"\"The HTML page title.\"\"\"\n        return \"Add a new series\"\n    @property\n    def cancel_url(self):\n        \"\"\"See `LaunchpadFormView`.\"\"\"\n        return canonical_url(self.context)\n    @property\n    def page_description(self):\n        \"\"\"", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t}\n\t\t}\n#endif\n\t\tpublic void ApplyTo(Form form, string strTableName)\n\t\t{\n\t\t\tif(form == null) throw new ArgumentNullException(\"form\");\n\t\t\tif(m_props.RightToLeft)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.Yes;\n\t\t\t\t\tform.RightToLeftLayout = true", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "        temp >>= MAXIMUM_NO_OF_DIGITS;\n        }\n        return arr;\n    }\n} To complete the `NumberVariableLength` class, you need to implement the `writeByteArray` method. This method should write the number to a byte array. Here's the completed code:\n\n```java\n/**\n * Represents a", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "            if flag == constants.isa_tag_type:\n                new_positional_tags_list.append(\n                    TagRegex(True, regex))\n            else:\n                new_positional_tags_list.append(\n                    TagRegex(False, regex))\n            return new_positional_tags_list\n    def compile_tag_regexes(positional_tags):\n        if not", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "            return new object[0];\n        }\n    }\n}\n        public override Type GetElementType ()\n        {\n            return null;\n        }\n        protected override bool HasElementTypeImpl ()\n        {\n            return false;\n        }\n        protected override PropertyInfo GetPropertyImpl (string name, BindingFlags bindingAttr, Binder binder,\n            Type returnType", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "class OBD_PID1D(OBD_Packet):\n    name = \"PID_1D_OxygenSensorHeaterStatus\"\n    states = {\n        0x00: 'heated',\n        0x01: 'notHeated'\n    }\n    fields_desc = [\n        XByteEnum", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\tready_pipe = os.open(\"/tmp/ready\", os.O_RDONLY)\n\tready_pipe = os.open(\"/tmp/ready\", os.O_RDONLY)\n\tready_pipe = os.open(\"/tmp/ready\", os.O_RDONLY)\n\tready_pipe = os.open(\"/tmp/ready\", os.O_RDONLY)\n\tready_pipe =", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "            this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\n            this.AddRes(index, typeof(SwitchItem), 1073464, 1, 1044253", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "        self._refcnt -= 1\n        if self._refcnt <= 0:\n            if exc is None:\n                exc = sys.exc_info()[1]\n            self.app.do_teardown_request(exc)\n        rv = _request_ctx_stack.pop()\n        assert rv is self, 'Popped wrong request context", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "    response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ################################################################################################################################\ndef _pubsub_topic_list(session, cluster_id, needs_columns=False):\n    \"\"\" All pub/sub topics.\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "        if (resourceEntityForRelease != null) {\n            result.add(resourceEntityForRelease);\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition defaultResourceTypeDefinition, ReleaseEntity release) {\n        List<ResourceEntity>", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "    dx = (ray_trafo.range.meshgrid[1] - min_rot_angle) / alen\n    dy = (ray_trafo.range.meshgrid[2] - min_rot_angle) / alen\n    # Compute angles\n    theta = np.arctan2(dx, dy)\n    phi =", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "        return regx\n    def _buildURL(self, url):\n        \"\"\" Return the Proxyfied URL of the page \"\"\"\n        if self.isEnabled():\n            url = self.getProxyURL() + self.param + urllib.quote_plus(url) + self.option\n            logger.log(u\"Proxified URL: \" +", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t{\n\t\t\treturn String.Format (Helpers.InvariantCulture, \"{0} {1}\", type, unit);\n\t\t}\n\t\tpublic string ToString ()\n\t\t{\n\t\t\treturn String.Format (Helpers.InvariantCulture, \"{0} {1}\", type, unit);\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\tif ((block2.Length > GetInputBlockSize()))\n\t\t\t{\n\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t}\n\t\t\t}\n\t\t\t// add the two blocks\n\t\t\tbyte[] output = new byte[block1.Length + block2.Length];\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar obj2 = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(obj2.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(obj2.Properties[0].Value.Type, Is.EqualTo(TokenType.String));\n\t\t\tAssert.That(((JString)obj2.Properties[0].Value", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "            for (int w = 0; w < width; w++) {\n                String vertex = \"vertex-\"+w+\"-\"+h;\n                String edge = \"edge-\"+w+\"-\"+h;\n                edges.add(new T2(vertex, edge));\n            }\n            return edges;\n        }\n        @Override\n        public", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "    ds.config[\"imaging\"][\"pixel size\"] = .34\n    ds.config[\"imaging\"][\"pixel size\"] = .34\n    ds.config[\"imaging\"][\"pixel size\"] = .34\n    ds.config[\"imaging\"][\"pixel size\"] = .34\n    ds.config[\"", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "        final LocalTripleStore expected = new LocalTripleStore(\"expected\");\n        final LocalTripleStore actual = new LocalTripleStore(\"actual\");\n        final TempTripleStore tmp = TripleStoreUtility.bulkExport(expected);\n        final boolean same = TripleStoreUtility.modelsEqual(expected, tmp);\n        System.out.println(\"same: \"", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "        {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,\n                                         tzinfo=tzutc()),\n         u'ProductDescription': 'Windows',\n         u'InstanceType': 'g2.2xlarge',\n", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should download and install Yarta.\n\t * \n\t * When the function returns true Yarta will be installed.\n\t * \n\t * @return true/false\n\t */\n\tpublic boolean downloadAndInstall() {\n\t\tint selection = JOptionPane.showConfirmDialog", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\tpublic void SetViewport(int x, int y, int width, int height)\n\t\t{\n\t\t\tVerifyThreadAffinity();\n\t\t\tOpenGL.glViewport(x, y, width, height);\n\t\t\tOpenGL.CheckGLError();\n\t\t}\n\t\tpublic void SetViewport(int x, int y, int width,", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat(\n            self.x_data_cov_mat_inverse, self.y_data_cov_mat_inverse, self.x_model, self.parameter_values)\n    @property\n    def x_model_error(self):\n        \"\"\"1D array containing the pointwise *x", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "        return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * Gets the string representation of this bean.\n     *\n     * @return the string representation\n     */\n    @Override\n    public String toString() {\n        return Reflection", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                } else {\n                  accountIdAccountMap.put(walrusObject.getOwnerId(), owningAccount);\n                }\n              } catch (AuthException e) { // In case the account is deleted, transfer the ownership to eucalyptus admin\n                LOG.warn(\"Account ID \" + walrusObject.getOwnerId() +", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "        public event EventHandler SelectedFolderChanged\n        {\n            add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        #endregion\n        #region Folder Explorer Component overrides\n        /// <summary>\n        /// Initializes the folder explorer.\n        /// </summary>\n       ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "    @Test\n    public void testValidateNameSpecialCharImportAsNewEntity() {\n        checkTemplateName(true, \"vm_$%$#%#$\");\n    }\n    @Test\n    public void testDoNotValidateNameSpecialCharImportAsNewEntity() {\n        checkTemplateName(false, \"vm_$%$", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "This line of code is incomplete and needs to be completed to ensure that the code is fully functional. The code is trying to add a spin button to the table1. The code is trying to add a spin button to the table1. The code is trying to add a spin button to the table1. The code", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\\n                self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        if self.totalstatus is not None:\n            environ['%sTOTALSTATUS' % POSTPROC_ENVIRO_ID] = \\\n                self.totalstatus\n       ", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\tpublic ConstructorBuilder DefineTypeInitializer()\n\t\t{\n\t\t\tMethodBuilder mb = DefineMethod(ConstructorInfo.TypeConstructorName, MethodAttributes.Private | MethodAttributes.Static | MethodAttributes.RTSpecialName | MethodAttributes.SpecialName, null, Type.EmptyTypes);\n\t\t\tILGenerator ilgen = mb.GetILGenerator();\n\t\t\tilgen", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "      return (Builder) new Builder().MergeFrom(prototype);\n    }\n    \n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ProtoGen\", \"2.3.0.277\")]\n", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                vertices[x] = new Vector3f();\n            }\n            Vector3f v1 = new Vector3f();\n            Vector3f v2 = new Vector3f();\n            Vector3f v3 = new Vector3f();\n            Vector3f v4 = new Vector3f();\n            int vertIndex", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "        if (CmsStringUtil.isNotEmpty(showDateData)) {\n            result.add(COLUMN_NAME_DATECREATED);\n            result.add(COLUMN_NAME_DATEMODIFIED);\n        }\n        return result;\n    }\n    /**\n     * Returns the default type.<p>\n     *\n     * @return the defaultType\n     */\n   ", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (animationDuration);\n\t\t\tif (state == 1)\n\t\t\t{\n\t\t\t\t//  Calculate height\n\t\t\t\tCalculateHeight ();\n\t\t\t}\n\t\t}\n\t}\n} The provided code snippet is a class named `InputFieldConfig` that handles the configuration and behavior of an `Input", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "      Height = GetBestHeight();\n      Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnClick(EventArgs e)\n    {\n      base.OnClick(e);\n      if (m_State == eButtonState.Down)\n      {\n        m_State = eButtonState.Normal", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                lastUser = r[\"CreatedBy\"].ToString();\n                if (!Users.Contains(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            foreach (string user in Users)\n            {\n                SendEmailForUser(user, AErrors);\n            }\n        }\n    }\n}", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Viewport.LastMousePos.X < EdgeCornerScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Left | ScrollDirection.Up;\n\t\t\tif", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "            if (CriteriaCodesUsed.Count > 1)\n            {\n                ValidationColumn = DiscountTable.Columns[PcDiscountTable.ColumnDiscountCriteriaCode];\n                // displays a warning message\n                VerificationResult = new TScreenVerificationResult(new TVerificationResult(this, ErrorCodes.GetErrorInfo(\n                    PetraErrorCodes.ERR_DIS", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "            stream.Read (buffer, 0, buffer.Length);\n            // Adding file content as blob/byte[].\n            args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "#\n# Copyright (C) 2019  Red Hat, Inc.\n#\n# This copyrighted material is made available to anyone wishing to use,\n# modify, copy, or redistribute it subject to the terms and conditions of\n# the GNU General Public License v.2, or (at your option) any", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t{\n\t\t\treturn Enabled && CopyCustom;\n\t\t}\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == _customRange)\n\t\t\t\t\treturn;\n\t\t\t\t_customRange = value;\n\t\t\t\tNotifyPropertyChanged(\"", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t{\n\t\t\treturn dataDir;\n\t\t}\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t{\n\t\t\treturn cacheDir;\n\t\t}\n\t\tpublic string ConfDirectory {\nNext line of code:\n\t\t{\n\t\t\treturn confDir;\n\t\t}\n\t\tpublic string ApplicationName {\nNext line of", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "        }\n    }\n}", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t\tpublic override void OnDoubleClick( Mobile from )\n\t\t{\n\t\t\tif ( !Movable )\n\t\t\t\treturn;\n\t\t\tif ( from.InRange( this.GetWorldLocation(), 1 ) )\n\t\t\t{\n\t\t\t\tEat( from );\n\t\t\t}\n\t\t}\nPlease write the code for the next line of code", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                    if (eFarm.MinionsHit >= 2)\n                    {\n                        E.Cast(eFarm.Position);\n                    }\n                }\n            }\n        }\n        private void JungleClear()\n        {\n            if (ManaManager.HasEnoughMana(Menu.GetSlider(\"JungleClearMana\")) && ManaManager.SpellFarm)\n            {\n               ", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n} To complete the code, you need to add the implementation for the `get` method. Here's the completed code:\n\n```java\npackage ch.sfdr.fractals.gui", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "        fb = self._retr_file(filename)\n        try:\n            root = xml.etree.cElementTree.fromstring(fb)\n        except:\n            logger.error('Could not parse xml file: {}'.format(filename))\n            return {}\n        pollen = {}\n        for child in root:\n            if child.tag == 'Wert", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "        self.assertEquals(\n            field_model_def['name'], field_def['name'])\n        self.assertEquals(\n            field_model_def['type'], field_def['type'])\n        self.assertEquals(\n            field_model_def['rules'], field_def['rules'])\n        self.assertEquals(\n            field_model_def['producer'], field_def['producer'])\n", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                    new object[] {new object[] {\"E1\", 10L}});\n                SendEventLong(env, \"E2\", 20L);\n                SendEventLong(env, \"E3\", 30L);\n                SendEventLong(env, \"E4\", 40L);\n                Send", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "        return Particle(self._sim, c, self.m, self.x, self.y, self.z, self.vx, self.vy, self.vz, self.primary, self.a, self.P, self.e, self.inc, self.Omega, self.omega, self.pomega, self.f, self.M", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "        # add some values\n        if values:\n            qcontext.update(values)\n        # in edit mode ir.ui.view will tag nodes\n        context['inherit_branding'] = qcontext.get('editable', False)\n        view_obj = request.website.get_template(id_or_xml_id)\n        if 'main_object' not", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "        value = createHTMLView(c, text);\n        if (value != oldValue) {\n            c.putClientProperty(BasicHTML.propertyKey, value);\n        }\n    }\n    /**\n     * Check the given text to see if it should trigger the\n     * html rendering logic in a non-text component that supports\n", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "    s = create(filename, content)\n    assert s.name_is_testharness\n    assert s.name_is_non_test\n    assert s.name_is_manual\n    assert s.name_is_visual\n    assert s.name_is_multi_global\n    assert s.name_is_worker\n    assert s.name_is_window\n    assert s", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t}\n\t\tpublic void Loader(string namedQueryReference, Action<ISqlLoader> loaderMapping)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t\t\t{\n\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n\t\t\tloaderMapping(mapping.SqlLoader);\n\t\t}\n\t\tpublic", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\tint memberCount = m_Members.Count;\n\t\t\twriter.WriteEncodedInt( memberCount );\n\t\t\tfor ( int i = 0; i < memberCount; ++i )\n\t\t\t{\n\t\t\t\tm_Members[i].Serialize( writer, m_Faction );\n\t\t\t}\n\t\t\tm_Faction.State = null;\n", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "    private void moveForward() {\n        if (graphQueue.isEmpty()) {\n            return;\n        }\n        CallsiteHolderExplorable callerCallsiteHolder = (CallsiteHolderExplorable) currentGraph();\n        if (tryToInline(currentInvocation(), inliningDepth())) {\n            return;\n        }\n        if (caller", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "        self.pytest_command = pytest\n        if not self.pytest_command:\n            self.pytest_command = self.args['pytest']\n        if not self.pytest_command:\n            self.pytest_command = \"py_test_base\"\n        if not self.pytest_command:\n            self.pytest_command = \"py_test_base", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "            if (phi) {\n                ValuePhiNode phi = getCachedPhi(value, stamp);\n                if (phi != null) {\n                    effects.replaceAtUsages(value, phi);\n                }\n            }\n        }\n    }\n}", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "    }\n    /** @see Connection.VideoProvider#handleCallSessionEvent */\n    public void handleCallSessionEvent(int event) {\n        if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n}\nThe", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t{\n\t\t\t\tfrom.SendGump(new EodonianWallMapGump(from as PlayerMobile, this));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Serialize(writer);\n\t\t\twriter.Write(0);\n\t\t}\n\t\t\n\t\tpublic override void Deserialize(G", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "    'Bibxxx',\n    'BibrecBibxxx',\n    'models'\n])", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "    def remove_user(self, username, domain):\n        user = '%s@%s' % (username, domain)\n        data = self.module.get(user)\n        if data is None:\n            raise UserNotFound(username, domain)\n        else:\n            self.module.set(user, None)\n            self.module.set('all", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "          - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def percent_translated(self):\n        \"\"\"\n        Convenience method that return the percentage of translated\n        messages.\n        **Example**:\n        >>> import polib", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "    if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n    elif not res['Value']:\n      res = self.transClient.setTransformationParameter( transID, 'Status', 'ValidatedOutput' )\n      if not res['OK']:\n       ", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t// FIXME what about /downloads/ /friends/ etc?\n\t\t// Allow access to Library for searching, form passwords are used for actions such as adding bookmarks\n\t\tif(action.equals(\"/library/\"))\n\t\t\treturn action;\n\t\t// Allow access to Library for searching, form passwords are used for actions such", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "        gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n        msg = yield self.run_fake_single_build(gsp, buildResult)\n        result = makeReviewResult(msg,\n                                  (GERRIT_LABEL_VERIFIED, verifiedScore))\n        gsp.sendCodeReview.assert_called_once_with", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "    self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.scheme = 'http://www.google.com/amp'\n    self.category.term = 'test'\n    self.assert_(self.category.scheme == 'http://www.google.com/amp')\n    self.assert_(self.category.term == '", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "        Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> r3 = new HashMap<String, AnnotationMirror>();\n            for (Map.Entry<String, AnnotationMirror> entry : r1.entrySet()) {\n                String key = entry.getKey();\n                AnnotationMirror value = entry.getValue();\n                if (r", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "        row = col.row(align=True)\n        row.prop(mat, \"use_light_group\", text=\"Group\")\n        row.prop(mat, \"use_light_group_local\", text=\"Local\")\n        col.prop(mat, \"use_light_group_exclusive\", text=\"Exclusive\")\n        col.prop(mat, \"use_light_group\",", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "            if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper17_IRQEnabled = map16.IRQEnabled;\n                mapper17_irq_counter = map16.irq_counter;\n", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "        JMenuItem jMenuItem = new JMenuItem(\"Open Document\");\n        jMenuItem.addActionListener(oActionListener);\n        _jMnuRoot.add(jMenuItem);\n        _jMnuRoot.addSeparator();\n        JMenuItem jMenuItem2 = new JMenuItem(\"Close Document\");\n        jMenuItem2.addActionListener(oActionListener);\n        _jMnu", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "Add(\"Party Quest\", 70025); // Party Quest Scroll [10 Red Bears]\nThe code snippet you provided is a part of an Aura script for a game, likely a role-playing game (RPG) or a similar game. The script is designed to handle interactions with a character named Ar", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t{\n\t\t\tint height = 0;\n\t\t\tforeach (View child in Children) {\n\t\t\t\theight += child.Height;\n\t\t\t}\n\t\t\treturn Math.Max (height, min);\n\t\t}\n\t\tpublic int SizeWidthToFit ()\n\t\t{\n\t\t\treturn SizeWidthToFitWithMin (0);\n\t\t}\n\t", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "\"\"\"\n    def save(self, *args, **kwargs):\n        \"\"\"\n        Save the model\n        :param args: For super()\n        :param kwargs: For super()\n        \"\"\"\n        # Avoid duplicate slug\n        # FIXME AutoSlugField\n        self.slug = unique_slug(Announcement, self, self.slug", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "# Add the PHP lexer to the list of lexers\nlexers['php'] = PhpLexer(startinline=True)\n# Add the PHP lexer to the list of languages\n#lexers['php'] = PhpLexer()\n#lexers['php'] = PhpLexer(startinline=True)\n#lexers['php']", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                 ORDER BY sdate, stime ''', (i,))\n    rows = cursor.fetchall()\n    print \"Rows is: \", rows\n    for row in rows:\n        print \"Row is: \", row\n        cursor.execute('''SELECT sdate, stime, edate, etime, duration, src_calls", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "    conn.table('projects').update({'last_snapshot': timestamp}).run(conn)\n    conn.close()\n    log(\"Updated last_snapshot for {project_id} to {timestamp}\".format(project_id=project_id, timestamp=timestamp))\ndef db_get_last_snapshot():\n    \"\"\"\n    Returns a dictionary with keys the project_id's", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\tcase \"complicity\":\n\t\t\tMsg(\"I'm not sure what you mean by that.<br/>I'm just a shepherd.<br/>I don't know what you're talking about.\");\n\t\t\tbreak;\n\t\t}\n\t}\n\tprotected override async Task Conversation()\n\t{\n\t\tSetBgm(\"NPC_Deian", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead = ()\n        self.codetail = ()\n        self.coderep = ()\nclass VoteAddedResponse(Response):\n    def", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "    def v2_runner_on_ok(self, result):\n        self._finish_task('ok', result)\n    def v2_runner_on_skipped(self, result):\n        self._finish_task('skipped', result)\n    def v2_runner_on_failed(self, result, ignore_errors=False):\n        if ignore_errors:\n", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "            if (toastType.equals(TOAST_DETAILED))\n                Toast.makeText(context, getString(R.string.toast_message_done) + uri, Toast.LENGTH_LONG).show();\nThe line of code you're asking about is:\n\n```java\nif (toastType.equals(TOAST_DETAILED))\n    Toast.makeText(context,", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "    for name, epoch, version, release, architecture in context.table:\n        nevra = build_nevra(name, epoch, version, release, architecture)\n        found = False\n        for key in primary.keys():\n            pkg = primary.items[key]\n            if (nevra == pkg.nevra()):\n", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "        if self.distribution.has_ext_modules():\n            build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n# get_inputs ()\n# -- Command class -----------------------------------------------\nclass install_lib (Command):\n    description = \"install all Python modules (extensions and pure Python)\"\n", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(disassembledValues, lazyPropertyColumnAliases[j], session, entity);\n\t\t\t\tif (InitializeLazyProperty(fieldName, entity, session, snapshot, j", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "        '-o', log_name + '.out',\n        '-e', log_name + '.err',\n        '-q', request['job_max_vmem'],\n        '-l', 'mem=%dG' % request['job_max_vmem'],\n        '-l', 'nodes=1',\n        '-l', 'wall", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "            return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")] \n        public ActionResult SaveEventDelegate(DelegateViewModel model)\n        {\n            var errors = new", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex);\n            }\n            return string.Empty;\n        }\n    }\n}", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "        if premium_url:\n            self.download(premium_url, post={\"download\": \"normal\"})\n            self.logDebug(self.req.http.lastEffectiveURL)\n            check = self.checkDownload({\"expired\": self.LINK_EXPIRED_PATTERN,\n                                        \"wait\"   : re.compile(self.LONG_WAIT_PATTERN),\n                                        \"limit\"", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path == null)\n\t\t\t\treturn null;\n\t\t\t// If the path is too long, search from the last harvestable cell instead.\n\t\t\tif (path.Count > 1 && path[1] - path[0].LengthSquared > searchRadiusSquared)\n\t\t\t{\n\t\t\t\tsearchFromLoc = har", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                    self.logger.error(\"service %s restart failed\" % service_name)\n                    return False\n                else:\n                    self.logger.info(\"dhcpd -t passed\")\n            else:\n                self.logger.info(\"dhcpd -t passed\")\n        else:\n            self.logger.info(\"dhcpd -t passed\")\n        return True", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "        return Event.newBuilder();\n    }\n}", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "            while (true)\n            {\n                if (stateIndex == MAXIMUM_ORDER)\n                {\n                    goto Loop;\n                }\n                if (stateIndex == 0)\n                {\n                    goto Loop;\n                }\n                if (stateIndex == 1)\n                {\n                    goto Loop;\n                }\n                if (stateIndex", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "        /// <summary>\n        /// The Signed Short VR.\n        /// </summary>\n        public static readonly DicomVr SSvr = new DicomVr(\"SS\", false, false, true, 2, true, '\\0', 2,\n            delegate(DicomTag tag, ByteBuffer bb)\n           ", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\t//if (tFull[3] == \"0\") //if it is a jump\n\t\t\t//\tcontinue;\n\t\t\t//if (tFull[3] == \"1\") //if it is a run\n\t\t\t//\tcontinue;\n\t\t\t//if (tFull[3] == \"", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "        insert_bytes(o, 4, 10)\n        self.assertEquals(b'abcdefghij\\x00\\x00\\x00\\x00ij', self.read(o))\n    def test_smaller_than_file_at_end_2(self):\n        o = self.file(b'abcdefghij')\n        insert_bytes(o", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "<?cs if:android.whichdoc == \"online\" ?>\n<?cs ########  HERE IS THE JD DOC CONTENT FOR ONLINE ######### ?>\n<?cs call:tag_list(root.descr) ?>\n<h4><a href='' class=\"expandable\"\n  onclick=\"toggleExpandable(this,'.pax');hideExpandable", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "crunch_result_sets(result_sets, app_pattern, test_pattern, first_repetition, last_repetition)\nThe next line of code is:\n\ncrunch_result_sets(result_sets, app_pattern, test_pattern, first_repetition, last_repetition)\n\nThis line of code is responsible for crunching the result sets and aggregating", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "        self._testUIDGIDSwitch(1, 0, 0, 1, [], [0, 1])\n        self._testUIDGIDSwitch(1, 0, 1, 1, [0, 1, 0, 1], [1, 0", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t}\n\t\t\telse if(model.isPressed() && model.isArmed()){\n\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t}\n\t\t\telse if(model.isPressed()){\n\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "  knn.learn(v[1], 0)\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[1])\n  if winner != 0:\n    failures += \"Inference failed with k=3\\n\"\n  knn.learn(v[2], 0", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "        final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        mirror.writeElement(kind, index, value);\n    }\n    @HOSTED_ONLY\n    public void writeValue(Kind kind, ObjectMirror mirror, int offset, Value value, int length) {\n        assert kind.isPrimitiveOf", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "        /// <param name=\"relativePath\">The path relative to the project directory.</param>\n        /// <returns>\n        /// The full path of the assembly, or <see langword=\"null\" /> if \n        /// <paramref name=\"relativePath\" /> is <see langword=\"null\" /> or", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "def str_format(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using {% and %}\n    instead of { and }\n    \n    >>> str_format('{a}', a=2)\n    {a}\n    >>> str_format('{%a%}', a=2)\n   ", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "        n = m + i16 - 2;\n        i27 = i26 + i16 - 1;\n        i29 = i28 + i16 - 1;\n        i25 = 1;\n        if ((paramInt1 != 0 ? 0", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\tstr += s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t\t\t\tif( s.name == name ) {\n\t\t\t\t\treturn s;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                }\n            );\n            #endregion Lucian\n            #region Malzahar\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Malzahar\",\n                    SpellName = \"MalzaharQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.S", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getEmfUser()).thenReturn(new EmfUser(\"test.tenant\", \"test.user\", \"test.password\"));\n\t\twhen(securityContext.getEmfUser().getTenantId()).thenReturn(\"test.tenant\");\n\t\twhen(securityContext.getEmfUser().getUsername()).thenReturn(\"test", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "        proc = subprocess.Popen(\n            ['something', 'a', 'b'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            close_fds=True)\n        out, err = proc.communicate('in')\n        rc = proc.returncode\n        self.assertEquals(1, rc)\n        self", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t// <file>\n\t\t//     <copyright see=\"prj:///doc/copyright.txt\"/>\n\t\t//     <license see=\"prj:///doc/license.txt\"/>\n\t\t//     <owner name=\"Daniel Grunwald\" email=\"daniel@danielgrunwald.de\"/>\n\t\t//", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\tinternal virtual void SetIndex (Index index)\n\t\t{\n\t\t\tIndex = index;\n\t\t}\n\t\tinternal virtual void SetIndex (string indexName)\n\t\t{\n\t\t\tIndex = Table.Indexes [indexName];\n\t\t}\n\t\tinternal virtual void SetIndex (string indexName, bool isUnique", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "        self.verticalLayout_2.addWidget(self.settings_ui_groupbox)\n        self.verticalLayout_2.addWidget(self.settings_kernels_groupBox)\n        self.verticalLayout_2.addWidget(self.settings_project_groupbox)\n        self.verticalLayout_2.addWidget(self.settings_misc_groupBox)\n        self.verticalLayout_2.setStretch(0,", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "            Cursor wxs = result[ 0 ];\n            if ( wxs == null || !wxs.moveToFirst() ) {\n                // No station with TAF was found nearby\n                Bundle args = getArguments();\n                String stationId = args.getString( NoaaService.STATION_ID );\n                View detail = findViewById( R", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\tITransaction tx = s.BeginTransaction();\n\t\t\tstring sql = \"select Id, Name from Country\";\n\t\t\tint results = s.CreateSQLQuery(sql).AddEntity(typeof (Country)).List().Count;\n\t\t\tQueryStatistics sqlStats = stats.GetQueryStatistics(sql);\n\t\t\tAssert.IsNotNull(sqlStats, \"sql stats", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "            uiCRCITTSum = (uiCRCITTSum << 8) ^ crctab[(uiCRCITTSum >> 8) ^ uiByteValue];\n            }\n            return (ushort)(uiCRCITTSum ^ crcxor);\n        }\n        /// <summary>\n        /// CalcCRC16 is an algorithm", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 1.0F;\n\t}\n\t@Override\n\tpublic void setTarget(LivingEntity target) {\n\t\tsuper.setTarget(target);\n\t}\n\t@Override\n\tpublic void setTarget(LivingEntity target, float distanceFactor) {\n\t\tsuper.setTarget(target, distanceFactor);\n\t}\n\t@Override\n\tpublic void", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "        return new IHyperlinkDetector[] { \n                new CeylonJavaBackendHyperlinkDetector(),\n                new CeylonJavascriptBackendHyperlinkDetector(),\n                new CeylonNativeHeaderHyperlinkDetector(),\n                new JavaHyperlinkDetector(),\n                new ReferencesHyperlinkDetector(),\n                new CeylonHyperlink", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "        self.aspectWidget = Object3DAspect(self)\n        self.scaleWidget = Object3DScale(self)\n        self.privateWidget = Object3DPrivateInterface(self)\n        self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(self.aspectWidget)\n        self.l.addWidget(self.scaleWidget)\n        self.l.addWidget", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\tcase 3: // Set location\n\t\t\t\t{\n\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\tshouldSet = true;\n\t\t\t\t\tshouldSend = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\t{\n\t\t\t\t\tshouldSet = false;\n\t\t\t\t\tshouldSend =", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "   if (value instanceof String)\n   {\n      result = valueConverter.convert((String) value);\n   }\n   else\n   {\n      Converter<Object, String> stringConverter = converterFactory.getConverter(sourceType, String.class);\n      CompositeConverter compositeConverter = new CompositeConverter(stringConverter, valueConverter);\n      result =", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\tif (i!=j)\n\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\tsb.append(\"\"+i+\"->\"+j+\" \\t\"+k+\"\\t\"+fractionWithAmount[i][j][k]+\"\\n\"); \n\t\t\t}\n\t\treturn sb.toString();\n\t", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "            }\n        }\n    }\n}", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTException {\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic MethodInfo TaskBeginMethod {\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "        final int ownerGroupMode = 0700;\n        final int groupMode = 0700;\n        final int groupOwnerMode = 0700;\n        final int groupOwnerGroupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n        final int groupOwnerUserId =", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport)\n\t\t{\n\t\t\treturn v - viewport.ToVector2 ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Vector2 center)\n\t\t{\n\t\t\treturn v - center;\n\t\t}\n\t\tpublic static", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "    def __cmp__(x, y):\n        return cmp(int(x), int(y))\n    def __hash__(self):\n        return hash(int(self))\n    @classmethod\n    def unpack_from(cls, reader):\n        value = reader.unpack_int()\n        return cls.members[value]\n    @classmethod\n    def pack_into", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "                //Console.WriteLine(\"dpslamServer/Send(\" + PortNumber.ToString() + \")/\" + se.Message);\n\t\t\t\t//Console.WriteLine(\"dpslamServer/Send(\" + PortNumber.ToString() + \")/\" + se.Message);\n\t\t\t\t//Console.WriteLine(\"dpslamServer/Send(\"", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "        switch (type) {\n            case Step:\n                List<StepBucket> stepBuckets = convertToStepBucketList(list);\n                notifyStepsReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Success, requestId, stepBuckets);\n                break;\n            case Activity:\n                List<ActivityBucket> activityBuckets", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "  print '                               object,'\n  if bind_count:\n    print '                               a%d,' % bind_count\n  if is_method:\n    print '                               method,'\n  else:\n    print '                               callback,'\n  for i in xrange(bind_count):\n    print '                               a%d,' % i\n ", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "    return HttpResponse(simplejson.dumps(items), content_type=\"application/json\")\n    \"\"\"\n    response = HttpResponse(\n        simplejson.dumps(items),\n        content_type=\"application/json\"\n    )\n    response['Content-Disposition'] = (\n        u'attachment; filename=\"{0}.json\"'.format(filename)\n    )\n    return", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                    new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n        final ASTSearchOptimizer optimizer = new ASTSearchOptimizer();\n        final AST2BOpContext context = new AST2BOpContext();\n        context.setBindings(bsets);\n       ", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "        if \"set_is_active\" in request.POST:\n            return self._handle_set_is_active()\n        return super(UserDetailView, self).post(request, *args, **kwargs)\nPlease provide a detailed explanation of the code and its functionality. The code is a Django view for editing user details. It handles the creation", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "    public IEnumerable<byte> PublicKeyToken {\n      get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// A list of named byte sequences persisted with the assembly and used during execution, typically via .NET Framework helper classes.\n    /// </summary>\n    public IEnumerable<IResourceReference", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "            var vold = new DenseVector(input.Count);\n            var vnew = new DenseVector(input.Count);\n            var vold2 = new DenseVector(input.Count);\n            var vnew2 = new DenseVector(input.Count);\n            var vold3 = new DenseVector(input.Count);\n            var vnew3 =", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\treturn new Apfloat[]{sortedNumbers[left]};\n\t\t} else if (left == right + 1) {\n\t\t\treturn new Apfloat[]{sortedNumbers[left], sortedNumbers[right]};\n\t\t} else {\n\t\t\treturn new Apfloat[]{sortedNumbers[left], sortedNumbers[right]};\n\t\t}\n\t}\n\t\n\t", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "    sample_count[v, reference_set_map[v]] += 1\n            v = parent[v]\n    # Finally, add the stats for the last tree and divide by the total\n    # length that each node was an ancestor to > 0 samples.\n    for v in range(ts.num_nodes):\n        if sample", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "        for key, value in csv_mapping.items():\n            if key in mapping_json[self.enrich_index]['mappings']['properties']:\n                result[key] = value\n            else:\n                result[key] = 'not found'\n        return result\n    def _test_enrich(self, sortinghat=False, projects=False):\n", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t#endregion\n\t\t#region Methods\n\t\tvoid UpdateCurrentMap()\n\t\t{\n\t\t\tif (Game.IsHost)\n\t\t\t{\n\t\t\t\tvar map = orderManager.LobbyInfo.CurrentMap;\n\t\t\t\tif (map != null)\n\t\t\t\t{\n\t\t\t\t\tMap", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t}\n\t\tpublic override string Message\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn base.Message + \" (\" + _status + \")\";\n\t\t\t}\n\t\t}\n\t}\nPlease provide the complete code for the given problem. Certainly! Below is the complete code for the `SmbException` class as", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "        return frame_header + padding_bytes + self.data\n    def __repr__(self):\n        return '<DataFrame| length: {}, flags: {}, stream_id: {}, data: {}>'.format(\n            len(self),\n            '<{}>'.format(','.join(str(flag_type.name) for flag_type in self.defined_flags", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "            foreach (var node in cluster.Nodes)\n                if (node.BoundaryCurve == null)\n                    node.BoundaryCurve = cluster.BoundaryCurve;\n            foreach (var edge in cluster.Edges)\n                if (edge.BoundaryCurve == null)\n                    edge.BoundaryCurve = cluster.BoundaryCurve;\n            foreach (", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "void btKinematicCharacterController::setMaxSlope(double slopeRadians)\n{\n\tm_maxSlopeRadians = slopeRadians;\n}\nbtVector3 btKinematicCharacterController::getUpAxisDirections()\n{\n\treturn getUpAxisDirections(m_upAxis);\n}\nbtVector3 btKinematicCharacterController::getUpAxisDirections(int", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "        if (initializers.size() > 0) {\n            // If the array is being initialized, we need to check if the\n            // initializers are @Unique.\n            for (ExpressionTree initializer : initializers) {\n                if (canBeLeaked(initializer)) {\n                    checker.report(Result.failure(\"", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\tif (nbttagcompound == null)\n\t\t{\n\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t}\n\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\tif (nbttagcompound1 == null", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\tif (typeAttribute != null)\n\t\t\t{\n\t\t\t\t_type = typeAttribute.Value;\n\t\t\t}\n\t\t\t// init return type\n\t\t\tif (_type != string.Empty)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(Context, _type, _returnNode);\n\t\t\t}\n\t\t}\n\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\tmyTrackBar.Width = 80;\n\t\t\t\tmyTrackBar.Orientation = Orientation.Vertical;\n\t\t\t\tmyTrackBar.Width = 100;\n\t\t\t\t\n\t\t\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t@Test\n\t\tpublic void addNothingForNonClassTypes() throws Exception {\n\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");\n\t\t\tinstrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(instrumentationApplier));\n\t\t\t// must be write lock\n\t\t\tverify(classCache, times(1)).", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.currentStmt != other.currentStmt)\n\t\t\treturn false;\n\t\tif (this.correspondingCallSite != other.correspondingCallSite)\n\t\t\treturn false;\n\t\tif (this.postdominators != other.postdominators)\n\t\t\treturn false;\n\t\tif (this.dependsOnCutAP", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "            int min2 = wideLExtent[start][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this left constituent stretch far enough to reach the right constituent?\n              continue;\n            }\n            int max1 =", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "            ['pg_dump', '--format=custom', '--file=pgdump.sql', '--',\n             'src'],\n            ['pg_dump', '--format=custom', '--file=pgdump.sql', '--',\n             'src'],\n            ['pg_dump', '--format=custom', '--file=pgdump.sql', '--", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\tvoid DbgProcess_IsRunningChanged(object? sender, EventArgs e) {\n\t\t\t// If all processes are running and the window is hidden, hide it now\n\t\t\tif (!IsVisible)\n\t\t\t\tUI(() => lazyToolWindowVMHelper.TryHideWindow());\n\t\t}\n\t\t// DbgManager thread\n", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a parameter with a color value.\n\t *\n\t * @param   name    Name of the parameter.\n\t * @param   value   Value of the parameter.\n", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof Contact ) {\n\t\t\tfinal Contact that = (Contact)proxyThat;\n\t\t\tif ( this.getId() == null ) {\n\t\t\t\tif ( that.getId() != null ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if ( !this.getId().equals( that.getId() ) )", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "      if args.print_residual:\n        print(\"Residuals:\")\n        print(\"GMRES:\")\n        print(LSolv.gmres_residual)\n        print(\"Lanczos:\")\n        print(LSolv.lanczos_residual)\n        print(\"Lanczos:\")\n        print(LSolv.lanczos_residual)\n       ", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "        if cdata is not None:\n            # We have a constant idx, so we can do something with it\n            # We need to check if the constant idx is equivalent to\n            # arange(0, input.shape[0], 1)\n            # We can do this by checking if the constant", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "        self.fields['groups'].initial = [group.pk for group in self.user.groups.all()]\n        self.fields['groups'].required = False\n        self.fields['groups'].widget.attrs['class'] = 'form-control'\n        self.fields['groups'].widget.attrs['placeholder'] = 'Select groups'\n        self.fields", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "    event_key = event_key.with_wrapper(wrap)\n    event_key.base_listen(**kw)\n    return event_key\n    def after_compile(self, query):\n        \"\"\"Receive the :class:`.Query` object after it has been composed into\n        a core :class:`.Select` object.\n        This event", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "        for location in self.show_tag_list:\n            show_tag = etree.SubElement(xml_object, 'show')\n            show_tag.set('sources', location)\n        return etree.tostring(xml_object)", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "        for key, value in data_model_changes.items():\n            if isinstance(value, list):\n                for i, v in enumerate(value):\n                    if isinstance(v, dict):\n                        self.update_filter(key, [i])\n            else:\n                self.update_filter(key, [0])\n        self.update_filtered_data()\n        self._", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t}\n\t\tprivate MemberInfo Resolve(CodeGenContext context)\n\t\t{\n\t\t\tif (Class != null)\n\t\t\t{\n\t\t\t\treturn context.ClassLoader.LoadClassByDottedName(Class).GetMember(Method, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static);\n\t\t\t}\n\t\t\telse if (Method", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 18;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t// \n\t\t\t// objYText\n\t\t\t// \n\t\t\tthis.objYText.Location = new", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "        c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files),\n                         set([\"test/mail/syncmail.1\",\n                              \"test/mail/syncmail.2\",\n                              \"test/mail/syncmail.3\",\n                              \"", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "        if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> datum : csvData.entrySet()) {\n            termData.put(datum.getKey(), datum.getValue());\n        }\n    }\n", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveFlower()) {\n\t\t\tNBTTagCompound cmp = stack.getTagCompound();\n\t\t\tpassiveDecayTicks = cmp.getInteger(TAG_PASSIVE_DECAY_TICKS);\n\t\t}\n\t}\n\t@Override\n\tpublic void onWandActivated(World world, BlockPos pos, IBlockState state, EntityPlayer player,", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "        for (Node component : c.getComponents()) {\n            THashSet<Node> neighborsInC = new THashSet<Node>(component.getNeighbors());\n            neighborsInC.retainAll(c.getComponents());\n            float nbNeighbors = neighborsInC.size();\n            neighborsInC.retainAll(component.getNeighbors());\n           ", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "    if are_equal:\n        logger.info(\"Document %s is correctly migrated\" % (str(docid), ))\n        return True\n    else:\n        logger.info(\"Document %s is not correctly migrated\" % (str(docid), ))\n        return False\ndef _fix_recid(recid, logger):\n   ", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\tprivate void menuGetStatus_Click(object sender, System.EventArgs e)\n\t\t{\n\t\t\t//MessageBox.Show(\"Get Status\");\n\t\t\t//MessageBox.Show(\"Get Status\");\n\t\t\t//MessageBox.Show(\"Get Status\");\n\t\t\t//MessageBox.Show(\"Get Status\");\n\t\t\t//MessageBox.Show(\"Get Status\");\n\t\t\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "    for (java.util.Date date : exceptionDates) {\n      ExDate exDate = new ExDate();\n      exDate.setDateTime(date);\n      exDateList.add(exDate);\n    }\n    return exDateList;\n  }\n  /**\n   * Converts a java.util.Date to a Datable.\n   * @", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.Source = DataSource;\n\t\tsourceEventBinding.Target = DataTarget;\n\t\tsourceEventBinding.SourceEventName = SourceEventName;\n\t\tsourceEventBinding.TargetEventName = TargetEventName;\n\t\tsourceEventBinding.OnSourceEventRaised += MirrorSourceProperty;\n\t}\n\tprivate void bindTargetEvent()\n\t{\n", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "        ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class,\n                containerName, this);\n        SpanConfig cfgObject = new SpanConfig();\n        cfgObject.setSpanPort(jsonData);\n        Status result = switchManager.addSpan(cfgObject);\n        if (result.isSuccess()) {\n           ", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tAlert = new ImageHelper(102179, \"images/102179.png\", new Integer(100), new Integer(100));\n\t\t", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "        return rnd.nextInt(size);\n    }\n    public int randomChoice(int size, int min, int max) {\n        if (min > max) {\n            throw new IllegalArgumentException(\"min must be less than max\");\n        }\n        return rnd.nextInt(max - min) + min;\n    }\n    public int randomChoice(int", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "        la = LinkAnnotation()\n        la.subject = man_obj.uuid  # the subordinate is the subject\n        la.subject_type = man_obj.item_type\n        la.project_uuid = man_obj.project_uuid\n        la.source_id = 'label-match'\n        la.predicate_uri = equiv_pred\n        la.object_uri = uri", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "            buffer.Append(\"          .shrinktofit = \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .mergecells  = \")\n                .Append(StringUtil.ToHexString(MergeCells)).Append(\"\\n\");\n            buffer.Append(\"          .readingorder= \")\n", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width kana\n\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int) (extraToJis [value])) |\n\t\t\t\t\t\t(((int) (extraToJis [value + 1])) << 8);\n\t\t\t}\n\t\t\t", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "    src = off1//off2//off3\n    obj.operands = [dst, composer([env.cst(src.int(),28),env.cst(off4,4)])]\n    obj.type = type_data_processing\n@ispec(\"32<[ ~off2(4) ~off3", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t// load the properties file\n\t\tstream = location.openStream();\n\t\tProperties properties = new Properties(stream);\n\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\tpropertiesMap.load(properties);\n\t\treturn propertiesMap;\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new RuntimeException", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "        return this == CREATIVE;\n    }\n    /**\n     * Returns true if this is the SURVIVAL game type\n     */\n    public boolean isSurvival()\n    {\n        return this == SURVIVAL;\n    }\n    /**\n     * Returns true if this is the SPECTATOR game type\n     */\n", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t{\n\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");\n\t\t\tSecurityIdentifier groupSid = new SecurityIdentifier (\"BA\");\n\t\t\tSecurityIdentifier everyoneSid = new SecurityIdentifier (\"WD\");\n\t\t\tCommonSecurityDescriptor csd; DiscretionaryAcl dacl; CommonAce ace;\n\t\t\tcsd", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "        self.__idle(self.__progress_cb,\n                float(self.__queue.qsize()) / len(results))\n        return releases, error\n    def run(self):\n        while True:\n            try:\n                result = self.__queue.get(block=False)\n            except queue.Empty:\n                break\n            self.put(result)\n        self", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "        if (PhotonEditor.Current != null)\n        {\n            if (PhotonEditor.Current.HostType == ServerSettings.HostingOption.PhotonCloud)\n            {\n                if (PhotonEditor.Current.PreferredRegion == CloudRegionCode.none)\n                {\n                    additionalRpcs.Add(\"PhotonNetwork.ConnectUsingSettings\");\n                }\n                else", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "        full_subj.setText(Html.fromHtml(message.subject));\n        full_from_to.setText(Html.fromHtml(message.from + \" \" + message.to));\n        full_date.setText(Html.fromHtml(message.date));\n        full_msgid.setText(Html.fromHtml(message.id));\n        full_repto.setText(Html.fromHtml(message.repto));\n        full_echo", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "            # Transform wave function\n            if time_reversal:\n                psit_G = psit_G.conj()\n            psit_G = np.dot(self.symmetry.op_scc[s], psit_G)\n            # Transform to BZ\n            if self.collinear:\n                psit_G = np.dot(self", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygsTyp, utkastRequest);\n        assertEquals", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILNode child in block.Body) {\n\t\t\t\t\tif (child is ILBasicBlock) {\n\t\t\t\t\t\t// Add the child to the flat body\n\t\t\t\t\t\tflatBody.Add(child);\n\t\t\t\t\t\t// Add the child's body to the flat body\n\t\t\t\t\t\t((ILBasicBlock)child).Body = new", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t\tif (IsRagdoll) {\n\t\t    return;\n\t\t}\n\t    if (ragdoll) {\n\t\t//don't do it again if we're already a ragdoll\n\t\tif (IsRagdoll) {\n\t\t    return;\n\t\t}\n\t\t//don't do it again if we're", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "    def __init__(self, config={}):\n        self.name =  \"\"\n        \"\"\"Layer Name\"\"\"\n        self.top =  ClassFactory( [InterfaceNodeSet, InterpolatedNodeSet] )\n        \"\"\"Accoding topology type interface node set or interpolated node set\"\"\"\n        \n        # assign regions to every topology object", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "        out[outOff + 3] = (byte)(num >> 24);\n        out[outOff + 2] = (byte)(num >> 16);\n        out[outOff + 1] = (byte)(num >> 8);\n        out[outOff] = (byte)(num &", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "        super( source, new Predicate<PatternMatch>()\n        {\n            public boolean matches( PatternMatch match )\n            {\n                return match.getPatternNode().getAssociation() == null;\n            }\n        } );\n        this.objectVariables = objectVariables;\n        this.patternNode = null;\n        this.startNode = null;\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "    elif key == 'TAUX':\n        slice_json['rate'] = transform_values_holder_xml_json_to_json(value[0])\n    else:\n        slice_json[key] = value\n    return slice_xml_json['code'], slice_json\ndef transform_values_holder_xml_json_to_json(values_holder_xml_json, format = str", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "            if (ClientSettings.ICON_ENABLE_FRAME!=null)\n              btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_ENABLE_FRAME)));\n          } else {\n            if(!btn.isSelected())\n              if(ClientSettings.ICON_DISABLE_FRAME!=null)\n                btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_DISABLE_FRAME)));\n         ", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "servers.addServersFromFile(getServerFile()) # Add servers from our server list\nservers.getBestServer() # Find the best server based on priority and availability\ndef getSocket():\n    context = zmq.Context()\n    socket = context.socket(zmq.REQ)\n    socket.LINGER = False\n    socket.connect(servers", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n    {\n      for (int x = leftToRight ? 0 : p", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                    ContentValues values = new ContentValues();\n                    values.put(Db.Table1.GROUP_ID, newId);\n                    db.update(Db.Table1.TABLE_NAME, values, Db.Table1.ID_GROUP + \" = \" + deleteId, null);\n                    //Update budget items\n                    values.clear();\n                    values.put(Db.Table4.GROUP", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "        }\n        #endregion\n    }\n} Here is the completed code:\n\n```csharp\nusing System;\nusing System.Runtime.InteropServices;\nnamespace VisualStudioHelpDownloaderPlus\n{\n    internal static class AuthenticodeTools\n    {\n        [DllImport(\"Wintrust.dll\", PreserveSig = true, SetLastError = false)]\n        private", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "AUTH_PROFILE_MODULE = 'auth.User'\n# Whether to use the \"Etag\" header. This saves bandwidth but slows down performance.\nUSE_ETAGS = False\n# People who get code error notifications.\n# In the format (('Full Name', 'email@example.com'), ('Full Name', 'anotheremail@example.com", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t{\n\t\t\tif (numberToCancel == 0)\n\t\t\t\treturn;\n\t\t\tif (queue.Count == 0)\n\t\t\t\treturn;\n\t\t\tvar item = queue[0];\n\t\t\tif (item.Item != itemName)\n\t\t\t\treturn;\n\t\t\tif (item.NumberToCancel == numberToCancel)\n\t\t\t{\n\t\t\t\titem", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "        infoText += \" file\" if numberOfFiles==1 else \" files\"\n        infoText += \"<br>\"\n        \n        if numberOfHiddenFiles>0:\n            infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n            infoText += \"file\" if numberOfHiddenFiles==1 else", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "        code = re_m4.sub(r'%%\\1%%', code)\n        self.outputs[0].write(code)\n        self.outputs[0].chmod(0644)\n        self.outputs[0].set_run_after(self.inputs[0])\n        self.outputs[0].set_run_after(self.inputs[", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "        result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\n    def readActionList(self, actionlist):\n        listOfInput = []\n        for itm in actionlist:\n            listOfInput.append(itm.data)\n        print \"this is", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ] ) * hdiv0;\n\t\t\t\t\tdelta[ 1 ][ idx ] += MULT( chemical[ 1 ][ idx - reactorExtent ] + chemical[ 1 ][ idx - 1 ]\n\t\t\t\t\t\t\t\t\t- 4 * chemical[ 1 ][ idx ]", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "                if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n            case ColumnType.TIME:\n                DateLocale timeLocale =\n                        locale ==", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t/// <summary>\n\t\t/// Recebe o valor do auto incremento e coloca na propriedade \n\t\t/// </summary>\n\t\t/// <param name=\"qs\">Objeto da Store Procedure</param>\n\t\tprotected override bool ReceberAutoIncremento(QuerySelectStoredProcedure qs, OR", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\tpublic object Replace(object original, object target, object owner)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object[] ToArray(object value)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object[] ToArray(object value, int[] indices)\n\t\t{\n\t\t\tthrow new NotImplementedException", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "        if self.trusted_key == 'enable':\n            trusted_key = 'true'\n        else:\n            trusted_key = 'false'\n        xml_str = CE_NC_MERGE_NTP_AUTH_CONFIG % (\n            self.key_id, self.auth_mode.upper(), self.password, trusted_key)\n        self.cli_load_config(xml_str", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "            component = self.store.update_item(component, editing_user)\n            check_node(component.location, after_create, after_create, editing_user, None, after_create, editing_user)\n        # Change the html, then check that there now are changes\n        child.display_name = 'Changed Display Name'\n        editing_user = self", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "        digest.update((byte) (TEXT_CODE & 0xff));\n        updateWithCharBuff(ch, start, length);\n    }\n    public void endCDATA() throws SAXException {\n    }\n    public void startCDATA() throws SAXException {\n    }\n    public void ignorableWhitespace(char ch[], int start, int", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "def mkcomparison(dict):\ndef mklogical(dict):\ndef mkinsertionloc(dict):\ndef mktype(type, formodulename):\ndef mkunknown(type, data):\ndef mkobject(data, formodulename):\ndef mkobjectfrommodule(data, formodulename):\ndef mkppcportrec(data):\n", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "        {\n            string actionNameLower = actionName.ToLowerInvariant();\n            string actionNameUpper = actionName.ToUpperInvariant();\n            string actionNameCamelCase = ActionNameCamelCase(actionName);\n            string actionNamePascalCase = ActionNamePascalCase(actionName);\n            string actionNameSnakeCase = Action", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "        if event.keyval == gtk.keysyms.F3:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value, entry,\n                callback=callback)\n        elif event.keyval", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "            beanFactory.registerBeanDefinition(beanName, beanFactory.getBeanDefinition(beanName));\n            // Invalidate cached merged bean definitions\n            ((BeanDefinitionRegistry) beanFactory).registerBeanDefinition(\n                    LegacyConfigPostProcessor.BEAN_NAME_REPOSITORY_PROPERTIES, beanFactory\n                            .getBeanDefinition(LegacyConfigPostProcessor", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "        for line in f:\n            if not line.strip():\n                raise ValueError(\"Blank lines in %s\" % path)\n        f.close()\n    finally:\n        if f:\n            f.close()\n    if state == \"present\":\n        if password is None:\n            msg, changed = present(path, username, password", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "        [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n        [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n        [In, MarshalAs(UnmanagedType.LPStruct)] IMFMediaEvent pEvent\n            );\n        [PreserveSig]\n        int GetMediaSource(\n            [MarshalAs(UnmanagedType", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "        Principal principal = checkNotNull( Principals.getCurrentUser() );\n        try {\n            final var user = Auth0UtilsKt.getUser( managementApi, principal.getId() );\n            syncService.syncUser( user );\n        } catch ( IllegalArgumentException | Auth0Exception e ) {\n            throw new BadCredentialsException( \"Unable to", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "        for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag matches what is expected.\n        This verifies the tag name of the element. If the tag name is not\n        recognized then the test will fail", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "    return clone\ndef _get_containing_entref(node):\n    c = node.parentNode\n    while c is not None:\n        if c.nodeType == Node.ENTITY_REFERENCE_NODE:\n            return c\n        c = c.parentNode\n    return None\ndef _get_containing_element(node):\n    c = node.parentNode", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t* @generated\n\t*/\n\t@Test\n\tpublic void testValidateEMSSceneSection", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocatorDigest, endOffset))\n\t\t\t\tkeyLocator.setKeyData(new Blob(decoder.readBlobTlv(TlvTypeCodes.KeyLocatorDigest), true));\n\t\t\telse if (decoder.peekType(TlvTypeCodes.KeyLocator, endOffset))\n\t\t\t\tdecodeName(keyLocator", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "        for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        \n        //Updates the player's weapons\n        for(int i = 0; i < myWeapons.length; i++){\n            myWeapons[i].update(delta);\n        }\n        \n       ", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "        action.setTeam( GameEngine.model().getGame().getRegistrationByColor( colorValue )\n            .getTeam( GameEngine.model().getGame() ) );\n        action.setTeamColor( color );\n        action.setTeamName( GameEngine.model().getGame().getRegistrationByColor( colorValue )\n           ", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "    err = json.loads(r.data.decode(\"utf-8\"))\n    if \"status\" in err and err[\"status\"] == False:\n        msgs = [e[\"msg\"] for e in err[\"errors\"]]\n        raise RuntimeError(\", \".join(msgs))\n    if progress:\n        with open(os.path.basename(url),", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tfailureReason = e.Message;\n\t\t\t\tmergedOrder = null;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmergedOrder = response.Order;\n\t\t\tfailureReason = null;\n\t\t}\n\t}\n}", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "def _total_components_flux(\n    flux: float, components: List[float], consumption: bool = False\n) -> float:\n    \"\"\"Compute the total flux of a reaction's components.\n    Parameters\n    ----------\n    flux : float\n        The flux value.\n    components : list of float\n        The list of", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "        return self.get_queryset().filter(store__path__startswith=pootle_path)\\\n            .filter(submitted_by=user)\\\n            .filter(Q(commented_by=user) | Q(reviewed_by=user))\\\n            .distinct()\n    def get_for_path_and_store(self, pootle_path, store):\n        \"\"\"", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "        migrations.CreateModel(\n            name='Training',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('name', models.CharField(max_length=200)),\n                ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "        # self.logger.debug(\"Switch {} processing packet: {}\".format(self.name, str(poxpkt)))\n        if poxpkt.type == poxpkt.ARP_TYPE:\n            if poxpkt.payload.opcode == pktlib.arp.REQUEST:\n                self.logger.debug(\"Got ARP request: {}\".format(str(pox", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "    if (m_IgnoreChanges)\n      return;\n    if (m_RecentItems.size() >= m_MaxCount)\n      m_RecentItems.remove(0);\n    m_RecentItems.add(item);\n    writeProps();\n  }\n  /**\n   * Removes the item from the internal list.\n   *\n   *", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "            if (src.IsInCombat)\n                return false;\n            if (target.IsInCombat)\n                return false;\n            if (src.IsDead || target.IsDead)\n                return false;\n            if (src.AccessLevel < target.AccessLevel)\n                return false;\n            if (src.AccessLevel == target.AccessLevel", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "        if (halfTradePeriodDate == null && takeOfferDate != null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n    }\n    public Coin getTradeAmount() {\n        return tradeAmount", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "public static void CompFollowSets() {\n\t\tforeach (Symbol sym in Symbol.nonterminals) {\n\t\t\tsym.follow = new BitArray(Symbol.terminals.Count);\n\t\t\tsym.nts = new BitArray(Symbol.nonterminals.Count);\n\t\t}\n\t\tvisited = new BitArray(Node.nodes.Count);\n\t\tforeach", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)(address & 0x000000ff);\n\t\t\tWriteReport(buff);\n\t\t\tmReadDone.WaitOne(3000, false);\n\t\t\treturn mReadBuff;\n\t\t}\n\t\t/// <summary>\n\t\t/// Write data to Wiim", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\tpublic int compare(Object obj1, Object obj2)\n\t\t{\n\t\t\tMskJointVo voObj1 = (MskJointVo)obj1;\n\t\t\tMskJointVo voObj2 = (MskJointVo)obj2;\n\t\t\t// check for a profile instance\n\t\t\tif (voObj1", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\tSendEmail( filePath );\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t\t\treturn DateTime.Now.ToString( \"yyyyMMddHHmmss\" );\n\t\t}\n\t}\n}\n\nThe provided code is a class named `CrashGuard` that handles various aspects related to crash handling in a server environment. Below", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void SecondLevelCacheWithCriteriaQueriesForItem", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "            for (k++; i < N1 + N2 + N3; i++, k += 3)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (k++; i < N1 + N2 + N3 + N4; i++, k +=", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "    def update(self, updates):\n        \"\"\"Update a rate in the UI\n        Args:\n            updates (dict): -  nested dictionary listing the Rate Details\n                Key => Rate Details Description\n                Value => dict\n                    Key => Rate Details table column names\n                    Value => Value to input in the table\n", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t{\n\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, shadowBuffer.GetBuffer(), length );\n\t\t\t\tshadowBuffer.Unlock();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new Axiom", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "self.satfinder_scan_nims = ConfigSelection(choices = satfinder_nim_list)\nself.satfinder_scan_nims.setValue(str(self.frontendData.get(\"tuner_number\", satfinder_nim_list[0][0])))\nself.satfinder_scan_nims.setValue(str(self.frontendData.get(\"tuner_number\", sat", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "    tcpAcceptFilters.add(new TcpAddress.TcpAddressMask(filterStr));\n    return;\n        case ZMQ.ZMQ_IDENTITY:\n            byte[] val;\n            if (optval instanceof String) {\n                val = ((String) optval).getBytes(ZMQ.CHARSET);\n            }\n            else if (opt", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "                // Write the decoded row to the output stream\n                for (int i = 0; i < bytesPerRow; i++) {\n                    fout.WriteByte(curr[i]);\n                }\n                // Update the previous row\n                for (int i = 0; i < bytesPerPixel; i++) {\n                    prior[i", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface('foo.bar'))\n        s.set_interface('foo.bar')\n        self.assertEqual(s.get_interface(), 'foo.bar')\n        # bytestring in Python", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "        output += \"\\n\"\n        output += \"h1(8, 4)0, h4(4, 0), \" + str(element) + \" contains \"\n        try:\n            m_product = self.p_operator(element, index)\n            output += str(m_product) + \"\\n\"\n        except", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n            AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\t@SuppressWarnings(\"unchecked\")\n\t\tfinal Object result = map.remove( key );\n\t\tif ( result == null ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn result;\n\t}\n\t@Override\n\tpublic void clear() {\n\t\tinitialize( true );\n\t\tmap.clear();\n\t\tdirty();\n\t}\n\t@Override\n\tpublic", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member buying an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n\t\t/// <param", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "        return action_message\n    @api.multi\n    def attendance_action_change(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns an action to the check in/out message,\n            next_action defines which menu the check in/out\n            message should return to. (\"My Attendances\" or \"Kiosk Mode", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\t// WDEV-13944\n\t\t// if there are any parent rows with no children - remove them ie. there are\n\t\t// no viewable results for this specimen - WDEV-3953\n\t\tgrdResultsRow parentRow = null;\n\t\tfor (", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "        return new Point(pt.x, pt.y);\n            }\n        }\n    }\n} The provided code snippet is a part of a managed wrapper for Windows API functions, specifically designed to interact with list views from various applications. Below is the completed code with the missing line of code:\n\n```csharp\n/// <summary>\n", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "        if not self.is_child_notebook():\n            self.add(maker.new_tab(self, cwd, profile))\n        else:\n            self.get_child().add(maker.new_tab(self, cwd, profile))\n    def tab_new_from_file(self, filename, debugtab=False, _param1=None, _param2=None", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                toReturn.Add( new StructTypeInfo( \"_\"+Guid.NewGuid().ToString( \"N\" ), managedType, marshalAttribute, arraySize ) );\n            }\n            return toReturn;\n        }\n        private static UnmanagedType? GetMarshalAttribute( string typeName ) {\n            string upperTypeName = typeName.ToUpper();\n            if ( _marshal", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t}\n\t\tpublic override bool IsPrimitive {\n\t\t\tget {\n\t\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"Primitive\");\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsValueTypeOrPrimitive {\n\t\t\tget {\n\t\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\",", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "            throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n    }\n} To complete the code, you need to add the missing lines of code for the `evidence_ModelLookup` method. Here's the completed code:\n\n```csharp\nusing System;\nusing", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "    self._ssl_context = ssl.SSLContext(_openssl_versions[protocol])\n    self._ssl_context.set_ciphers(_openssl_to_stdlib_verify[protocol])\n    self._ssl_context.set_options(ssl.OP_NO_SSLv2 | ssl.OP_NO_SSLv3)\n    self._ssl_context.set_verify(\n       ", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label8 = new global::Gtk.Label ();\n\t\t\tthis.label8.Name = \"label8\";\n\t\t\tthis.label8.Xalign = 0F;\n\t\t\tthis.label8.LabelProp = global::Mono.Unix.Catalog.GetString (\"_Original:\");\n\t\t\tthis.label8.UseUnderline = true;\n\t\t\tthis.h", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "                key2gmwidg[child].boardvbox.set_property(\"tab_reorderable\", True)\n                key2gmwidg[child].boardvbox.set_property(\"tab_reorderable\", False)\n                key2gmwidg[child].boardvbox.set_property(\"tab_reorderable\", True)\n               ", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "\"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_1),\n    \"Move-Tab-to-top\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_2),\n    \"Move-Tab-to-bottom\": QKeySequence(Qt.CTRL + Qt.SH", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "}", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "  return false;\n  }\n  \n  public void setFocus()\n  {\n    super.setFocus();\n    hasFocus = true;\n  }\n  \n  public void unFocus()\n  {\n    super.unFocus();\n    hasFocus = false;\n  }\n  \n  public void setFocusOnAction(IAction action)\n  {\n   ", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(883, 23);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(75, 20);\n\t\t\tthis.butAttach.TabIndex = 8;\n\t\t\tthis.butAttach.Text = \"&Attach", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "    return sb.toString();\n}", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4231_TC2_Legacy ()\n\t\t{\n\t\t\tbyte[] key = Encoding.Default.GetBytes (\"Jefe\");\n\t\t\tbyte", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t\tcurrent_align += 4 + CDRSerializer.alignment(current_align, 4); // intVal\n\t\tcurrent_align += 4 + CDRSerializer.alignment(current_align, 4); // stringVal\n\t\tcurrent_align += 4 + CDRSerializer.alignment(current_align, 4); // floatVal\n\t", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "    return java.GetValue(\"JavaHome\") as String;\n  }\n  private static String GetJavaHome(String resinHome, String javaHome)\n  {\n    if (javaHome == null)\n      return null;\n    if (File.Exists(javaHome + @\"\\bin\\java.exe\"))\n      return javaHome;\n    else if", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "                comment = l\n        # attempt to find job by job name\n        if job:\n            for l in self.lines:\n                if re.match(r'%s' % job, l):\n                    return [comment, l]\n        return [comment, None]\n    def find_env(self, name):\n        # attempt", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "    modifier_json['proximity_mode'] = modifier.proximity_mode\n    modifier_json['target'] = BLObject.to_json(instance=modifier.target)\n    modifier_json['vertex_group'] = modifier.vertex_group\n    modifier_json['vertex_group_a'] = modifier.vertex_group_a\n    modifier_json['vertex_group_b']", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "            double[] likelihoods = new double[totalBuckets];\n            for(int i = 0; i < totalBuckets; ++i)\n            {\n                double bucketRank = mScoreRankBuckets.get(i);\n                if(bucketRank < minLikelihood)\n                    continue;\n                double bucketLikelihood = min", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "        for (val neighbor : vertex.neighbors()) {\n            neighbors.add(neighbor);\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n        assertEquals(3, neighbors.get(2));\n    }\n    @Test\n    @", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "                except ValueError:\n                    print(self.fatal+\"Invalid input\"+self.blk)\n                    continue\n                except IndexError:\n                    print(self.fatal+\"Invalid input\"+self.blk)\n                    continue\n                except KeyboardInterrupt:\n                    print(self.fatal+\"KeyboardInterrupt\"+self.blk)\n                    continue\n                except Exception as", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "            this.rptComboBox.Location = new System.Drawing.Point(91, 161);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);\n            this.rptComboBox.TabIndex = 6;\n            //", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "            'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': \"'created_scan_set'\", 'to': u\"", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "            }\n        }\n        return false;\n    }\n    private void initialize() {\n        processedComplexTypes = new HashMap();\n        processedSimpleTypes = new HashMap();\n        processedElements = new HashMap();\n        processedAttributes = new HashMap();\n        itemNameToSDOName = new HashMap();\n        generatedTypes = new HashMap();\n       ", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "        self.holidays_first_validate(cr, uid, ids, context=context)\n        self.holidays_second_validate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate', 'manager_id2': False})\n    def holidays_second_validate(self, cr, uid, ids", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "        /// <summary>\n        /// Gets and sets whether the Control is enabled or not\n        /// </summary>\n        public bool Enabled\n        {\n            get { return this.Enabled; }\n            set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets and sets whether the Control is visible", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "        return \"Line ID: \" + LineId + \", Type: \" + TypeDescription + \", Channels: \" + Channels + \", Source Count: \" + SourceCount + \", Controls Count: \" + ControlsCount + \", Active: \" + IsActive + \", Disconnected: \" + IsDisconnected + \", Source: \"", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = (ims.core.admin.domain.objects.CareContext) domainFactory.getDomainObject(ims.core.admin.domain.objects.CareContext.class, valueObject.getCareContext().getID());\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\treturn domainObject;\n\t}\n\tprivate static final long", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "        opts += [\"cargo\", \"build\", \"--target\", \"x86_64-unknown-linux-gnu\"] + opts\n        status = call(opts, env=env, verbose=verbose)\n        if status:\n            return status\n        if dev:\n            status = call(\n                [\"cargo\", \"build", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\tdouble estN = counts[3];\n\t\tdouble pEst = p;\n\t\tdouble nEst = 0;\n\t\tif (estP > 0) {\n\t\t\tpEst = estP;\n\t\t}\n\t\tif (estN > 0) {\n\t\t\tnEst = estN;\n\t\t}\n", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "            var stashId = gitStash.Name;\n            var stashRev = new GitRevision(stashId);\n            var indexRev = new GitRevision(ObjectId.IndexId)\n            {\n                ParentIds = new[] { stashId }\n            };\n            var workTreeRev = new GitRevision(ObjectId.WorkTreeId)\n", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "    assert lattice.cbuffer.get_object(bm1_index).out_address != 0\n    assert lattice.cbuffer.get_object(bm2_index).out_address != 0\n    # --------------------------------------------------------------------------\n    # check that the beam elements buffer is now populated with the\n    # assigned addresses:\n    assert job.total_num_assign", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "        if (!(o instanceof AuthScope)) {\n            return false;\n        }\n        final AuthScope that = (AuthScope) o;\n        return this.host.equals(that.host) && this.port == that.port && this.realm.equals(that.realm) && this.scheme.equals(that.scheme);\n    }\n    /**\n     * @see java", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "            b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            return this.EndInvoke(asyncResult);\n        }\n    }\n} The code you provided is a sample implementation of an Asymmetric Encryption client using the Microsoft Web Services framework. It includes methods for parsing command-line", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static String erstelleStringAusMehrerenSeriennummern(\n\t\t\tList<SeriennrChargennrMitMengeDto> snrs, String version) {\n\t\tString s = null;\n\t\tif (snrs != null &&", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \nNext line of code:\n\t\t\t\t\tEGenericType = (EGenericType)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tdefault: \n\t\t\t\t\tbase.CSet(feature, value);\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t}\n", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "    archive_index = load_archive_index(args.index_file)\n    if args.func == 'encrypt':\n        args.func(archive_index, args)\n    elif args.func == 'decrypt':\n        args.func(archive_index, args)\n    elif args.func == 'list':\n        args.func(archive_index, args)\n    elif", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "        if ptype == 'DATA':\n            self.putx([ptype, ['Data: %s' % self.read_buf]])\n            self.read_buf = []\n        elif ptype == 'BITS':\n            self.putx([ptype, ['Bits: %s' % self.read_buf]])\n            self.read_buf = []\n", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "        // literal, line 200\n        if (!(eq_s_b(1, \"a\"))) {\n          return false;\n        }\n        // ], line 200\n        bra = cursor;\n        // <-, line 200\n        slice_from(\"a\");\n        break;\n      case", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "            if (cls == null)\n                return;\n            o = cls.newInstance();\n            o.setObject(dins);\n            o.setFingerprint(fingerprint);\n            o.setChannel(channel);\n            o.setLcm(lcm);\n            o.setLcmUrl(lcmurl);\n            o.setLcm(lcm);\n           ", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "                return result\n        return None\n    def _get_key_usage(self):\n        result = []\n        for usage in self.cert.get_key_usage():\n            result.append(crypto_utils.pyopenssl_normalize_name(usage))\n        return result, self.cert.get_key_usage().is_critical\n    def _get_extended_key_usage(self", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "    print(\"\\t\\t\\tif (i->first->is_connected ()) {\", file=f)\n    print(\"\\t\\t\\t\\tstill_there = true;\", file=f)\n    print(\"\\t\\t\\t}\", file=f)\n    print(\"\\t\\t}\", file=f)\n    print(\"\\t\\t\\tif (still", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "    #     -- The first value is the same as the second value.\n    #     -- The first value is the same as the second value.\n    #     -- The first value is the same as the second value.\n    #     -- The first value is the same as the second value.\n    #     --", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\tif (StartOf(11)) {\n\t\t\tGet();\n\t\t\tint beg = la.pos; int col = la.col;\n\t\t\twhile (StartOf(12)) {\n\t\t\t\tif (StartOf(13)) {\n\t\t\t\t\tGet();\n\t\t\t\t} else {\n\t\t\t\t\tGet();\n\t\t\t\t\tSemErr(\"bad string", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "        edi_doc['product_id'] = line.product_id.id\n        edi_doc['product_uom'] = line.product_uom.id\n        edi_doc['price_unit'] = line.price_unit\n        edi_doc['product_qty'] = line.product_uom_qty\n        edi_doc['discount'] = line.discount\n", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "    Hashtable<String, String> serviceProperties = new Hashtable<String, String>();\n    serviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n    return new ServiceDescription(\"_openhab-server._tcp.local.\", \"openHAB\", httpSSLPort, serviceProperties);\n}\nThe code snippet you provided is part of a Java", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "            }\n            permissions.add(permissionEntry);\n            nameMap.put(name, permissions);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testGetPermissions() throws Exception\n    {\n        setUpTestPermissions();\n        PermissionService permissionService = ctx.getBean(\"permissionServiceImpl\",\n                                                          PermissionServiceSPI.class);\n", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "        ))\n        assert len(devices) > 0\n        for device in devices:\n            assert device.device_path is not None\n            assert device.device_node is not None\n            assert device.device_type is not None\n            assert device.attributes is not None\n            assert device.parent is not None\n            assert device", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "    user = User(app, loginId, password)\n    user.login()\n    user.mainmenu()\n    user.endTutorial()\n    user.cardUpdate()\n    user.cardCategoryUpdate()\n    user.cardComboUpdate()\n    user.menu.menulist()\n    user.menu.fairyselect()\n    user.menu.friendlist()\n    user", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "    if (rv['fitCoefficients'] != []):\n        # Calculate the fit.\n        rv['fitScatter'] = np.sqrt(np.sum(np.square(rv['fitCoefficients'])))\n        # Calculate the alpha.\n        alpha = np.sum(rv['alphaCoefficients'] * rv['fitCoefficients']) /", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "            if (m_Keys.Count > 0)\n            {\n                ItemID = m_Keys[0].ItemId;\n            }\n            else\n            {\n                ItemID = 0;\n            }\n        }\n    }\n    public class InternalTarget : Target\n    {\n        private KeyRing _Target;\n        public", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "        for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String device = iter.next();\n            Tuner tuner = new TunerHdhr(device, addDevice);\n            tuner.liveDevice = true;\n            tunerList.add(tuner);\n        }\n        return tunerList;\n    }\n    \n    private", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "    if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS) {\n      jobs.put(Version.DAY_BY_DAY_STICKERS, new DayByDayStickersMigrationJob", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "    if (split.length < 3) {\n      throw new RuntimeException(\"Invalid RegexNER mapping line \" + lineCount + \": \" + line);\n    }\n    String regex = split[0];\n    String type = split[1];\n    String[] overwritableTypes = split.length > 2 ? split[", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "            if n in sub_path:\n                return n\n        # see if we find it using the path in the source_dir\n        for n in sub_path:\n            if n in source_dir:\n                return n\n        # see if we find it using the path in the source_dir\n        for n in sub", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "        return itertools.imap(lambda f: Feature(ctx, f.idx), features)\nclass _DatasourceFactory(object):\n    \"\"\"A base class for a datasource factory.\n    Required arguments:\n      type -- the type of datasource to create\n      **keywords -- keyword arguments to pass to the datasource constructor\n    \"\"\"\n    def", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "        if self.want.destination != self.have.destination:\n            return self.want.destination\n    @property\n    def interval(self):\n        if self.want.interval != self.have.interval:\n            return self.want.interval\n    @property\n    def timeout(self):\n        if self.want.timeout != self.have.timeout:\n            return self.want", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "    def fill(self, values):\n        \"\"\"\n        Args:\n            values (list): [] to remove all vars or [(\"var\", \"value\", \"type\"), ...] to fill the view\n        \"\"\"\n        if set(values) == set(self.all_vars):\n            return False\n        else:\n            for value in self", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "        }\n        return result;\n    }\n    public IAction getActionObject(String className, String key) throws Exception {\n        IAction result = null;\n        String classPath = getActionProperty(className);\n        if (classPath != null) {\n            // using reflection, load the class for the service\n            Class", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "            \"update_thread\",\n            {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        self._test_request_error(\n            \"update_thread\",\n            {\"commentable", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "            ret = embedManifestDllAction([target[0]], [source[0]], env)\n            if ret:\n                raise SCons.Errors.UserError(\"Unable to embed manifest %s\" % manifestSrc)\n            else:\n                print \"Embedded manifest %s sucessfully\" % manifestSrc\n            return ret\n       ", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "        execute(getSelection(), new SubProgressMonitor(new SubProgressMonitor(new SubProgressMonitor(new SubProgressMonitor(new SubProgressMonitor(new SubProgressMonitor(new SubProgressMonitor(new SubProgressMonitor(new SubProgressMonitor(new SubProgressMonitor(new SubProgressMonitor(new SubProgressMonitor(new SubProgressMonitor(new SubProgressMonitor(new SubProgress", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tdata.outputRowMeta = getInputRowMeta().clone();\n\t\tmeta.getFields(data.outputRowMeta, getStepname(), null, null, this);\n\t\t\n\t\tfor (int i=0;i<meta.getFieldName().length;i++) \n\t\t{\n\t\t\tdata.fieldnrs[i]=getInputRowMeta().indexOf", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "    assert f('+5..', last) == (d(2014,1,30, 22,21), now)\n    assert f('-5..', last) == (d(2014,1,31, 19,47), now)\n", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "            if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            //WalkingRange\n            string swalkingrange = swalkingrange;\n            if (swalkingrange.Contains(\"s\") || swalkingrange.Contains(\"m\") || swalkingrange.Contains(\"h\"))\n                sw", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "    s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n    if s:\n        raise exceptions.TestFail(\"Guest system log is dead. Resume failed.\")\n    logging.info(\"Guest system log is up.\")\n    # Check guest runlevel\n    error_context.context(\"Check guest runlevel\", logging", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "        rc.get();\n        service.shutdown();\n        service.awaitTermination(30, TimeUnit.SECONDS);\n        context.term();\n        context.term();\n        context.term();\n        context.term();\n        context.term();\n        context.term();\n        context.term();\n        context.term();\n        context.term();\n        context.term();\n        context.term();\n", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "            if (this.owner.getDecorator() instanceof FTDecorator) {\n            \t((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().onSendRequestAfter(r);\n            return res;\n        } catch (BodyTerminatedException e) {\n           ", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "byte[] compressedBytes = new byte[compressedSize + newIVTBlob.Length];\ncompressedBytes = new byte[compressedSize + newIVTBlob.Length];\ncompressedBytes = new byte[compressedSize + newIVTBlob.Length];\ncompressedBytes = new byte[compressedSize + newIVTBlob.Length];\ncompressedBytes", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "        self.fm.notify(descr)\n        self.fm.run(['unzip'] + au_flags + [one_file.path])\n        refresh(None)\n        self.fm.env.copy.clear()\n        self.fm.env.cut = False\n        self.fm.env.copy.clear()\n        self.fm.env.cut = False\n        self.fm.env.copy.clear", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_StringStringString ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\", 2);\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.Id", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "        repo = self._setup(da, Action.ACCEPTED, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 3)\n        avs = AppVersion.objects.all()\n        flagdata = flags4appversions(avs)\n        self.assertIn(self.old_av, flagdata)\n        self.assertIn(self", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "            userstate.texture = cmd.parameters[\"texture\"]\n            self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            cmd.response = True\n            self.commands.answer(cmd)\n        elif cmd.cmd == PYMUMBLE_CMD_SETCHANNELSTATE:\n            channelstate = mumble_pb2.ChannelState()\n           ", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "        PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new PlayerGroupLeaderChangedEvent(group, player));\n        }\n    }\n    public static void onPlayerGroupEvent(PlayerGroupEvent event) {\n        PlayerGroup group = event.getGroup();\n        if (group !=", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "    def __str__(self):\n        s = []\n        formatter = self.rowparams[\"formatter\"]\n        outfile = self.rowparams[\"outfile\"]\n        for i in range(self.ncols):\n            if i in hidden_c:\n                if squash_c:\n                    continue\n            c = self.cols[i]\n            if c[", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "        column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        column.quantity_renderer.set_property(\"text\", \"22\")\n        column._update_cell_based_on_data", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "    } while (parent != null);\n    return super.doStartTag();\n    }\n    @Override\n    public int doEndTag() throws PageException {\n\t// provide to parent\n\tTag parent = this;\n\tdo {\n\t    parent = parent.getParent();\nNext line of code:\n    } while (parent != null", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "            }\n            catch (Exception ex) {\n                throw new Exception(\"CreatureEntry.LoadXML\", ex);\n            }\n        }\n        private void ParseStatus(InventoryEntry invEntry, string status)\n        {\n            if (status.Equals(\"0\"))\n                invEntry.State = ItemState.esEmpty;\n            else if (status", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                    m_key[i] = new ExodusActivation();\n\t\t\t\t\telse if (m_Peerless == PeerlessList.MelisandeTrammel)\n\t\t\t\t\t\tm_key[i] = new MelisandeTrammelActivation();\n\t\t\t\t\telse if (m_Peerless == PeerlessList.MelisandeFelucca", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "        new Version(1, new int[]{1, 1, 1, 1}, new ECBlocks(1, new ECB(1, 1)), new ECBlocks(1, new ECB(1, 1)), new ECBlocks(1, new ECB(1, 1)), new EC", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tpbKey = kdf.GenerateKey(p);\n\t\t\tif(!MemUtil.ArraysEqual(pbKey, pbExpc))\n\t\t\t\tthrow new SecurityException(\"Argon2-1\");\n\t\t\t// ======================================================\n\t\t\t// From the official Argon2 1.3 reference code package\n\t\t\t// (test", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (int) (requestManaExact(stack, player, cost, remove) / multiplier);\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor items equipped to lower the cost.\n\t * @param manaToSend How", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# Configure Django's reversion app\nREVERSION = {\n    'enabled': True,\n    'delete_on_migrate': True,\n    'delete_on_update': True,\n    'delete_on_delete': True,\n    'delete_on_save': True,\n    'delete_on_save_on_update': True,\n    'delete", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\"has {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount,\n\t\t\t\t\t\tLightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Adds a frame to the end of the output queue\n\t\t/// </summary", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "        if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList != null))\n                return false", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "        dc.callId = p.readString();\n        dc.callType = p.readInt();\n        dc.callStatus = p.readInt();\n        dc.callState = p.readInt();\n        dc.callDuration = p.readInt();\n        dc.callTime = p.readInt();\n        dc.callTimeRemaining = p.readInt();\n        dc.callTimeRemainingSeconds =", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\tif (licence.isDomainApplication()) {\n\t\t\trelevantLicences.add(licence);\n\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLOG.error(\"Error while getting licences for type: \"\n\t\t\t\t\t\t+ odrMetadata.getType());\n\t\t\t}\n\t\t}\n\t}\n\t/* TODO", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "        for (int x = 0; x < xSizeP; x++)\n        {\n            // Get the tile at (x,y)\n            Vector3 tile = World.current.GetTileAt((int) x, (int) y);\n            // Get the tile at (x+1,y)\n            Vector3", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\n\t\t\t\n\t\t\trawResult = client.call(API_METHOD_ADD, new Object[] { testInt1, testInt2 });\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n\t\t\t\tif (rawResult instanceof Integer)\n\t\t\t\t{\n\t\t\t\t\tresult = (", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t}\n\t\t@Nonnull\n\t\tpublic int[] getBlockSelectionEnds()\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t\t@Nonnull\n\t\tpublic int[] getBlockSelectionStartsAndEnds()\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t\t@Nonnull\n\t\tpublic int", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "        out.writeBoolean(false);\n        out.writeUTF(\"not found\");\n        out.flush();\n        out.close();\n        in.close();\n        return;\n        }\n        out.writeBoolean(true);\n        out.writeObject(found.object);\n        out.flush();\n        out.close();\n        in.close();\n    }\n    private static class ExportedObject", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                    16 + (~stactics_display_buffer.read(i) & 0x0f),\n                    16,\n                    0, 0,\n                    pixel_x, pixel_y,\n                    Machine.visible_area, TRANSPARENCY_NONE, 0);\n                pixel_x += 2;\n            }\n            /*", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "            if (spell.Collision)\n            {\n                var positions = new List<Vector3> { spell.RangeCheckFrom, spell.From, target.Position };\n                var originalUnit = target;\n                result = spell.GetCollision(positions);\n                result.RemoveAll(x => x.NetworkId == originalUnit.NetworkId);\n                result.Hitch", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "        if (graph.isDefCollider(x, y, y)) {\n            return true;\n        }\n        if (graph.isDefCollider(x, y, x)) {\n            return true;\n        }\n        if (graph.isDefCollider(x, x, y)) {\n            return true;\n        }\n        if (graph", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        /// </summary>\n        /// <param name=\"Name\">Name of the element we are looking for</param>\n        /// <returns>The found element</returns>\n        public Drawable FindElement(string Name", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "        if (this.attachmentFile == null) {\n            if (other.attachmentFile != null) {\n                return false;\n            }\n        } else if (!this.attachmentFile.equals(other.attachmentFile)) {\n            return false;\n        }\n        if (this.fileId == null) {\n            if (other.fileId != null", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                }\n            }\n        }\n    }\n}\nThe provided code is a part of a larger script that manages a potion called \"Conflagration Potion\" in a game. The potion has specific properties such as minimum and maximum damage, and it has a delay before it can be used again. The code also includes a mechanism", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t{\n\t\t\t\tWorldChatMessage message = new WorldChatMessage(user, text, user.ToMapPoint(), DateTime.Now);\n\t\t\t\tUsers.Keys.Where(u => CanSee(u, message)).ForEach(u => History[u] = message);\n\t\t\t\tif (History.Count > WorldChat.CMOptions.HistoryBuffer)\n\t\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId, String sCompoName) {\n    return mock.getAvailCompoIds(sClientSpaceId, sUserId, sCompoName);\n  }\n  @Override\n  public String[] get", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                    files[++index] = (String) mListView.getItemAtPosition(key);\n                }\n                final DialogFragment dialog2 = ZipFilesDialog.instantiate(files);\n                mode.finish();\n                dialog2.show(mActivity.getFragmentManager(), BrowserActivity.TAG_DIALOG);\n                return true;\n            }\n            return false;\n        }\n        @", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "    public void a() {\n        this.m();\n    }", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "                z_arr[p_index, kk, 0] = z_dict[z_key][per][0]\n                z_arr[p_index, kk, 1] = z_dict[z_key][per][1]\n                z_err_arr[p_index, kk, 0] = z_dict[z_key][per][2]\n", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "    return context.getString(resourceOne, name);\n  }\n  else {\n    String name = recipients.get(0).toShortString();\n    return context.getString(resourceTwo, name, recipients.size());\n  }\n}\n  else {\n    String name = recipients.get(0).toShortString();\n    return context.getString(resourceMany", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "        env[\"PATH\"] = \":\".join(extra_path) + \":\" + env[\"PATH\"]\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = \":\".join(extra_lib) + \":\" + env[\"LD_LIBRARY_PATH\"]\n        if gonk:\n            env[\"SERVO_GONK\"] = \"1", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "        for path, tests in iteritems(type_paths):\n            for test in tests:\n                source_file = test.source_file\n                if source_file.rel_path not in source_files:\n                    source_files[source_file.rel_path] = source_file\n                tests[test] = test_cls(test, source_file, tests_root)\n       ", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "        if (compiledScript != null) {\n            compiledScript.setScript(null);\n            compiledScript = null;\n        }\n    }\n    private Binding createBindingForCompilation() {\n        final Binding binding = new Binding();\n        binding.setVariable(\"map\", Controller.getCurrentController().getMap());\n        binding.setVariable(\"mapController", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "        {\n            throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {\n            throw new NotSupportedException();\n        }\n", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "    for i in range(energy.size):\n      Etf = energy[i]\n      grad_Etf = grad[i].flatten()\n      grad_E = Etf*grad_var+energy_var*grad_Etf+grad_means\n      grad_E = np.reshape(grad_E, (-1,3))\n      transformed_grad.append", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (this.getClass() != obj.getClass())\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t\tims.ocrr.vo.OrderInvestigationForStatusChangeVo comparand = (ims.ocrr.vo.OrderInvestigationForStatusChangeVo)obj;\n\t\tint cmp = 0;\n\t\tif (caseInsensitive)\n", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "        assertEquals(found.size(), 3);\n        assertEquals(found.get(0).getTags().size(), 2);\n        assertEquals(found.get(1).getTags().size(), 2);\n        assertEquals(found.get(2).getTags().size(), 3);\n    }\n    @Test(expectedExceptions = NotFoundException.class)\n", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "        Parameter pDepth = new ParameterImpl();\n        pDepth.setParameterFamily(pf);\n        pDepth.setParameterCode(\"DEPTH\");\n        pDepth.setParameterValue(depth);\n        crawlParameters.add(pDepth);\n        //EXCLUSION REGEXP\n        Parameter pExclusionRegexp = new ParameterImpl();\n        pExclusionRegexp.setParameter", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t// $capture or $(..capture)\n\t\tLNode sub = GetCaptureIdentifier(pattern);\n\t\tif (sub != null)\n\t\t{\n\t\t\tcaptures = captures ?? new MMap<Symbol, LNode>();\n\t\t\tAddCapture(captures, sub.Name, candidate);\n\t\t\tunmatchedAttrs = V", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "            if (colisionList.Count > 0)\n            {\n                extendedWillHit++;\n                extendedFarmLocation = colisionList[0];\n            }\n            }\n            int shortenWillHit = 0;\n            Vector3 shortenFarmLocation = Vector3.Zero;\n            foreach (Obj_AI_Base objAiBase in Min", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.createFormControls();\n\t\t// Form Controls\n\t\tRuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 75, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\n\t\tsuper.add", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "\"\"\"\nInstall Python and Node prerequisites.\n\"\"\"\nimport hashlib\nimport os\nimport re\nimport subprocess\nimport sys\nfrom distutils import sysconfig\nfrom paver.easy import BuildFailure, sh, task\nfrom .utils.envs import Env\nfrom .utils.timer import timed\nPREREQS_STATE_DIR = os", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "        })\n        f = Form(r)\n        with f.subs.new() as sub:\n            sub.value = 1\n        with f.subs.new() as sub:\n            sub.value = 2\n        with f.subs.new() as sub:\n            sub.value = 3\n        r = f.save", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "    assert simplify(Sum(x, (x, a, b)) + Sum(x, (x, b+1, c))) == \\\n        1 + Sum(x, (x, a, c))\n    assert simplify(Sum(x, (x, a, b)) + Sum(x, (x,", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tSystem.String a1;\n\t\t\tcheckType(l,1,out a1);\n\t\t\tvar ret=UnityEngine.WWW.UnEscapeURL(a1);\n\t\t\tpushValue(l,true);\n\t\t\tpushValue(l,ret);\n\t\t\treturn 2;\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\treturn error(l,e);\n\t\t", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "        this._notifyAction = action;\n        this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n        this._newStartingIndex = startingIndex;\n        }\n        private void InitializeMoveOrReplace(NotifyCollectionChangedAction action, IList newItems, IList oldItems, int", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "        int sizeAfter = getNamespaceResolverSize(desc);\n        assertEquals(sizeBefore, sizeAfter);\n        StringReader reader = new StringReader(writer.toString());\n        InputSource inputSource = new InputSource(reader);\n        Document testDocument = parser.parse(inputSource);\n        writer.close();\n        reader.close();\n        objectToXMLDocument", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "        private void ParseParam(Condition c)\n        {\n            NextToken(TokenType.Name, TokenType.RParen);\n            if (Token.Type == TokenType.RParen)\n                return;\n            var param = ParamEnum(Token.Text);\n            NextToken(\"=\");\n            NextToken(TokenType.String, TokenType.Int);\n            switch (param)\n            {\n", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "\t\t\t\tConsole.WriteLine (\"  Width: {0}\", ide.width);\n\t\t\t\tConsole.WriteLine (\"  Height: {0}\", ide.height);\n\t\t\t\tConsole.WriteLine (\"  Color Count: {0}\", ide.colorCount);\n\t\t\t\tConsole.WriteLine (\"  Reserved: {0}\", ide.reserved);\n\t\t\t\tConsole.WriteLine (\"  Planes: {", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "        if (l == JSR) {\n            JSR.next = null;\n        }\n            if (l == RET) {\n                RET.next = null;\n            }\n            if (l == JSR || l == RET) {\n                continue;\n            }\n            if (l.inSubroutine(id)) {\n                l", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method = (UnityEngine.Ray)typeof(UnityEngine.Ray).CheckCLRTypes(StackObject.To", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\tcomboLabelPosition.select(PageSupport.getLabelPosition(position));\n\t}\n\tprivate Position getPosition() {return PageSupport.getLabelPosition(comboLabelPosition.getSelectionIndex());}\n\tprivate void setPosition(Position position) {comboLabelPosition.select(PageSupport.getLabelPosition(position));}\n}", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "        currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\",currImageValue\n        self.assertEqual( int(currImageValue), int(lastImageValue)-1, \"Failed to decrement the", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "        K = pow(self.f, self.x, self.p)\n        # okay, build up the hash H of\n        # (V_C || V_S || I_C || I_S || K_S || e || f || K)\n        hm = Message()\n        hm.add(self.transport.local_version, self.transport.remote", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "        DefaultMutableTreeNode node = new DefaultMutableTreeNode(overallNodeName);\n        node.setUserObject(connectionData.getConnectionName());\n        node.setExpanded(true);\n        if (disableTreeSelection) {\n            node.setLeaf(true);\n        }\n        treeModel.insertNodeInto(node, tree.getRoot(), tree.getRoot().getChildCount());\n   ", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                res = self.cr.fetchone()[0]\n                return res or 0.0\n        class Payslip(BrowsableObject):\n\"\"\"            \"\"\"a class that will be used into the python code, mainly for usability purposes\"\"\"\n\"\"\"            def _sum(self, code, from_date, to_date=None):\n                if to", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "        #print 'zi', zi, 'rhobarr', rhobarr[i], 'chiarr', chiarr[i], 'dzarr', dVdzdOm[i]\n        #print 'rhobarr', rhobarr[i], 'chiarr', chiarr[i], 'dzarr', dV", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "        d.width = font.getStringBounds(getText(), getFontRenderContext()).getWidth();\n        d.height = font.getStringBounds(getText(), getFontRenderContext()).getHeight();\n        return d;\n    }\n    @Override\n    public Dimension getPreferredSize() {\n        Dimension d = new Dimension();\n        Font font = getFont", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "        #print \"theta_res is \",theta_res\n        #print \"phi is \",phi\n        #print \"flag is \",flag\n        #print \"print_path is \",print_path\n        #print \"self.edge is \",self.edge\n        #print \"self.cutting_limit is \",self.cutting", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\tprivate void ShowOrHide(Window window)\n\t\t{\n\t\t\tif (window == null)\n\t\t\t\tthrow new ArgumentNullException(\"window\");\n\t\t\tif (window.IsVisible)\n\t\t\t\twindow.Hide();\n\t\t\telse\n\t\t\t\twindow.Show();\n\t\t}\n\t}\nPlease provide the complete code for the given problem. Certainly! Below is the", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "        Object.__init__(self, name, title,\n            params[0]['nbins'], array('d', params[0]['bins']),\n            params[1]['nbins'], array('d', params[1]['bins']),\n            params[2]['nbins'], array('d', params[2]['bins", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "            contact.lastMessageTransmitted = query.getLastMessageTransmitted();\n            contact.firstServerMsgId = query.getFirstMessageTransmitted();\n            contact.lastServerMsgId = query.getLastMessageTransmitted();\n            contact.setLastMessageTransmitted();\n            protocol.getStorage().updateLastMessageTransmitted(contact);\n        }\n        if (", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "                im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\", rgb2g)\n            else:\n                im", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t}\n\t\twhile (rsp.isOkey()) {\n\t\t\taddLog24(rsp, ret);\n\t\t\trsp = tag.readRecord(sfi);\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void parseLog24(Application app, ArrayList<byte[]> l) {\n\t\tfor (byte[] b : l", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "\"\"\"\n        yield PascalString16(self, \"filename\", \"Filename\")\n        # Comment\n        if self[\"flags/has_comment\"].value:\n            yield filesizeHandler(UInt16(self, \"comment_size\", \"Size of the compressed comment\"))\n            if self[\"comment_size\"].value > 0:\n                yield", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t// socketAdapter = null;\n\t}\n\t/**\n\t * This is the interface that the engine uses to send and receive data. It\n\t * should be used by the engine to send data to the NE, and receive data from\n\t * the NE.\n\t */\n\t@Override\n\tpublic void setEngine", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "        path = environ['PATH_INFO']\n        for path_prefix, app in self.apps:\n            if path.startswith(path_prefix):\n                return app(environ, start_response)\n        return self.default(environ, start_response)\n    def default(self, environ, start_response):\n        \"\"\"Default WSGI app for unknown paths", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tmodel = Model( sys.argv[ 1 ] , sys.argv[ 2 ] )\n\t\tmodel.setnetwork( sys.argv[ 3 ] )\n\telse :\n\t\tmodel = Model( sys.argv[ 1 ] )\n\t\tmodel.setnetwork( sys.argv[ 2 ] )\n\t''' END OF CODE '''", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "            if (chance > 0)\n            {\n                if (Utility.Random(100) <= chance)\n                {\n                    res = EnhanceResult.Success;\n                }\n                else\n                {\n                    res = EnhanceResult.Failure;\n                }\n            }\n        }\n        public static void CheckResult(ref Enhance", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "        # Create enum type\n        enum_type = typemaps.enum_type_from_name(type_name, entry_name)\n        if enum_type is None:\n            self.msg.fatal(\n                \"Unable to create enum type '%s' from name '%s'\" % (type_name, entry_name),\n                self.src_ref\n", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                arChkBx = new CheckBox[alModules.Count];\n                for (int i = 0; i < alModules.Count; i++)\n                {\n                    try\n                    {\n                        SubClassMenuItem sub = (SubClassMenuItem)alModules[i];\n                        arChkBx[i] = new CheckBox();\n                       ", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "            object obj = this.ViewState[\"SubmitText\"];\n            return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// True to submit value of selected items\n        ///", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "            if(this.trianglesUsed[textureHash] <= 0)\n                continue;\n                if(!this.textureArray[textureHash].getImage().isSelected())\n                {\n                    this.textureArray[textureHash].getImage().selectTexture();\n                }\n                Main.platform.bindTexture(this.textureArray[textureHash]);\n                this.vertex", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "    exposedHeaders = exposedHeaders + ', ' + header\n    response['Access-Control-Expose-Headers'] = exposedHeaders\n    return response\ndef expose_header_for_json(response):\n    \"\"\"\n    Add a header name to Access-Control-Expose-Headers to allow client code to access that header's value\n    \"\"\"\n    return", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                Driver d = idlePool.Dequeue();\n                if (d.IdleSince < now - TimeSpan.FromMilliseconds((int)settings.ConnectionTimeout * 1000))\n                {\n                    oldDrivers.Add(d);\n                }\n            }\n            return oldDrivers;\n        }\n\t}\n}", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "    if len(var) == 1:\n        var = var[0]\n    # List-like format.\n    elif isinstance(var, (list, tuple)):\n        if len(var) == 1:\n            var = var[0]\n        else:\n            var = list(var)\n    return var\ndef _get", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\n", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t}\n\t\t\tcatch (Exception exception)\n\t\t\t{\n\t\t\t\tErrorMessage.Show(exception, Assembly.GetExecutingAssembly(), MethodBase.GetCurrentMethod());\n\t\t\t\tempty = string.Empty;\n\t\t\t}\n\t\t\treturn empty;\n\t\t}\n\t\tpublic static PlayTime operator *(PlayTime time, double? multiplier)\n\t\t{\n\t\t\t", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "        }\n        public ShaderProgram()\n        {\n            PrimitiveType = PrimitiveType.Triangles;\n            Flat = false;\n            _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Started = false;\n            Immediate =", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "        for met in self.metabolites:\n            met._model = self\n        for gene in self.genes:\n            gene._model = self\n        for rxn in self.reactions:\n            rxn._model = self\n        self._trimmed = False\n        self._trimmed_genes = []\n        self", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor (Iterator iter = beans.iterator(); iter.hasNext();) \n\t\t{\n\t\t\tTumourGroupListVo vo = (TumourGroupListVo)iter.next();\n\t\t\tcoll.add(vo);\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static TumourGroupListVoCollection buildFromBeanCollection", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\twhile(foundBottom){\n\t\t\t\t\tfoundBottom = false;\n\t\t\t\t\tfor(int i=0; i!=lines.length; i++){\n\t\t\t\t\t\tif(lines[i].contains(left, cy-h) || lines[i].contains(cx, cy-h) || lines[i].contains(right, cy-h)){\n\t\t\t\t\t\t\tselected.addElement(lines[i]);\n\t\t\t\t\t\t\tfound", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "        mListView.setLayoutAnimation(controller);\n    }\n    \n    /**\n     * Fill the list with data.\n     */\n    private void fillData() {\n    \tmListView.setEmptyView(mEmptyView);\n    \t\n    \tmCursor = mDbAdapter.query(WeaveColumns.TABLE_NAME, null, null, null, null, null", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "            }\n            ARow.SetFieldKeyNull();\n            ARow.SetFieldKey(HighestNumber + 1);\n            ARow.SetFieldKeyNull();\n            ARow.SetFieldKeyNull();\n            ARow.SetFieldKeyNull();\n            ARow.SetFieldKeyNull();\n            ARow.SetFieldKeyNull();\n           ", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tint[] \t\tscoresTmh \t= new int[length];\n\t\tint[] \t\tscoresSignal = new int[length];\n\t\t\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tif (Mappings.ssToInt(structure[i]) != Mappings.indexUnknown)\n\t\t", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
