{"pred": "    private final transient JKademliaRoutingTable routingTable;\n    private final transient KadConfiguration config;\n\n    /* Attributes to be used */\n    private final transient JKademliaStorageEntry content;\n    private final transient JKademliaStorageEntry contentFound;\n    private final transient JKademliaStorageEntry contentToStore;\n   ", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "        // TODO: remove this hack, it is ugly and should be replaced by a better solution\n        // TODO: remove this hack, it is ugly and should be replaced by a better solution\n        // TODO: remove this hack, it is ugly and should be replaced by a better solution\n        // TODO:", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class Encryption1(Encryption):  # noqa: D101\n    input_widths = [8, 8]\n    output_widths = [8, 8]\n\n    @classmethod\n    def eval(cls, x, y):\n        return tuple([x + y, x ^ y])\n\n\nclass Cipher", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "    private ContrastBrightnessAdjustmentEffect mContrastBrightnessAdjustmentEffect;\n    private FlowAbsSubEffect mFlowAbsSubEffect;\n    private QrMarkerEffect mQrMarkerEffect;\n    private ColorFilterEffect mColorFilterEffect;\n    private SobelEffect mSobelEffect;\n    private FlowAbsEffect", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n               ", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务运行实例\n     */\n    private TaskRunner taskRunner;\n\n    /**\n     * 任务运行实例\n     */\n    private TaskCroner taskCroner;\n\n    /**\n     * 任务运行实例\n     */\n    private", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\t// Check if the vault is empty\n\t\t\tif (integrityCheck.check(args.path(), passphrase, false).isEmpty()) {\n\t\t\t\tprint(\"Vault is empty. No problems found.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check if the vault is corrupted\n\t\t\tSet<Problem> problems = integrityCheck.check", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "            DebugManager.INSTANCE.storePrivatePublicKeyToExternalStorage(rsa.getPrivKeyinBase64(),rsa.getPubKeyinBase64());\n            //save device to database\n            DatabaseManager.INSTANCE.setDeviceId(deviceId);\n            //save device to database\n            DatabaseManager.INSTANCE.setUserId(userId);\n            //save", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "    when(mockDataStore.getEnrollSessionData(SESSION_ID)).thenReturn(\n        new EnrollSessionData(ACCOUNT_NAME, APP_ID_SIGN, SERVER_CHALLENGE_SIGN));\n    when(mockDataStore.getTrustedCertificates()).thenReturn(ImmutableSet.of(TRUSTED_CERTIFICATE_2));\n    when(mockDataStore", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "        self.uaA.sendUasResponse(results[0], results[1], reason_rfc3326 = results[2], \\\n          extra_header = results[3])\n        self.uaA.sendUasResponse(results[0], results[1], reason_rfc3326 = results[2", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "    \"\"\" URI SubPackets\n\n    URI SubPackets\n    \"\"\"\n    __typeid__ = 0x00000001\n    __version__ = 0x00000001\n    __flags__ = 0x0000000", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "    if cstr_node.kind == Expr.OPERATOR and cstr_node.binary:\n      lhs_child = ast_node.first_child\n      cstr_node.lhs = convert_ast_constraint(lhs_child)\n      process_children(cstr_node.lhs, lhs_child)\n\n      if ast_node.num_children() > 1:\n        rhs", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "                intent.setDataAndType(Uri.parse(url), \"video/*\");\n                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static boolean useInternPlayer(TDActivity activity) {\n        return activity.isTablet();\n    }\n\n    private static void playVideoIntern(T", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "        // Create a new post location data body.\n        PostLocationDataBody postLocationDataBody = new PostLocationDataBody(AppSettings.sUserLogin, latitude, longitude, AppSettings.sFindPeopleMessage, AppSettings.sUserEmail, AppSettings.sUserName, AppSettings.sUserAvatarUrl);\n        // Create a", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "        ''' Valid arguments. '''\n        pass\n    def test_valid_args(self):\n        ''' Valid arguments. '''\n        pass\n    def test_valid_args(self):\n        ''' Valid arguments. '''\n        pass\n    def test_valid_args(self):\n        ''' Valid arguments. '''\n        pass\n    def test_valid_args(self):\n", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "    def __init__(self, **attrs):\n        nonlocal init_called\n        init_called = True\n        super().__init__(**attrs)\n\n\ndef test_load_default_init_with_kwargs(engine):\n    \"\"\"The default model loader uses cls.__new__(cls) method\"\"\"\n    init_called = False\n\n    def __init", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "XPath30Parser.unregister('||')\nXPath30Parser.unregister('!')\nregister('||', bp=32)\nregister('!', bp=72)\nXPath30Parser.unregister('(', lbp=80, rpb=80, label='expression')\nXPath30Parser.unregister(')')\nregister('", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                    new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new MarbleTransformation(),\n                    new MaskTransformation(),\n                    new MirrorTransformation(),\n                    new PolarTransformation(),\n                    new PosterizeTransformation(),\n                    new", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "    private static final ButterKnife.Action<View> SHOW_DETAILS = (view, index) -> {\n        MovieDetails movieDetails = MovieDetails.create(movieDetailsList.get(index));\n        MovieDetailsActivity.getMovieDetailsIntent(getActivity(),movieDetails,sharedElementName).start();\n    };\n    private static final ButterKnife.Action<View> HIDE", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "            try {\n                if (remoteNotification) {\n                    remoteNotificationManager.addNotificationListener(name, listenerId, filter, handback);\n                } else {\n                    server.getMBeanServerConnection().addNotificationListener(name, listener, filter, handback);\n                }\n\n                writeResponse(ADD_NOTIFICATION_LISTENER, correlationId);\n\n", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "        await wild_report.add_reaction(MyEmojis.ON_MY_WAY)\n        await wild_report.add_reaction(MyEmojis.TRASH)\n        await wild_report.add_reaction(MyEmojis.COMING)\n        await wild_report.add_reaction(MyEmojis.INTERESTED)\n        await wild_report.add_reaction(MyEmojis.INFO)\n        await", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "    if c['data']:\n        data = SNLIData(c['data'])\n    else:\n        data = None\n    # Load dict\n    if c['dict']:\n        dict_ = Dictionary(c['dict'])\n    else:\n        dict_ = None\n    # Load retrieval\n    if c['retrie", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "  assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.amplitude_mps == 50.\n  assert doppler.period_s == 3.\n\n\ndef test_params_d", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n            } else {\n                Toast.makeText(getActivity(), R.string.warning_raffle, Toast.LENGTH_SHORT).show();\n           ", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "        assert self.redlock.locked()\n        time.sleep(self.redlock.auto_release_time * 2)\n        assert not self.redis.exists(self.redlock.key)\n        assert not self.redlock.locked()\n\n    def test_release(self):\n        assert not self.redis.exists(self.redlock.key)\n        with self.assertRaises(Release", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "        return ConeSettings(self._sptr, \"Channel\")\n\n    @threed_cone_settings.setter\n    def threed_cone_settings(self, cone):\n        self._call_fmod(\n            \"FMOD_Sound_Set3DConeSettings\", cone.inside_angle, cone.outside_angle,\n            cone.out", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "    @calg.register(CompressionAlgorithm)\n    def calg_int(self, val):\n        self._calg = CompressionAlgorithm(val)\n\n    @sdproperty\n    def encalg(self):\n        return self._encalg\n\n    @encalg.register(int)\n    @encalg.register(SymmetricKeyAlgorithm)\n   ", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "        cellSize = findCellSize(imgshape, verbose = verbose, out = out, **parameter);\n        \n        #cell intensity and size measurements\n        cellIntensity = findCellIntensity(img2, imgshape, verbose = verbose, out = out, **parameter);\n        cellSize = findCellSize(imgshape,", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "        if (accuracy == Accuracy.GREAT) {\n            if (accuracy == Accuracy.GREAT) {\n                if (accuracy == Accuracy.GREAT) {\n                    if (accuracy == Accuracy.GREAT) {\n                        if (accuracy == Accuracy.GREAT) {\n                            if (accuracy == Accuracy.GREAT) {\n                                if (accuracy", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "        while (transactionIterator.hasNext()) {\n\n            Transaction t = transactionIterator.next();\n\n            printer.print(t);\n\n            System.out.println(print);\n            print.setLength(0);\n\n        }\n\n        exit(0);\n\n    }\n\n    private boolean checkDirectoryValid(File directory) {\n\n        if (!directory.exists()) {\n\n            System.err.println", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "                if (stmnt instanceof InsertMeta) {\n                    InsertMeta insert = (InsertMeta) stmnt;\n                    if (insert.granularitySpec != null) {\n                        insert.granularitySpec.postProcess(insert);\n                    }\n                }\n            }\n        }\n        return pgm;\n    }\n\n    /**\n     * Get", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "        ),\n        ),\n        )\n        message.segments.insert(\n            1,\n            HNVSD1(\n                data=SegmentSequence(\n                    HNSHA2(\n                        security_reference='000000000000000000000000000", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                        env.combExpMaxRegNum = i;\n                        setupCombExpCheck(root, i);\n                        }\n                    } else {\n                        env.combExpMaxRegNum = 0;\n                        setupCombExpCheck(root, 0);\n                    }\n                }\n            } else {\n                env.numCombExpCheck = ", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "    url(r'^toggle-pipeline-config$', login_required(ajax_toggle_pipeline_config),\n        name=\"ajax-toggle-pipeline-config\"),\n    url(r'^run-pipeline-config$', login_required(ajax_run_pipeline_config),\n        name=\"ajax-run-pipeline-config\"),\n    url(r'^delete-pipeline-config$', login_required(", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\n\t\t/* The chart is not ready yet */\n\t\tboolean ready;\n\t\t\n\t\t/* The chart is not ready yet */\n\t\tboolean error;\n\t\t\n\t\t/* The chart is not ready yet */\n\t\tboolean loading;\n\t\t\n\t\t/* The chart is not ready yet */\n\t\tboolean finished;\n\t\t\n\t\t/*", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "        self._storage_type = storage_type\n        return self\n\n    def get_storage_type(self):\n        return self._storage_type\n\n    def get_db_name(self):\n        return self._db_name\n\n    def get_protocol(self):\n        return self._orientSocket.protocol\n\n    def get_orient_socket_instance(self):\n       ", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "    public <$Argument2> AndGivenTwoArguments<$SystemUnderTest, $Argument, $Argument2> andArgument(\n            CheckedBiConsumer<$Argument2, $Argument> biConsumer) {\n        return new GivenTwoArgumentsWhenSteps<>(preparation, biConsumer);\n    }\n\n    @Override\n    public <$Argument", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "    try {\n      return process.await();\n    } catch (CommandFailureException e) {\n      if (expectedExitCodes != null) {\n        for (int exitCode : expectedExitCodes) {\n          if (e.result.exitCode() == exitCode) {\n            return e.result.stdoutStringUtf8();\n          }\n", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\t//Log.v(APP_TAG, \"setTextColor\");\n\t\tif (null != color) {\n\t\t\ttv.setTextColor(color);\n\t\t} else {\n\t\t\ttv.setTextColor(Color.BLACK);\n\t\t}\n\t}\n\tprivate void setFontStyle() {\n\t\tif (null != fontStyle) {\n\t\t\ttv.setTypeface(Typeface.DEFAULT,", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tXmlUtil toXml = new XmlUtil();\n\t\tString xml2 = toXml.toXml(xml);\n\t\tlog.info(\"weixin >>> \" + xml2);\n\t\tAbstractEvent event = XmlUtil.fromXml(AbstractEvent.class, xml2);\n\t\tif (event != null) {\n\t\t\tlog.info(\"we", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "    print \"[INFO] Running Dynamic Analysis\"\n    # TODO: 1. 从文件中读取apk信息\n    # TODO: 2. 从文件中读取apk信息\n    # TODO: 3. 从文件中读取apk信息\n    # TODO: 4.", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "    @raid_party_channel()\n    async def cmd_raidparty(self, ctx, *party_title):\nclembot/exts/raid/raid.py\nclass RaidRepository:\n    _dbi = None\n\n    def __init__(self):\n        pass\n\n    @classmethod\n    def set_dbi(cls,", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0, 0))\n        self.assertEqual(date_string_to_date(\"11/12/2012\"), datetime(", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "        config_actor = ConfigActor(config_file, os.path.dirname(config_file))\n        config_actor.start()\n        gevent.sleep(1)\n\n        bait_session = BaitSession(protocol='pop3', destination_ip='192.168.100.22', destination_port=110,\n", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                            ShareUtil.sharePicture(mActivity, picture.getPics()[0]);\n                            break;\n                        case 1:Next line of code:\n                            ShareUtil.shareText(mActivity, picture.getText_content());\n                            break;\n                        case 2:Next line of code:\n                            ShareUtil.sharePicture(mActivity, picture.getPics()[", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "```\nif opts.outtype[i] == 'mgh':\n```\nis missing a closing parenthesis.", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "                ResponseSyncAdapter.class,\n                ResponseSyncAdapterTest.class,\n                StreamsFragment.class,\n                StreamsSyncAdapter.class,\n                StreamsSyncAdapterTest.class,\n                SurveyActivity.class,\n                SurveyPromptLoader.class,\n                SurveyActivity.SurveyPromptLoader.class,\n                SurveyActivity.SurveyPromptLoader.class,\n                SurveyActivity.S", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "    PubKeyAlgorithm.ECDH: ECDHPriv,\n    PubKeyAlgorithm.ECDH: ECDHPriv,\n    PubKeyAlgorithm.ECDH: ECDHPriv,\n    PubKeyAlgorithm.ECDH: ECDHPriv,\n    PubKeyAlgorithm.ECDH: ECDHPriv", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "    elif is_element_node(item):\n        yield item\nelementpath/xpath1/xpath1_parser.py\nclass XPath1Parser(Parser[XPathToken]):\n    \"\"\"\n    XPath 1.0 expression parser class. Provide a *namespaces* dictionary argument for\n    mapping namespace prefixes to URI inside expressions. If *", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "  _VARZ['no_members'] = Counter\n  _VARZ['penalty'] = Counter\n  _VARZ['penalty_rate'] = Rate\n  _VARZ['penalty_rate_avg'] = AverageRate\n  _VARZ['penalty_rate_avg_age'] = AverageTimer\n ", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "        nc._send_message_with_protocol(OK, protocol)\n        protocol.send_string.assert_called_once_with('11:ok,')\n\n    def test_send_message_with_protocol_bad_message(self):\n        \"\"\"\n        Ensures that the correct exception is raised if the message is not\n        valid.\n        \"\"\"\n        nc = Net", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "        assertEquals(\"query\", qe.getQuery());\n        assertEquals(\"statement\", qe.getStatement());\n        assertEquals(\"statement\", qe.getStatement());\n        assertEquals(\"statement\", qe.getStatement());\n        assertEquals(\"statement\", qe.getStatement());\n        assertEquals(\"statement\", qe.getStatement());\n        assertEquals(\"statement", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "        Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testBatchExecutionSuccess() {\n        StatementBatchExecution sb = new StatementBatchExecution();\n        sb.setSuccess(true);\n\n        ProxyTestDataSource ds = new Proxy", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "            # If we are not queueing commands, send the ADR request\n            if self.config.macqueueing is False:\n                log.info(\"Sending ADR MAC Command\")\n                command = self._createLinkADRRequest(device)\n                self._sendMACCommand(command)\n                continue\n\n        self.adrprocessing =", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "            function = FmllrRescoreFunction(args)\n            p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n            procs.append(p)\n            p.start()\n            while True:\n                try:\n                    done, no_gpost, other_errors = return_queue.get(timeout=1", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "# 16-bit address: 0x0000-0000-0000-0000-0000-0000-0000-0000\n# 64-bit address: 0x0000", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "        Log.d(this.getClass().getSimpleName(), \"ChatSettingsInfo: onStart\");\n        super.onStart();\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Log.d(this.getClass().getSimpleName(), \"ChatSettingsInfo: onCreate\");\n        setHasOptionsMenu(true);\n    }\n\n    @Override", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "    parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\n    parameter = DataElementGroupField(type=ParameterPinTan)\n\n\nclass HITANS8(HITANSBase):\n    parameter = DataElementGroupField(type=ParameterChallengeClass)\n\n\nclass HITANS", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "        json_dict['JD'] = self.img_handle.JD\n        json_dict['time'] = self.img_handle.time\n        json_dict['time_str'] = self.img_handle.time.strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]\n        json_dict['time_str'] =", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "        // get the public rooms list\n        mPublicRoomsListList = new ArrayList<List<PublicRoom>>();\n\n        // get the public rooms\n        Collection<MXSession> sessions = Matrix.getInstance(this).getSessions();\n        for(MXSession session : sessions) {\n            if (session.isAlive()) {\n                Collection", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "        self.bingo_card_manager = BingoCardManager(self.dbi)\n        self.bingo_card_writer = BingoCardWriter(self.dbi)\n        self.bingo_data_generator = BingoDataGenerator(self.dbi)\n        self.guild_metadata = GuildMetadata(self.dbi, self.bot)\n        self.global_config_cache = GlobalConfig", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "    chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)\n\n    #building breakpoint graph\n    bp_graphs = {}\n    for stage in run_stages:\n        bp_graphs[stage] = raw_bp_graphs[stage].infer_adjacencies()\n\n    #building scaffolds", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "        plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n    }\n\n    @Override\n    public void onDisable() {\n        // Save config", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                }\n                break;\n            case \"HwPush\":\n                if(shouldInit()) {Next line of code:\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    private boolean shouldInit() {\n        if (mySettings.getString(\"push_type\", \"GCM\").equals(\"GCM", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new StringArrayResponseHandler());\n        registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new StringResponseHandler());\n        registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "    public boolean isDirty = false;\n    public boolean isModified = false;\n    public boolean isModified2 = false;\n    public boolean isModified3 = false;\n    public boolean isModified4 = false;\n    public boolean isModified5 = false;\n    public boolean isModified6 = false;\n    public boolean", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "    private void createMetricChartPanel(\n            int metric,\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        ChangingCategoryDatasetWithTTG dataset =\n                datasetGenerator.newCategoryDatasetWithTTG(metric, false);\n        GCStatsChartPanel panel =\n                new MetricChartPanel(\n", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "        if (packet.getType() == PacketType.MESSAGE) {\n            if (packet.getSubType() == PacketType.EVENT) {\n                Namespace namespace = namespacesHub.get(packet.getNsp());\n                if (namespace != null) {\n                    namespace.onEvent(client, packet.getName(), packet.getData(), ackManager.getAckCallback(client", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "      lMS.addTrack(factory.createVideoTrack(\"ARDAMS\", lMS));\n      }\n      videoSource = factory.createVideoSource(lMS, appRtcClient.videoConstraints());\n      videoSource.setVideoRenderer(new VideoRendererGui(vsv));\n      videoSourceStarted = true;\n      vsv.postDelayed(new Runnable()", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "        assertThat(jobRequest.isPeriodic()).isFalse();\n        assertThat(jobRequest.getStartMs()).isEqualTo(60_000L);\n        assertThat(jobRequest.isStarted()).isFalse();\n\n        jobRequest = JobManager.instance().getJobRequest(2);\n        assertThat(jobRequest.isPeriodic()).isTrue();\n       ", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "    private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n    private CheckBoxPreferenceShowDialogNewGame preferenceShowDialogNewGame;\n    private CheckBoxPreferenceShowDialogRedeal preferenceShowDialogRedeal;\n    private CheckBoxPreferenceShowDialogMixCards preferenceShowDialogMixCards;\n\n", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "    # create a publisher to publish actions and system\n    publisher = Publisher([obj])\n    publisher.register(obj)\n\n    # create a snapshot timer\n    snapshot_timer = SnapshotTimer(10, publisher)\n\n    # start snapshot timer\n    snapshot_timer.start()\n\n    # start publisher\n    publisher.publish_before(obj)\n\n", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "        docker_config.add_volume_mappings({\n            '/dev/snd': '/dev/snd',\n        })\n        docker_config.add_environment_variables({\n            'DISPLAY': ':0',\n        })\n        docker_config.add_extra_flags(['--net=host'])\n\n        if self.config.use_nvidia:\n            docker_config.add_extra_flags(['--", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "    // http://stackoverflow.com/questions/31246088/how-to-do-recursive-observable-call-in-rxjava\n    return Observable.fromCallable(new Callable<List<Board>>() {\n      @Override public List<Board> call() throws Exception {\n        List<Board> boards = new ArrayList<>();\n", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "        //bgTasksRunning.incrementAndGet();\n        //bgTasksRunning.decrementAndGet();\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_search_contact, container, false);\n\n        searchSpinner = (Spinner) view.findViewById(R", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "    protected String getTestBaseName() {\n        return JUTPreferences.getTestBase();\n    }\n\n    protected String getTestClassName() {\n        return JUTPreferences.getTestClass();\n    }\n\n    protected String getTestMethodPrefix() {\n        return JUTPreferences.getTestMethodPrefix();\n    }\n\n    protected String getTestMethodPostfix", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "        self.assertEqual(self.simulator_data, mock_simulator_data_datagram)\n        self.assertEqual(self.simulator_data.time, mock_simulator_data_datagram.simulation_time)\n        self.assertEqual(self.simulator_data.gps.latitude, mock_simulator_data_datagram.latitude)\n        self.assertEqual(self.simulator_data.gps.longitude,", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "            String response = httpMessage.getRes().getByteResponse();\n            String responseStr = new String(response);\n            String responseStr2 = responseStr.replaceAll(\"\\n\", \"<br>\");\n            String responseStr3 = responseStr2.replaceAll(\"\\r\", \"<br>\");\n            String responseStr4 = responseStr3.replaceAll(\"\\", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "    assert simple_table_status(description) == expected_status\n    assert simple_table_status(description, include=[\"gsi\"]) == expected_status\n    assert simple_table_status(description, include=[\"gsi\", \"table\"]) == expected_status\n    assert simple_table_status(description, include=[\"gsi\", \"table\", \"index\"])", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "def _read(self, fileobj, size):\n    \"\"\"Read a chunk of data from the file object.\n\n    Args:\n        fileobj (fileobj)\n        size (int): The amount of data to read\n    Returns:\n        bytes: The data read\n    Raises:\n        IOError\n    \"\"\"\n    file", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "    visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * f0 -> BasicSearch() f1 -> ( Ord4Search() )?\r\n   */\r\n  public Query visit(CheckOrd4Search n, Query query) {\r\n    Operator op =", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                    new BlockTransformation(20),\n                    new BlockTransformation(20),\n                    new BlockTransformation(20),\n                    new BlockTransformation(20),\n                    new BlockTransformation(20),\n                    new BlockTransformation(20),\n                    new BlockTransformation(20),\n                    new BlockTransformation(20),\n", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "        if self._header[0] == 1:\n            # Parse the error\n            exception_class = self._decode_field( FIELD_STRING )\n            exception_message = self._decode_field( FIELD_STRING )\n            raise PyOrientCommandException( exception_class, exception_message )\n\n        # read the message type\n       ", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "    api = BMUNITSEARCH(args.apikey)\n\n    params = {\n        'FromSettlementDate': args.fromdate or date.today() - timedelta(days=1),\n        'ToSettlementDate': args.todate or args.fromdate or (date.today()) - timedelta(days=1)\n    }\n    if args", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t} // if\n\t\t\titems.add( item );\n\t\t} // for\n\t\treturn items;\n\t}\n\n\t/**\n\t * Returns the list of images in a gallery\n\t * <p", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user, \"foo\") == {\"foo\": {\"S\": \"foo\"}}\n\n\ndef test_extract_key():\n    key = {\"id\": {\"S\": \"foo\"}, \"range\": {\"S\": \"bar\"}}\n    assert extract_key", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "        new TaskName(), StaticString.CONDITIONAL_WHITESPACE,\n        new Spinner(Spinner.SPINNER_SLASHES), StaticString.WHITESPACE,\n        new Percentage(), StaticString.WHITESPACE,\n        StringWrapper.wrap(\"[\", new ProgressBar(50, BAR_EQUALS), \"]\"), StaticString", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "public static FormFor formFor(Object resource) {\n\treturn new FormFor(resource);\n}\npublic static FormFor formFor(Object resource, String... fields) {\n\treturn new FormFor(resource, fields);\n}\npublic static FormFor formFor(Object resource, String... fields, String... labels) {\n\treturn new FormFor(resource,", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data, self)\npacket/Device.py\nclass Device:\n    def __init__(self, data, manager):\n        self.manager = manager\n\n        self.id = data.get(\"id\")\n        self.short_id = data.get(\"", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "    Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n     * Example:\n     * <pre> assertThat(ds.getBatchStatements(), batch(", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "        WallpaperApplyTask task = WallpaperApplyTask.prepare(this);\r\n        if (task != null) {\n            task.wallpaper(mWallpaper);\n            task.start(AsyncTask.THREAD_POOL_EXECUTOR);\n        }\n    }\n\n    @Override\n    public void onPropertiesReceived(Wallpaper wallpaper) {\n        mWallpaper", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "public static final Pattern QUOTED = Pattern.compile(\"\\\"(.*)\\\"\");\r\npublic static final Pattern BOOSTEDQUOTED = Pattern.compile(\"\\\"(.*)\\\"\\\\^(\\\\d+(?:\\\\.\\\\d+)?)\");\r\npublic static final Pattern RANGEXTRACTOR = Pattern.compile(\"^([\\\\[{])?(.*?) (TO", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\tif args.id:\n\t\t\t#check_converter(args.out, args.study_name)\n\t\t\t#args.id=args.id[0]\n\t\t\t#args.id=args.id[0]\n\t\t\t#args.id=args.id[0]\n\t\t\t#args.id=args.id[0]\n\t\t\t#args.id=args.id", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "        self.beginning_datetime = datetime.datetime(*unixTime2Date(self.vidinfo.ts, self.vidinfo.tu))\n\n        # Set the current frame to the first frame\n        self.current_frame = 0\n\n        # Set the current frame chunk to the first frame chunk\n        self.current_fr_chunk_no", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "    p.set_tile(objects.get_tile())\n    p.set_filter(objects.get_tile(), objects.get_values(objects.param_particle_rad))\n    p.set_filter(objects.get_tile(), objects.get_values(objects.param_particle_pos))\n    p.set_filter(objects.get_tile(), objects.get_values(objects.param_particle_rad))\n    p.set_filter(objects.get_tile(),", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\t// TODO: add a way to sync food groups to the server\n\t}\n}\nimport net.minecraft.entity.player.EntityPlayer;\nimport net.minecraft.entity.player.EntityPlayerMP;\nimport net.minecraftforge.common.config.Configuration;\nimport net.minecraftforge.fml.common.FMLCommonHandler;\nimport net.minecraftforge.fml.relauncher.Side;\nimport net.minecraftforge", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "ploghubapp/views.py\nclass VoteCommentView(LoginRequiredMixin, View):\n    form_class = CommentEditForm\n    template_name = 'ploghubapp/vote_comment.html'\n\n    def get(self, request, pk, username, slug):\n        comment = get_object_or_404(Comment,", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\t// TODO: Add description\n\t\t\t\t\t\t// TODO: Add description\n\t\t\t\t\t\t// TODO: Add description\n\t\t\t\t\t\t// TODO: Add description\n\t\t\t\t\t\t// TODO: Add description\n\t\t\t\t\t\t// TODO: Add description\n\t\t\t\t\t\t// TODO: Add description\n\t\t\t\t\t\t// TODO: Add description\n", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "    def __init__(self):\n        super(RevocationKey, self).__init__()\n        self.keyclass = [RevocationKeyClass.Normal, RevocationKeyClass.Sensitive]\n        self.fingerprint = Fingerprint('')\n\n    def __bytearray__(self):\n        _bytes = super(RevocationKey,", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "        if item is None:\n            yield context.root\n        elif is_xpath_node(item):\n            yield item\n        elif is_processing_instruction_node(item):\n            yield item\n\n\n@method(function('comment', nargs=(0, 1), bp=79, label='kind test'))\ndef select_comment_kind_test(self,", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "from Timeline.Handlers.Puffle import handleAdopt, handlePufflePlay, handlePuffleRest, handlePuffleWalk\nfrom Timeline.Database.DB import Puffle\nfrom Timeline.Handlers.Puffle import handleAdopt, handlePufflePlay, handlePuffleRest, handlePuffleWalk\nfrom Timeline.Database.DB", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "    I.set_tile(tile)\n    I.set_filter((slice(0, 16), slice(0, 16), slice(0, 16)), (1, 1, 1))\n    I.set_filter((slice(16, 32), slice(0, 1", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "        manager = mp.Manager()\n        job_queue = manager.Queue()\n        return_dict = manager.dict()\n        info = None\n        if return_info:\n            info = manager.dict()\n        for a in jobs:\n            job_queue.put(a)\n        procs = []\n        for i in range(len(jobs)):\n            p", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "    platepar.rotation_from_horiz = RMS.Astrometry.ApplyAstrometry.rotationWrtHorizon(platepar)\nRMS/Astrometry/ApplyAstrometry.py\ndef getCatalogStarsImagePositions(catalog_stars, jd, platepar):\n    \"\"\" Get the image coordinates of the catalog stars.\n", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "        contentValues.put(JobStorage.COLUMN_END_MS, 60_000L);\n        contentValues.put(JobStorage.COLUMN_INTERVAL_MS, 10_000L);\n        contentValues.put(JobStorage.COLUMN_NUM_FAILURES, 0);\n        contentValues.put(JobStorage.COLUMN_TRANSIENT, true);\n        contentValues.put(Job", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "        ObservableRegistry.getObservable(ChatSettingsRemove.class).register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        ObservableRegistry.getObservable(ChatSettingsRemove.class).remove(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n       ", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "goals/models.py\nclass ProgressFilter(django_filters.FilterSet):\n    indicator = django_filters.ModelChoiceFilter(\n        name='component__indicators', queryset=Indicator.objects.all())\n    target = django_filters.ModelChoiceFilter(\n        name='component__indicators__target',\n        queryset=Target.objects.all())\n    area", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "        }\n    }\n\n    @UiThread\n    protected void setBottomInfo() {\n        if (presenter.getProduceData().getBookmarkCategory().equals(Constants.FRUIT_BOOKMARK)) {\n            TextView textView = (TextView) dataList.findViewById(R.id.bottom_info);\n            textView.setText(\"目前水果價格\");\n        } else", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "        }).then(new OnComplete<Void>() {\n            @Override\n            protected void onComplete(final Void value, final Throwable cause) throws Exception {\n                if (cause == null) {\n                    context.getConnectionState().setConnectionState(reconnecting);\n                } else {\n                    context.handleError(cause);\n                }\n            }\n        });\n\n       ", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "        RegisterFragment.getInstance().onPostRegisterExecute(success, email, password, message);\n    }\n\n    @Override\n    protected void onCancelled() {\n        SpinnerObservable.getInstance().removeBackgroundTask(this);\n    }\n}\nyasme/src/main/java/de/fau/cs/mad/yasme/android/encryption/PasswordEncryption.java\n", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "    private final SpatialOperator spatial = new Geography();\n    private final int k;\n    private final long t;\n    private final int maxIterations;\n    private final int maxIterationsPerState;\n    private final int maxIterationsPerStatePerState;\n    private final int maxIterationsPerStatePerStatePerState;\n    private", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "    private String[] urls;\n    private List<FilterType> filterTypes;\n    private List<FilterUrl> filterUrls;\n    private List<FilterType> filterTypes2;\n    private List<FilterUrl> filterUrls2;\n    private List<FilterType> filterTypes3;\n    private List<Filter", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "  assert isinstance(args.gps_sv[0].getAmplitude(), AmplitudeSine)\n  assert isinstance(args.gps_sv[0].getDoppler(), DopplerSine)\n  assert isinstance(args.gps_sv[0].getL1CA(), GPSSatellite)\n  assert isinstance(args.g", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "        for i in range(len(tris) / 3):\n            self.svg.n_triangles += 1\n            self.svg.n_lines += 3\n            self.svg.n_polygons += 1\n            self.svg.n_polyline += 3\n            self.svg.n_rect += 1\n            self.svg", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(Keys.APP_SHORTCUT)) {\n\t\t\t\t\ta = new ShortcutData();\n\t\t\t\t\ta.read(reader, data);\n\t\t\t\t} else {\n\t\t\t\t\ta = new AppData();\n\t\t\t\t\ta.read(reader, data);\n\t\t\t\t}\n\t\t\t\tif (a != null) {\n\t\t\t\t\tapps.add(a);\n\t\t\t\t\t", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "                if (AppInfoAction.isShow && AppInfoAction.isShowInStatusBar) {\n                    isAppInfoNeed2Add = Action.isNeed2Add(layoutGuts, AppInfoAction.class);\n                }\n                if (ClipBoardAction.isShow && ClipBoardAction.isShowInStatusBar) {\n                    isClipBoard", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "        self.beg_alt = np.arcsin(np.sin(self.beg_vect[2])*np.cos(self.jd_array[0]) + np.cos(self.beg_vect[2])*np.sin(self.jd_array[0])*np.cos(self.lon))\n        self.end_alt = np.arcsin(np.sin(self.end_vect", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\t// TODO: add support for method parameters\n\t\tMMethod m = new MMethod(new FunctionSymbol(currentScope, ctx.ID().getText(), fhead.retType, fhead.args));\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n\tpublic void exitMemberField(@NotNull MemberFieldContext ctx)", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "    /**\n     * Called when the visitor reaches a node with children.\n     * @return Determines whether the node's children will be visited.\n     */\n    boolean add(Node node);\n\n    /**\n     * Called when the visitor reaches a leaf node.\n     * @return Determines whether the sibling nodes following this node will be visited", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "    private SpecificationGenerator specificationGenerator;\n\n    public OpenAPIProcessor(ProcessingEnvironment processingEnvironment) {\n        super(processingEnvironment);\n        this.typeUtils = processingEnvironment.getTypeUtils();\n        this.elementUtils = processingEnvironment.getElementUtils();\n        this.messager = processingEnvironment.getMessager();\n    }\n\n    @Override\n   ", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "        bind(GerritRestModule.class);\n        bind(GerritRestApi.class).toProvider(new GerritApiProvider());\n        bind(GerritRestApiFactory.class);\n        bind(GerritRestApiFactory.class).toProvider(new GerritApiProvider());\n        bind(GerritRestApiFactory.class).", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                if (zxidLong >= snapshots.get(i).lastModified()) {\r\n                    snapFile = snapshots.get(i);\r\n                    break;\r\n                }\r\n                i--;\r\n            }\r\n\r\n            if (snapFile == null) {\r\n                System.err.println(\"No snapshot file found for zxid \" + zxid);\r\n                exit(1);\r\n", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "        if query_string:\n            query = self.parse_search_query(query_string)\n        if filter_type is FilterType.Unassigned:\n            entries = [e for e in entries if e.has_unassigned_split]\n        elif filter_type is FilterType.Income:\n            entries = [e for e in entries if any(getattr", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "    0x00 : ('Start Of Frame (Baseline DCT)', 'SOF0'),\n    0x01 : ('Start Of Frame (Extended Sequential DCT)', 'S0F1'),\n    0x02 : ('Start Of Frame (Progressive DCT)', 'SOF", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\t// Clear search suggestions\n\t\t\t\t\t\tsearchSuggestionsAdaper.update(new ArrayList<>());\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Clear search suggestions\n\t\t\t\t\t\tsearchSuggestionsAdaper.update(new ArrayList<>());\n\t\t\t\t\t\t// Perform search\n\t\t\t\t\t\treturn Observable.just(query).flatMap(query -> {\n\t\t\t\t\t\t\t// Clear search suggestions\n\t\t\t\t\t\t\tsearch", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "    pos = POS + rad * np.random.randn(POS.shape[0], 3)\n    # 2. background\n    bkg = np.random.randn(POS.shape[0], 3) * BKGVALS\n    # 3. add particles\n    pos = scramble_positions(pos)\n   ", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "        result, index = apply_fast_and(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_(left.values, right), left.index)\n\n\ndef apply_or(left: Column, right):\n    if type(right) == Column:\n        result", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                Request request = RequestFragment.sSelectedRequests.get(i);\r\n                stringBuilder.append(\"\\n\\n\").append(request.getName()).append(\" - \")\r\n                        .append(request.getActivity()).append(\"\\n\\n\");\r\n\r\n                if (request.getRequestedOn() != null) {\r\n                    stringBuilder.append(\"Requested On: \").append(request.getRequestedOn());\r\n", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "        return isinstance(instance, (int, float, Decimal, AbstractDateTime, Duration)) \\\n            and not isinstance(instance, bool)\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        if issubclass(subclass, bool):\n            return False\n        return issubclass(subclass, int) or", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "        return SearchMenuPage(self._createSearchHistory(context))\n        return Mediathek(self._createSearchHistory(context))\n        return LiveTvPage(self._createSearchHistory(context))\n        return RubricsPage(self._createSearchHistory(context))\n        return ShowsAzPage(self._createSearchHistory(context))\n        return Rubric", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "            if not checkFileExistence(pattern.get(\"datafile\")):\n                errmsg += \"Data file %s does not exist.\\n\"%(pattern.get(\"datafile\"))\n                rvalue = False\n\n            # 2.2 pattern file existence\n            if not checkFileExistence(pattern.get(\"patternfile\")):\n", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "    serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'created', 'last_modified')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class = ThemeSerializer\n    filter_class = ThemeFilter\n    ordering_fields", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "    private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n    private MenuItem bookmark;\n    private MenuItem about;\n    private MenuItem logout;\n    private AutoCompleteTextView search;\n    private View line;\n    private InputMethodManager imm;\n\n    private CommitItemAdapter commit", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(preprocessors, ddi2fo, postprocessors);\n\t\t\n\t\tFile inputFile = new File(basePathDDI2FO + \"/ddi2fo-00000000000000000000000", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                        new UserLoginTask(true, AbstractYasmeActivity.this.getClass())\n                                .execute(emailTmp);\n                    }\n                });\n\n        // \"Cancel\" button to cancel the dialog\n        alert.setNegativeButton(R.string.cancel,\n                new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int whichButton) {\n                        //", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "    url(r'^view/(?P<slug>[\\w@-]+)$', TranStatusPackageView.as_view(), name=\"package-view\"),\n    url(r'^view/(?P<slug>[\\w@-]+)/(?P<release_slug>[\\w\\-\\+]+)$',\n        TranStatusReleases", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.bandIndexes[0] == NormalRateConfig.GPS.L1.INDEX\n  assert encoder.bandIndexes[1] == NormalRateConfig.GPS.L2.INDEX\n\n\ndef test_GPSL1TwoBits", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "    return tgAsDict[\"tiers\"][0][\"entries\"]\n\n\ndef run_save2(\n    tg,\n    includeBlankSpaces=True,\n    minimumIntervalLength=None,\n    minTimestamp=None,\n    maxTimestamp=None,\n):\n    \"\"\"\n    Mock write function and return the first tier's entry list\n\n    tg.save()", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "        function = SegmentVadFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        done, no_feats, unvoiced = return_queue.get(timeout=1)\n                        if", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "        dataset = UAV123(root_dir, version=version)\n        self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NfS')\n        dataset = NFS(root_dir)\n        self._check_dataset(dataset)\n\n    def test_lasot", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "    void dispatch(CharSequence value, TagValueConsumer consumer) throws InvalidValueException;\n    void dispatch(CharSequence value, TagValueConsumer consumer, Supplier<Boolean> isSet) throws InvalidValueException;\n    void dispatch(CharSequence value, TagValueConsumer consumer, BooleanSupplier isSet) throws InvalidValueException;\n    void dispatch(CharSequence value", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "```python\n            yield self._create_extractor(thresholds)(component,\n                                                      data=data,\n                                                      data_t=data_t,\n                                                      chunk_key=chunk_key,\n                                                      )\n```\nThe code snippet you provided is part of a larger script for processing and analyzing spike data. The function `_create_extractor` is responsible for creating", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\t/**\n\t\t * Expands the specified query node.\n\t\t * @param fieldOptions\n\t\t * @param expanderOptions\n\t\t * @param queryNode\n\t\t * @return\n\t\t */\n\t\tpublic ExpansionResult expandQuery(FieldOptions fieldOptions, ExpanderOptions expanderOptions, AlvisIRQueryNode", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate SchemaValidator schemaValidator;\n\t\n\tprivate ValidationMessage validationMessage;\n\t\n\tprivate boolean isValidationSuccessful;\n\t\n\tprivate boolean isValidationSuccessfulWithException;\n\t\n\tprivate boolean isValidationSuccessfulWithExceptionAndMessage;\n\t\n\tprivate boolean isValidationSuccessfulWithExceptionAndMessageAndFile;\n\t\n\tprivate boolean isValidationSuccessfulWithExceptionAndMessageAnd", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "        registry.put((byte) (ADD_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put((byte) (ATTRIBUTE ^ RESPONSE_MASK), new MarshalledResponseHandler<Attribute>(ATTRIBUTE));\n        registry.put((byte) (ATTRIBUTE_LIST ^ RESPONSE_MASK), new MarshalledResponseHandler", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                        String filename = viewManager.getLogger(lang).getFileName();\n                        File f = new File(filename);\n                        if (f.exists()) {\n                            log.warn(filename + \" Already exists\");\n                            return;\n                        }\n                        FileSaver fs = new FileSaver(content, lang, \"twitter\", url, tweet.getId());\n                       ", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "        elif isinstance(descriptor, AssociatedDescriptor):\n            lines.append('{}{} {}'.format(indent, descriptor, descriptor.associated_field_meaning))\n\n        elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{} {}'.format(indent, descriptor, descriptor.operator_code))\n            if descriptor.operator_code in (201, 202", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "        help=\"\"\"network delay [millisecond].\n        valid units are either: {}.\n        e.g. tcset eth0 --delay 10ms\n        \"\"\".format(\n            \", \".join([\", \".join(values) for values in hr.Time.get_text_units().values()])\n        ),\n    )\n    group.add", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "        return self.contact\n\n    def get_contact(self):\n        if self.get_contacts().exists():\n            return self.get_contacts().first()\n        return None\n\n    def get_message(self):\n        return self.message\n\n    def get_message_id(self):\n        return self.message_id\n\n    def get_message_direction(self):\n        return", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "    PCollection<GCPProject> liveProjects = pipeline.apply(\"Read live projects\", LiveProjectSource.create(org));\n\n    // Filter out projects that are known-good.\n    PCollection<GCPProject> liveProjectsFiltered = liveProjects.apply(\n        FilterOutPolicies.create(taggedKnownGoodStates));\n\n    // Join the", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "        self.generator = SimilarPathGenerator()\n\n    def test_get_pattern(self):\n        self.assertEqual(self.generator.get_pattern(\"http://example.com\"), \"/\")\n        self.assertEqual(self.generator.get_pattern(\"http://example.com/test\"), \"/test/\")\n        self.assertEqual(self.generator.get_pattern(\"http://example.com/test/\"), \"/test", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "        ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ffibuilderRX.compile(tmpdir=cls.tmpdirnameRX.name, verbose=VERBOSE)\n        spec", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "    conditions.append(AndCondition())\n    if \"or\" in operations:\n        conditions.append(OrCondition())\n    if \"not\" in operations:\n        conditions.append(NotCondition())\n    if \"begins_with\" in operations:\n        conditions.append(BeginsWithCondition())\n    if \"between\" in operations:\n", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "        assert get_square_idx(0, 0) == 0\n        assert get_square_idx(0, 1) == 0\n        assert get_square_idx(0, 2) == 0\n        assert get_square_idx(0, 3) == 0\n        assert get_square", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "    private final IJavaProject javaProject;\n    private final IJavaElement[] javaElements;\n    private final IJavaElement[] testElements;\n    private final IJavaElement[] testBases;\n    private final IJavaElement[] methods;\n    private final IJavaElement[] testMethods;\n    private final IJava", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "  self._varz = self.Varz(\n    _VARZ_BASE_NAME,\n    _VARZ,\n    self._varz._VARZ_BASE_NAME,\n    self._varz._VARZ\n  )\n    self._varz._VARZ_BASE_NAME = self._varz._VARZ_BASE_NAME", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "public static void main(String argsd[]) {\n\t\tLinkedBlockingQueue<PageBlock> pageQueue = new LinkedBlockingQueue<PageBlock>();\n\t\tLinkedBlockingQueue<WordBlock> wordQueue = new LinkedBlockingQueue<WordBlock>();\n\t\tLinkedBlockingQueue<ChunkBlock> chunkQueue = new LinkedBlocking", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "    public static int generateAll(ModuleSourceLayout layout, Set<ModuleReference> modules, List<Path> sourcePath, Path destination, Action action) throws IOException {\n    FileHelper.deleteAllFiles(destination, false);\n    Files.createDirectories(destination);\n    \n    return modules.parallelStream()\n        .flatMap(module -> layout.toModule", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "    def enviar_dados_venda(self, dados_venda, *args, **kwargs):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.enviar_dados_venda`.\n\n        :return: Uma resposta SAT especilizada em ``EnviarDadosVenda``.\n        :", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE_ACTION_ID);\n        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new VolumeDownAction(this), VolumeDownAction.VOLUME_DOWN_ACTION", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "    if gopts.trace_python:\n      SetTrace(trace.TracePython())\n\n    if gopts.time:\n      SetDefaultColoring(gopts.color)\n      SetTrace(trace.TraceTime())\n\n    if gopts.event_log:\n      git_trace2_event_log.Write(gopts.event_log)\n\n    if gopts.git_trace2_event_log", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "    @Provides @Singleton\n    PersistentData providePersistentData(SharedPreferences prefs) {\n        return new PersistentData(app, prefs);\n    }\n\n    @Provides @Singleton\n    Prefs providePrefs(SharedPreferences prefs) {\n        return new Prefs(prefs);\n    }\n\n    @Provides @Singleton\n    ImageSaver", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "        Assert.assertThat(ds, totalQueryCount(2));\n        Assert.assertThat(ds, totalQueryCount(3));\n        Assert.assertThat(ds, totalQueryCount(4));\n        Assert.assertThat(ds, totalQueryCount(5));\n        Assert.assertThat(ds, totalQueryCount(6));\n        Assert.assertThat(ds, totalQueryCount(", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "        return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckOutCommand()\n", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "        for (VerifierProperty verifier : processor.getVerifiers()) {\n            VerifierBackground verifierBackground = null;\n            if (verifier.getActivated()) {\n                if (verifier instanceof ValidSchemaNameVerifierImpl) {\n                    verifierBackground = new ValidSchemaNameVerifierImpl(verifier);\n                } else if (verifier", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "            // Show a progress spinner, and kick off a background task to\n            // perform the user login attempt.\n            loginStatusMessageView.setText(R.string.login_progress_signing_in);\n            showProgress(true);\n\n            // Hide the virtual keyboard\n            AbstractYasmeActivity activity = (AbstractYasmeActivity)", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs out the currently logged in user (via user.logout)\n     *\n     * @throws DrupalLogoutException if there was an error logging out, or if there's no currently logged in user.\n     */\n", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "        self.textArea.addMessage(quirks, self.chum)\n        self.textArea.changeTheme(self.mainwindow.theme)\n        self.textArea.changeCheckState()\n        self.textArea.changeTheme(self.mainwindow.theme)\n        self.textArea.changeCheckState()\n        self.textArea.changeTheme(self.mainwindow.theme)\n       ", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "        (r'/problem/(.*)/(.*)', ProblemHandler),\n        (r'/status', StatusHandler),\n        (r'/debug', DebugHandler),\n        (r'/problem/(.*)', ProblemHandler),\n        (r'/problem/(.*)/(.*)', ProblemHandler),\n        (r'/problem/(.*)', Problem", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRNear", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "                throw new ProtTestInternalException(\"Invalid criterion: \" + criterion);\n        }\n\n        return new SelectionChunk(informationCriterion);\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prottest.facade.ProtTestFacade#computeInformationCriterion(pal.alignment.Alignment, es.uv", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "    return Pair(e1, e2, ty1)\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"Turn a Pair into its first component.\n    \n    Arguments:\n    - `expr`: an expression or int or float\n    \"\"\"\n    e = to_expr(expr)\n    ty, _ = typing.in", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "    void inject(BatteryStatusIndicator batteryStatusIndicator);\n    void inject(KioskModeHandler kioskModeHandler);\n    void inject(ConfigurationContentProvider configurationContentProvider);\n    void inject(DemoSamplesInstallerService demoSamplesInstallerService);\n    void inject(PlaybackService playbackService);\n    void inject(PlaybackSettingsFragment playbackSettings", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "    private List<SliceValue> slices = new ArrayList<>();\n    private List<Expense> expenses = new ArrayList<>();\n    private List<Expense> expensesByCategory = new ArrayList<>();\n    private List<Expense> expensesByCategoryAndAmount = new ArrayList<>();\n    private List<Expense> expensesByCategoryAndAmountAndDate", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "    assert_eq_regex_lists(\n        get_exclude_paths(\n            Mock(settings={'pyramid_swagger.skip_validation': paths})),\n        [re.compile(r) for r in paths]\n    )\n    assert_eq_regex_lists(\n        get_exclude_paths(\n            Mock(settings={'pyramid_swagger.skip_validation': paths})),\n       ", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t/**\n\t * @param atomicalConsole\n\t */\n\tCommandExecutor(AtomicalConsole atomicalConsole) {\n\t\tthis.atomicalConsole = atomicalConsole;\n\t}\n\n\t/**\n\t * @param atomicalConsole\n\t */\n\tCommandExecutor(AtomicalConsole atomicalConsole) {\n\t\tthis.atomicalConsole =", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "            except TextGridParseError as e:\n                self.return_dict[\"decode_error_files\"].append(e)\n            except Exception as e:\n                self.return_dict[\"error_files\"].append(e)\n            self.job_q.task_done()\n            if self.finished_adding.stop_check():\n                break\n        self.finished_processing.set()\n       ", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "    api.add_resource(\n        AccelerometerResource,\n        \"/aircraft/sensors/accelerometer\",\n        resource_class_args=(sensors.accelerometer,)\n    )\n\n    api.add_resource(\n        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "        self.assertAlmostEqual(gps.altitude, 300.0 * ur.meter)\n        self.assertAlmostEqual(gps.airspeed, 30.0 * ur.meters_per_second)\n        self.assertAlmostEqual(gps.heading, 45.0 * ur.degrees)\n        self.assertAlmostEqual(gps.airspeed", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "    CMD_OPTION_SUMMARY_HELP_LINE,\n    CMD_OPTION_EXPERIMENTAL_FILTER_HELP_LINE,\n    CMD_OPTION_SHOW_NULL_HELP_LINE,\n    CMD_OPTION_LOCAL_ONLY_INSTANCE_LIST_HELP_LINE,\n    CMD_OPTION_LOCAL_ONLY_INSTANCE_GET_HELP_LINE,\n    CMD_OPTION_FILTER_QUERY_LINE,\n    CMD_OPTION_FILTER_QUERY_LANGUAGE_LINE,\n    CMD", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\t@Resource\n\tprivate HintDisp hintDisp;\n\t@Resource\n\tprivate HintServices hintServices;\n\t@Resource\n\tprivate HintDisp hintDisp;\n\t@Resource\n\tprivate HintServices hintServices;\n\t@Resource\n\tprivate HintDisp hintDisp;\n\t@Resource\n\tprivate HintServices hintServices;\n\t@Resource\n\tprivate HintDisp hintDisp;\n\t", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                        }\n                        else if(exceptionClass.equals(InvalidOperationException.class)){\n                            MessageHelper.showError(project, t.getMessage());\n                        }\n                        else{\n                            MessageHelper.showError(project, t.getMessage());\n                        }\n                    }\n                    logDebug(\"Finished\");\n                    operationInProgress = false;\n                    setControlsEnabled(true);\n                }\n            });\n        }", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "        self.run_e2e_flow_for_language(language=\"Hindi\",\n                                       person_name=u'\\u0906\\u0930\\u0935',\n                                       join_keyword=hindi_born())\n\n    def test_full_e2e_gujarati_signup_and_cancel_flow(self):\n        logging.info(\"", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "  protected LocationUpdateRequester locationUpdateRequester;\n  protected EclairPlacesUpdateService eclairPlacesUpdateService;\n  protected PlacesUpdateService placesUpdateService;\n  protected NewCheckinReceiver newCheckinReceiver;\n  protected PassiveLocationChangedReceiver passiveLocationChangedReceiver;\n  protected LocationChangedReceiver locationChangedReceiver;\n", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "    refresh_avd(adb, avd_path, reference_name, dup_name, emulator)\n    print \"\\n[INFO] MobSF will perform Dynamic Analysis on AVD\"\n    else:\n        print \"\\n[INFO] MobSF will perform Dynamic Analysis on VM\"\n        refresh_vm(get_identifier(), '', '')\n       ", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "# 44018, section 10.1\n# standard RRC header\nclass RRC_header(Layer):\n    constructorList = [\n        Bit('version', Pt=0, BitLen=2, Repr='hum'),\n        Bit('reserved', Pt=1, BitLen=", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\tadjac = CreateAdjSet(data, faces_lh, faces_rh, adjac, adjac.add_adjacency, adjac.add_adjacency, adjac.add_adjacency, adjac.add_adjacency, adjac.add_adjacency, adjac.add_adjacency, adjac.add_adjacency, adj", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "        result.append(\" \").append(exp.getOperator().getValue());\n    } else {\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    }\n    result.append(CLOSE_BRACKET);\n  }\n\n  public void visit(final InExp exp) throws QueryException {\n    String baseVariableName = getVariable", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "        final CacheList cacheList = new CacheList(listName);\n        cacheService.storeCacheList(cacheList);\n        cacheService.storeCaches(cacheList.getCaches());\n        sessionContext.setData(CACHE_LISTS, cacheService.getAllCacheLists());\n        sessionContext.setData(CACHE_LIST, cacheList);\n        sessionContext.fireSession", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "class LayerTLV(Layer):\r\nclass Type1_V(LayerTLV):\r\nclass Type1_TV(LayerTLV):\r\nclass Type2(LayerTLV):\r\nclass Type3_V(LayerTLV):\r\nclass Type3_TV(LayerTLV):\r\nclass Type4_LV(LayerTLV):\r\nclass Type4", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                new TimeEntryOvertimeAggregation()\n        ));\n\n        timeEntriesTable.getColumn(\"status\").setAggregation(\n                ScreensHelper.createAggregationInfo(\n                        projectsService.getEntityMetaPropertyPath(TimeEntry.class, \"status\"),Next line of code:\n                        new TimeEntryStatusAggregation()\n                )\n        );\n\n        time", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "        (True, PubKeyAlgorithm.DSA): DSAPub,\n        (True, PubKeyAlgorithm.ECDH): ECDHPub,\n        (True, PubKeyAlgorithm.ECDH): ECDHPub,\n        (True, PubKeyAlgorithm.ECDH): ECDHPub,\n        (", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "        return self._expansion_info[expansion_num].board_type\n\n    @property\n    def board_num(self):\n        return self._board_num\n\n    @property\n    def expansion_num(self):\n        return self._expansion_num\n\n    @property\n    def is_supported(self):\n        return self._", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "        self.key_size = read_u16le(f)\n        self.index_name = decode_utf16le(self.data)\n\n        self.objects = {}\n        for i in range(count):\n            key = read_u16le(f)\n            value = read_u16le(f)\n            self.objects[key] = value", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "    user = create_inactive_user(email, full_name)\n    user.save()\n    send_connect_email(\n        subject=_('Account Invitation'),\n        template='connect/accounts/emails/invitation.html',\n        recipient=email,\n        site=site,\n        sender='noreply@connect.com',\n        url=reverse('connect:activate_account", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "        await ctx.send(\"Dumping Pokemon Form(s)...\")\n        await ctx.send(\"Dumping Pokemon Form(s)...\")\n        await ctx.send(\"Dumping Pokemon Form(s)...\")\n        await ctx.send(\"Dumping Pokemon Form(s)...\")\n        await ctx.send(\"Dumping Pokemon Form(s)...\")\n        await ctx.send", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "        elif name == \"%s_BCC_BTC\" % constant.EX_BITTREX:\n            ex = Bittrex('BCCBTC')\n        elif name == \"%s_BCC_ETH\" % constant.EX_BITTREX:\n            ex = Bittrex('BCCETH')\n        elif name == \"%", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if item is not None:\n                yield item\n\n    else:\n        # XSD typed selection\n        for item in context.iter_self():\n            if context.item is not None and context.is_principal_node_kind():\n                if isinstance(item", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "    DummySherpaServer server = new DummySherpaServer(10);\n    try {\n      Solutions solutions = helpExecuteQuery(server, 10);\n      Iterator<Map<String,RDFNode>> iter = solutions.iterator();\n      Assert.assertNotNull(iter);\n      List<Map<String,RDFNode>> data = new ArrayList<Map<String", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t}\n\t\telse {\n\t\t\ttextExpander = new IndexBasedTextExpander(index);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\tresult.setIndexReader(expanderIndexReader);\n\t\tresult.setIndexReaderProperties(elt);\n\t\tresult.setIndexReaderProperties(elt", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                }\n                break;\n            case \"HMS\":\n                if(shouldInit()) {Next line of code:\n                }\n                break;\n            default:\n                break;\n        }\n\n        currentUserListView = (ListView) findViewById(R.id.currentUserListView);\n        currentUserAdapter = new UserAdapter(this, currentUserList);\n        currentUserListView", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "    private final KadConfiguration config;\n    private final Node targetNode;\n    private final int timeout;\n    private final int attempts;\n    private final int retryDelay;\n    private final int maxRetries;\n    private final int maxRetriesPerAttempt;\n    private final int maxRetriesPerAttemptPerAttempt;\n   ", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "    output.append(tabulate(rows, headers, tablefmt=tablefmt,\n                           numalign=numalign, stralign=stralign))\n    if status:\n        output.append(status)\n    return '\\n'.join(output)\n\n\ndef format_error(error):\n    msg = str(error)\n    if not hasattr(error, 'one_line_sql", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "    @app.route('/api/word/<id>')\n    @as_json\n    def word_api_route(id):\n    return words_api(wordnik_api, token)\nweb/routes/api_analysis.py\nclass WordDefinition:\n    \"\"\"Definition of a word.\"\"\"\n\n    def __init__(self, part_of_speech, text):\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate Connector connector;\n\tprivate ConnectorIssues connectorIssues;\n\tprivate ConnectorComments connectorComments;\n\tprivate ConnectorWorkLog connectorWorkLog;\n\tprivate ImageView homeButton;\n\t@Inject\n\tprivate GeneralActivity generalActivity;\n\t@Inject\n\tprivate FeedbackActivity feedbackActivity;\n\t@Inject\n\tprivate HTMLDialog htmlDialog;\n\t@Inject\n\tprivate ProjectListActivity project", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "        self.assertIsInstance(handle, HANDLE)\n        self.assertEqual(handle, 0)\n\n    def test_create_event_invalid_handle(self):\n        with self.assertRaises(WindowsAPIError):\n            CreateEvent(bManualReset=False, bInitialState=False, lpName=\"foo\")\n\n    def test_create_event_manual_reset(self):\n        handle = CreateEvent", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "        this.deployments = new SpringDeployments(restTemplate, root, tasks, deployments);\n        this.vms = new SpringVms(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root, tasks, deployments);\n    }\n\n    @Override\n    public Observable<DirectorInfo>", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "        try {\n            currentAnnotatedElement.set(annotation);\n            originatingElements.addAll(roundEnv.getElementsAnnotatedWith(annotation));\n            return parserHolder.parse(roundEnv.getElementsAnnotatedWith(annotation));\n        } catch (Throwable e) {\n            LOG.error(e.getMessage(), e);\n            messager.printMessage(Diagnostic.Kind.ERROR, e", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "    protected PageParser pageParser;\n\n    protected AtomicReference<FetchResult> fetchResult = new AtomicReference<>();\n\n    protected AtomicReference<Page> page = new AtomicReference<>();\n\n    protected AtomicReference<Page> lastPage = new AtomicReference<>();\n\n    protected AtomicReference<Page> lastPageWithBinaryData = new Atomic", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "        actionPopupGroup.add(new AddKeyAction(this));\n        actionPopupGroup.add(new AddValueAction(this));\n        actionPopupGroup.add(new DeleteKeyAction(this));\n        actionPopupGroup.add(new DeleteValueAction(this));\n        actionPopupGroup.add(new CopyNodeAction(this));\n        actionPopupGroup.add(new CopyAllAction", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "    private GuiCheckbox channelEnabled;\n    private GuiCheckbox pmEnabled;\n    private GuiCheckbox channelPattern;\n    private GuiCheckbox useDefault;\n    private GuiCheckbox messagePattern;\n    private GuiCheckbox ignoreChannels;\n    private GuiCheckbox channelCommand;\n    private GuiCheckbox filterEnabled;\n    private GuiCheckbox filterNew;\n   ", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "                return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATION_CODE:\n                return new BtnClearAllNotifications();\n            case ConstantStr.FUNC_CLEAR_MEM_CODE:\n                return new BtnClearBackground();\n            case ConstantStr.F", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "        form.setSashWeights(new int[] { 1, 1 });\r\n        form.setSashPositions(new int[] { 1, 1 });\r\n        form.setSashPositions(new int[] { 1, 1 });\r\n        form.setSashPositions(new int[] { 1, 1 });\r\n", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "        type = Type()\n        type.name = \"foo\"\n        type.format.pretty = True\n        type.format.advanced = True\n\n        self.assertEqual(\"foo\", type.get_sample())\n\n    def test_type_get_sample__return_default_sample(self):\n        type = Type()\n        type.name = \"foo\"\n        type.format", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "                new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStartTimeCommand.class", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "        self._cluster_type = _cluster_type\n        return self\n\n    def get_cluster_name(self):\n        return self._cluster_name\n\n    def get_cluster_type(self):\n        return self._cluster_type\n\n    def get_cluster_location(self):\n        return self._cluster_location\n\n    def get_datasegment_name(self", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "    query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'perms': 'write',\n    }\n    sign_flickr_query(query)\n    url = urlunparse(('http', 'flickr.com', 'services/auth/', None, urlencode(query), None))\n    h = httplib", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t\t/* If the message was rejected, try again with a different slot */\n\t\t\t\t\tString newSlot = calculateNextSlot(sendSlot);\n\t\t\t\t\tchannelProps.put(prefix + PropsKeys.MSG_SLOT, newSlot);\n\t\t\t\t\tLogger.debug(this, \"Trying again with slot \" + newSlot);\n\t\t\t\t\tcontinue;\n\t\t\t\t} catch(", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "        op, arg = bytecode[k][2], bytecode[k][3]\n        if op in (COMPARE_OP, INPLACE_COMPARE_OP):\n          if arg not in self._conds:\n            self._conds[arg] = Condition()\n          self._conds[arg].add_condition(bytecode[k])\n          cond_stack_size += ", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "    List<CreditCard> creditCards = null;\n    List<CreditPeriod> creditPeriods = null;\n    List<DailyExpense> dailyExpenses = null;\n    List<CreditCard> creditCardsWithCreditPeriods = null;\n    List<CreditCard> creditCardsWithCreditPeriodsAndExp", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\nall_platform_slugs.extend(RELSTREAM_SLUGS)\nall_platform_slugs.extend(TRANSIFEX_SLUGS)\nall_platform_slugs.extend(ZANATA_SLUGS)\nall_platform", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\t\t// Show the links to overall and style top 50s\n\t\tList<Property> listLinks = new ArrayList<>();\n\t\tlistLinks.add(new Property(R.drawable.ic_prop_top, getString(R.string.top_overall),\n\t\t\t\tv -> startActivity(TopListActivity.start(this, TopListActivity.Mode.OVERALL", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "    parser = PingParsing()\n    parser.parse(ping_result)\n    parser.as_dict()\n    parser.as_tuple()\n    parser.is_empty()\n    parser.destination\n    parser.packet_transmit\n    parser.packet_receive\n    parser.packet_loss_count\n    parser.packet_loss_rate\n    parser.rtt_min\n    parser.r", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "        // If chat is null, create a new chat\n        chat = new Chat(chatId);\n        // Add chat to database\n        DatabaseManager.INSTANCE.getChatDAO().addOrUpdate(chat);\n        // Get latest message from server\n        GetMessageTask getMessageTask = new GetMessageTask(this);\n        getMessageTask.execute();\n", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\t\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "    account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(string.letters + string.digits) for i in range(20))\n           ", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "        assertThat(qe, isStatementOrBatchStatement());\n        assertThat(qe, prepared());\n        assertThat(qe, batchPrepared());\n        assertThat(qe, preparedOrBatchPrepared());\n        assertThat(qe, callable());\n        assertThat(qe, batchCallable());\n        assertThat(qe, callableOrBatchCallable());\n\n       ", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "    } else if (Utils.getXmlNodeValue(doc, TAG_CANCELED) != null) {\n      log(\"server response is: canceled \" + serverMessage.getUploadedFileNames(), null);\n      successful = false;\n      canceled = true;\n      uploadFinished();\n      return;\n    } else if (Utils.getXmlNodeValue", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "    if args.c_merging_strategy == MergingStrategies.greedy_merging.value:\n        logger.info(\"Merging assembly points greedily\")\n        merged_assembly_points_by_ids = merge_greedily(assembly_points_by_sources=assembly_points_by_sources,\n                                                       acyclic=args.allow_cycles,\n                                                       min_cw", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "    api.add_resource(\n        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/aircraft/sensors/thermometer\",\n        resource_class_args=(sensors.therm", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "    @staticmethod\n    async def send_global_config_embed(ctx, config):\n\n        embed = Embeds.make_embed(header=\"Clembot Configuration\", header_icon=Icons.CONFIGURATION,\n        fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n        inline=True)\n\n       ", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (!level.isInstalled())\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tshowConfirm(\n\t\t\t\t\t\t\tgetString(R.string.install_levels),\n\t\t\t\t\t\t\tgetString(R.string.install_levels_confirmation),\n\t\t\t\t\t\t\tnew Runnable() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {\n\t\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "    private WeeklyCaptionProvider weeklyCaptionProvider;\n\n    /** Caption format provuder for the weekly view */Next line of code:\n    private WeeklyCaptionProvider weeklyCaptionProvider;\n\n    /** Caption format provuder for the weekly view */Next line of code:\n    private WeeklyCaptionProvider weeklyCaptionProvider;\n\n    /** Caption format prov", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Observable<DirectorInfo> info() {\n        return info.info();\n    }\n\n    @Override\n    public Observable<ReleaseSummary> list() {\n        return releases.list();\n    }\n\n    @Override\n", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "    public class JsonTokenTestBase extends TestCase {\n\n  protected static final byte[] SYMMETRIC_KEY = \"kjdhasdkjhaskdjhaskdjhaskdjh\".getBytes();\n\n  protected static final String PRIVATE_KEY =\n      \"MIIEvQIBADANBgkqhkiG9w", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener easyOnViewDetachedFromWindowListener;\n", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "                    //assertTrue(retrievedContent.length == content.length);\n                } catch (FilesException e) {\n                    fail(e.getMessage());\n                }\n            }\n\t\t\t\n\t\t\t// Clean up \n\t\t\tclient.deleteObject(containerName, names[0]);\n\t\t\tassertTrue(client.deleteContainer(containerName));\n\t\t} catch (Exception e)", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "                trackHistoryEntry = new TrackHistoryEntry();\n                trackHistoryEntry.setRecordable(this);\n                trackHistoryEntry.setStationUuid(liveInfo.stationUuid);\n                trackHistoryEntry.setStationIconUrl(liveInfo.stationIconUrl);\n                trackHistoryEntry.setTrack(liveInfo.title);\n                trackHistoryEntry.setArtist", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "@EActivity(resName = \"activity_main\")\npublic class MainActivity extends AbstractRavelryActivity implements NextLineOfCode {\n    @ViewById(R.id.drawer_layout)\n    DrawerLayout drawerLayout;\n\n    @ViewById(R.id.nav_view)\n    View navView;\n\n    @ViewById(R.id.nav_view)\n    View navView", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "public class Home {\r\n\r\n    private final int mIcon;\r\n    private String mTitle;\r\n    private final String mSubtitle;\r\n    private final Home.Type mType;\r\n\r\n    public Home(@DrawableRes int icon, String title, String subtitle, @NonNull Home.Type type) {\r\n        mIcon = icon;\r\n        mTitle =", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "    encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING, Default.ENCODING)\n\n    if typepy.is_empty_sequence(proxy):\n        proxy = app_configs.get(ConfigKey.PROXY_SERVER, Default.PROXY_SERVER)\n\n    con, is_create_db = create_database(\n        ctx.obj[Context.OUTPUT_PATH], ctx.obj", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "    def _getPlaylistItemID(self, item):\n        \"\"\" Match an item to a playlist item and return the item playlistItemID. \"\"\"\n        for _item in self.items():\n            if _item.ratingKey == item.ratingKey:\n                return _item.playlistItemID\nplexapi/library.py\nclass LibrarySection", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "        self.assertEqual(\n            _environment_to_string({u\"e\": u\"f\"}),\n            u\"e=f\\0\\0\")\n\n    def test_type_check_for_environment_value(self):\n        class NonDictValues(object):\n            def values(self):\n                yield u\"e\"\n                yield u\"f\"\n\n        self.assertEqual(\n", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "  if gopts.trace:\n    SetTrace()\nNext line of code:\n  # Handle options that terminate quickly first.\n  if gopts.help or gopts.help_all:\n    self._PrintHelp(short=False, all_commands=gopts.help_all)\n    return 0\n  elif gopts.show_version:\n    #", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "                // 保存日志\n                TaskRunnerLog taskRunnerLog = new TaskRunnerLog(taskData);\n                taskAPI.sendTaskRunnerLog(taskRunnerLog);\n                // 保存运行日志\n                TaskRunnerConfig taskConfig = TaskMetaInfoManager.getRunnerConfig(taskData);\n                TaskRunnerLog taskLog", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "        with self.assertRaises(StopRequest):\n            await r.after_headers(Entry(request=Request(\"GET\", \"http://example.com\"), response=Response(200, {})))\n\n    @async_test()\n    async def test_reject(self):\n        r = RejectStatusCode([404])\n        with self.assertRaises", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "        //用户的性别\n        stuSex = split[2];\n        //用户的班级\n        stuClass = split[3];\n        //用户的专业\n        stuMajor = split[4];\n        //用户的学号\n        stuXH = split[0];\n        //用户的姓名\n        stuName = split", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "    self.__con = connect_memdb()\n    self.__con = SimpleSQLite(dump_db_path, \"w\")\n    self.__con = SimpleSQLite(dump_db_path, \"w\")\n    self.__con = SimpleSQLite(dump_db_path, \"w\")\n    self.__con = SimpleSQLite(dump_db", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "        except AttributeError:\n            return\n        state[\"inventory\"] = inv\n        for item in inv:\n            self.add_basic_properties(state, item)\n\n    def add_exits_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try:\n            exits = obj.exits\n       ", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "public class ProximityVisitor extends GJDepthFirst<Query, Query> {\r\n  private static final Pattern BOOST_EXTRACTOR = Pattern.compile(\"^(.*?)\\\\^(\\\\d+(?:\\\\.\\\\d+)?)$\");\r\n  private final static Logger logger = Logger.getLogger(ProximityVisitor.class.getPackage().getName());\r\n ", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = true;\n\t\tthis.surveyName = null;\n\t}\n\t\n\tpublic ParameterizedGenerationService setPipelineGenerator(PipelineGenerator pipelineGenerator) {\n\t\tthis.pipelineGenerator = pipelineGenerator;\n\t\treturn this;\n\t}\n\t\n\tpublic ParameterizedGenerationService", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "zklogtool/src/main/java/com/zklogtool/data/TransactionState.java\npublic enum TransactionState {\n\n    /**\n     * Transaction is completely written and CRC is successfully validated.\n     */\n    OK,\n    /**\n     * Transaction is not written at all.\n     */\n    EMPTY,\n    /**\n     * Part of transaction", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "        except UncertainTimeError:\n            log.error(\"We couldn't find a good ntp server.  Switzerland won't work!\")\n            sys.exit(1)\n        except:\n            log.error(\"We couldn't find a good ntp server.  Switzerland won't work!\")\n            log.error(traceback.format_exc())\n", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "        Cursor cursorById = mContext.getContentResolver().query(MovieColumns.CONTENT_URI,null,where.sel(),where.args(),null);\n        DataTestUtilities.validateMovieCursor(\"query by id using library's syntax\", cursorById, DataTestUtilities.createMovieEntry());\n        cursorById.close();\n\n        // Test the basic content provider query", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n   ", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "        self.assertEqual(node_children(self.elem), [self.elem])\n        self.assertEqual(node_children(self.elem, 'child'), [self.elem])\n        self.assertEqual(node_children(self.elem, 'child'), [self.elem])\n        self.assertEqual(node_children(self.elem, 'child'), [self.elem])\n        self.assertEqual(node_children(self.elem", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\t// TODO Auto-generated method stub\r\n\t}\r\n\r\n\t@Override\r\n\tprotected void onResume() {\r\n\t\tsuper.onResume();\r\n\t\t// TODO Auto-generated method stub\r\n\t}\r\n\r\n\t@Override\r\n\tprotected void onPause() {\r\n\t\tsuper.onPause();\r\n\t\t// TODO Auto-generated method stub\r\n\t}\r\n\r\n\t@Override\r\n\tprotected void onDestroy()", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mushroom = new MushroomGhost(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE),", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "        ConfigInterfaceCommandProcessor(\n            self.switch_configuration,\n            self.logger,\n            PipingProcessor(self.logger))\n        ConfigVlanCommandProcessor(\n            self.switch_configuration,\n            self.logger,\n            PipingProcessor(self.logger))\n        ConfigVRFCommandProcessor(\n            self.switch_configuration,\n            self.logger,\n            Piping", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": "  assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n  assert isinstance(config, NormalRateConfig)\n\n\ndef test_selectOutputConfig2():\n  '''\n  Output configuration selection test", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n        return RespostaEnviarDadosVenda.analisar(retorno)\n        return RespostaCancelarUltimaVenda.analisar(retorno)\n        return RespostaSAT.consultar_ultima_sessao_fiscal(ret", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "    # TODO: better reference state handling\n    # TODO: model exclusions handling\n    # TODO: better reference state handling\n    mod_srf = Model(dbf, comps, phase_name, parameters={'GHSER'+c.upper(): 0 for c in comps})\n    mod_srf.models = {'", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "    api.add_resource(ForcesResource, \"/fdm/forces\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(InitialConditionResource, \"/fdm/initial_conditions\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(PositionResource, \"/fd", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "    return {k: v / sum(word_counts.values()) for k, v in word_counts.items()}\n\n    @property\n    def corpus_word_set(self) -> List[str]:\n        \"\"\"Set of words used in the corpus\"\"\"\n        return sorted(self.word_counts)\n\n    @property\n    def corpus_word_set(self", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "    private static final String EXTRA_TEXT_BLOCK = \"ExtraTextBlock\";\n    private static final String EXTRA_TEXT_BLOCK_ID = \"ExtraTextBlockId\";\n    private static final String EXTRA_TEXT_BLOCK_TEXT = \"ExtraTextBlockText\";\n    private static final String EXTRA_TEXT_BLOCK_TEXT_COLOR = \"ExtraTextBlockTextColor\";\n   ", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final StringUtil str", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "        return mongoManager.getServers();\n    }\n\n    private Tree createTree() {\n        Tree tree = new Tree();\n        tree.setCellRenderer(new TreeCellRenderer());\n        tree.setCellSelectionEnabled(true);\n        tree.setCellSelectionEnabled(true);\n        tree.setCellSelectionEnabled(true);\n        tree.setCellSelectionEnabled(true", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\tFluent header = container.h1(\"TodoMVC\");\n\t\theader.classs(\"learn-header\");\n\t\theader.input(\"INPUT\", \"Add a new task\", \"add\", (a, e) -> {\n\t\t\tcontroller.add();\n\t\t});\n\n\t\t// Footer with Li and InputNext line of code:\n", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "                if (output != null) {\n                    Intent intent = new Intent();\n                    intent.putExtra(\"image\", output);\n                    setResult(RESULT_OK, intent);\n                    finish();\n                }\n            }\n        });\n\n        /**\n         * Initialize the camera preview.\n         */\n        surfaceHolder.addCallback(surfaceCallback);\n        surfaceHolder.setType(S", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "    @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        if (savedInstanceState != null) {\n            mShowToolbar = savedInstanceState.getBoolean(STATE_SHOW_TOOLBAR);\n            mShowFastScroller = savedInstanceState.getBoolean(STATE_SHOW_FASTSCROLLER);\n        }\n        if (mActivity", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "    assert key.operation == \"eq\"\n    assert key.values == (\"value\",)\n\n\n@pytest.mark.parametrize(\"model, index\", all_permutations)\ndef test_single_range_key_success(model, index):\n    \"\"\"Single key condition: equality comparison on range key\"\"\"\n    query_on = index or model.Meta\n    key = query", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "            GCActivitySet gcActivitySet,GCActivity gcActivity) {\n        assert gcActivitySet != null;\n        assert gcActivity != null;\n\n        dataset.add(gcActivity);\n        dataset.datasetChanged();\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace, int id, String gcActivityName", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "        '/properties':                    RestAppPropertys,\n        }\n        \n        # Add the resources\n        for r in self.resources.values():\n            self.api.add_resource(r, self.resources[r.__name__])\n        \n        # Add the login endpoint\n        self.api.add_resource(RestLogin, '/login')\n        self", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "        self._df_manager.signalNewModelRead.connect(self.append_source_filename)\n        self._df_manager.signalNewModelRead.connect(self.append_source_filename)\n        self._df_manager.signalNewModelRead.connect(self.append_source_filename)\n        self._df_manager.signalNewModelRead.connect(self.append_source_filename)\n        self._df", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "        MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE\n    ),\n    group.add_argument(\n        \"--reordering\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"round trip packet reordering rate [%%]. the valid range is from {:d} to {:d}.\n        packet re", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "    private final static TexturedModal MODAL2 = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n    private final static TexturedModal MODAL3 = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14,", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "    }\n\n    /**\n     * Listener interface for listening to event move items\n     */\n    public interface ItemMoveListener {\n        /**\n         * Triggered when an item was moved\n         *\n         * @param item\n         *            The item that was moved\n         */\n        void itemMoved(CalendarItem item);\n   ", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "        self._db_type = db_type\n        return self\n\n    def get_db_name(self):\n        return self._db_name\n\n    def get_db_type(self):\n        return self._db_type\n\n    def get_cluster_map(self):\n        return self._cluster_map\n\n    def get_session_token(self):\n        return", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "            client.getBaseClient().scheduleTimeout(1000, TimeUnit.MILLISECONDS);\n            client.getBaseClient().scheduleTimeout(1000, TimeUnit.MILLISECONDS);\n            client.getBaseClient().scheduleTimeout(1000, TimeUnit.MILLISECONDS);\n            client.getBaseClient().scheduleTimeout(1000", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List<ContentItem> contentItemList = new ArrayList<ContentItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<Commit", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tGenerator[] generators = setGenerators(pipeline.getGeneration());\n\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\tLOGGER.info(\"Pipeline created\");\n\t\treturn new GenerationService(preprocessors, generators, postprocessors);\n\t}\n\n\tprivate Preprocessor[] setPreProcessors(Pipeline", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "    // https://cloud.google.com/resource-manager/docs/creating-managing-projects#list_projects\n    PCollection<GCPProject> projects =\n        pipeline.apply(\"Read projects\", Read.from(new LiveProjectSource(org)));\n\n    // Filter out projects that have matching live states.\n    PCollection<KV<GCPResource,", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "    name = Column(String)\n    email = Column(String)\n    joined = Column(String)\n    by_email = GlobalSecondaryIndex(hash_key=\"email\", projection=\"all\")\n    by_joined = LocalSecondaryIndex(range_key=\"joined\", projection=[\"email\"])\n    by_joined = LocalSecondaryIndex(range_key=\"joined\",", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,\n                                                       dim, vocab, lookup,\n                                                       cache=self._cache)\n            else:\n                raise ValueError(\"def_reader must be 'LSTM' or 'mean'\")\n        else:\n            self._def_reader = None\n\n        self", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "    private final Object _txLockObject = new Object();\n    // Guarded by _lockObject.\n    private boolean _isConnected;\n    // Guarded by _lockObject.\n    private boolean _isConnectedToAudiologist;\n    // Guarded by _lockObject.\n    private boolean _isConnectedTo", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "    private ProgressDialog mProgressDialog;\n    private ArrayList<CustomGallery> arrayListAlbums = new ArrayList<>();\n    private int pickCount;\n    private int videoQuality;\n    private int videoQualityIndex;\n    private int videoQualityIndex2;\n    private int videoQualityIndex3;\n    private int videoQualityIndex4;\n   ", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "    RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOutDownLeft(RotateOutDownLeft.class),\n    RotateOutDownRight(RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "        return self.render_to_response(self.get_context_data(form=form))\n        return self.render_to_response(self.get_context_data(form=form))\n        return self.render_to_response(self.get_context_data(form=form))\n        return self.render_to_response(self.get_context_data(form=form))\n        return self.render_to_response(self.get_context_data(form=form", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "    public static Fog convert(FogDescriptor descriptor, GameObject go, Map<String, Asset> assets) {\n        Fog fog = new Fog();\n        fog.density = descriptor.getDensity();\n        fog.gradient = descriptor.getGradient();\n        fog.color = new Color(descriptor.getColor().getRed(), descriptor.getColor().getGreen(), descriptor", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\t\t// TODO: Check if the file is locked\n\t\t// TODO: Check if the file is in the right format\n\t\t// TODO: Check if the file is in the right format\n\t\t// TODO: Check if the file is in the right format\n\t\t// TODO: Check if", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "    ActorDetailsComponent plus(ActorDetailsModule actorDetailsModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n}\napp/src/main/java/com/rashwan/reactive_popular_movies/feature/discoverMovies/di/BrowseMoviesModule", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t// TODO add progress view\n\t\t} catch (final PerfidixMethodCheckException e) {\n\t\t\tthrow new SocketViewException(e);\n\t\t}\n\t}\n\n\t/**\n\t * Running the benchmark\n\t *\n\t * @throws SocketViewException\n\t *             if socket communication fails\n\t */\n", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "    graph_manager = GraphManager()\n    reports_manager = ReportsManager()\n    geo_location_manager = GeoLocationManager()\n    graph_manager = GraphManager()\n    reports_manager = ReportsManager()\n    geo_location_manager = GeoLocationManager()\n    graph_manager = GraphManager()\n    reports_manager = ReportsManager()\n    geo_location_manager", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\t// TODO: This is a hack to avoid the error \"java.lang.IllegalStateException: No cache found for the given operation\" when the cache is not set.\n\t\t\tif (serviceDiscoveryInfo == null) {\n\t\t\t\tserviceDiscoveryInfo = dataParser\n\t\t\t\t\t\t.parseServiceDiscovery(networkManager.doGet(new URL", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "        if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                form.save()\n                messages.success(request, 'La planilla de relevamiento fue creada con éxito.')\n                return render(request, 'relevamiento/mensaje.html", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "    self._cstr = self._ast.to_smt()\n    self._cstr = self._ast.to_smt()\n    self._cstr = self._ast.to_smt()\n    self._cstr = self._ast.to_smt()\n    self._cstr = self._ast.to_smt", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);\n  private ActionSupportHandler<StartRecordingAction> startRecordingActionSupportHandler = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction.class);\n  private ActionSupportHandler<Message", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {\n\t\tRound r = Minigame.getMinigameInstance(plugin).getRound(round.toLowerCase());\n\t\tif (r == null) {\n\t\t\treturn JoinResult.ROUND_FULL;\n\t\t}\n\t\tif (r.isFull()) {\n\t\t\treturn JoinResult", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [1])\n    assert_array_equal(fold([MIN_HASH_VALUE], MIN_HASH_VALUE / 2),\n", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "    elif fmt_token in FORMAT_INTEGER_TOKENS:\n        if fmt_token == 'a':\n            result = int_to_alphabetic(value, lang)\n        elif fmt_token == 'A':\n            result = int_to_alphabetic(value, lang).upper()\n        elif fmt_token == 'i':\n            result = int", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\tif model_item is None:\n\t\t\treturn default_flags\n\t\telif model_item == self._root_item:\n\t\t\treturn default_flags\n\t\telse:\n\t\t\tparent_item = model_item.parent()\n\t\t\tif parent_item is not None:\n\t\t\t\telder_item = parent_item.parent()\n\t\t\t\tif elder_item is not None:\n\t\t\t\t", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "        object1.items = [object2, object3]\n        object2.items = [object3]\n        object3.items = [object1]\n\n        response = Hydrator(version1, versions, []).hydrate_object(object_dto, object1)\n        response = Hydrator(version2, versions, []).hydrate", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "        //TODO: C,  for multi test we really need to have it writing to multiple ring buffers.\n        //byte[] catBytes = buildRawCatalogData(clientConfig, templateSource);\n        //byte[] catBytes = buildRawCatalogData(clientConfig, templateSource);\n        //byte[] catBytes = build", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1, 1, 1))\n  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1, 1, 1))\n  to", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "        containsString(\"hits.total.value = 100\"));\n    }\n\n    @Test\n    public void storeWithId() throws Exception {\n        Collection<SourceRecord> records = SourceRecordHelper.loadGetRecordsResponse(Resources.asByteSource(Resources.getResource(\"responses/dab-records-csw.xml\")).openStream());\n       ", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "        (True, PubKeyAlgorithm.ECDH): ECDHPub,\n        (True, PubKeyAlgorithm.ECDH): ECDHPub,\n        (True, PubKeyAlgorithm.ECDH): ECDHPub,\n        (True, PubKeyAlgorithm.ECDH): ECDHPub,\n", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\t\tJPEParserManager.getInstance().registerJPEParser(new KMLParser());\n\n\t\t// Instancia el writer de GeoJSON\n\t\tGeoJSONWriter writer = new GeoJSONWriter();\n\t\twriter.setFormat(JPEParserFormat", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                        res = getResults(\n                            context.get(Global.InvokeKeys.SEARCH_FILTER, String.class),\n                            context.get(Global.InvokeKeys.SEARCH_CONTEXT, ExtMap.class)\n                        );\n                    } catch (SQLException e) {\n                        addContextMessage(context, true, e.getMessage());\n                        context.<List<Throwable>>get(ContextKeys", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "    url(r'^users/$', users_list, name='users-list'),\n    url(r'^users/new/$', new_user, name='new-user'),\n    url(r'^users/edit/(?P<pk>[-\\w]+)/$', edit_user, name='edit-user'),\n    url(r'^users/delete/(?P<pk>", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "            if (stack.getNumberOfCards() > 100) {\n                cardList.setFastScrollEnabled(true);\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n                    cardList.setFastScrollAlwaysVisible(true);\n                }\n            } else {\n                cardList.setFastScrollEnabled", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "    private DropMenuAdapter dropMenuAdapter;\n    private DropDownMenu dropDownMenu;\n    private Handler handler;\n    private int page=1;\n    private int totalPage;\n    private int count=0;\n    private int position=0;\n    private String positionTitle;\n    private String titleUrl;\n    private", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "        #obj.blockLabel = NameLabel(obj, obj.getBlock().getInitLabel(), \"\", \"\", BlockLabel.Type.NAME_LABEL, True, obj.blockID)\n        #obj.blockLabel.setParent(obj)\n        #obj.blockLabel.setZoomLevel(obj.zoom)\n        #obj.blockLabel.setBlockID(obj.blockID)\n        #", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "        f = XDA([d1, d2])\n        beta = XorDiff(d3)\n        i, j = self._find_preimage(f, beta)\n        assert i == j\n        assert f.eval(i, j) == beta\n\n        f = XDA([d1, d2])\n", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, Node newFirst, Node newSecond);\n\t\tpublic abstract Node transformContext(Context context);\n\t}\n\t\n\tprivate static class FlattenTransformer implements NodeTransformer {\n\t\tpublic Node transformConstant(ConstantNode node) {\n\t\t\treturn node;\n\t\t}\n\t\tpublic Node", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Register the listeners\n\t\tgetServer().getPluginManager().registerEvents(playerListener, this);\n\t\tgetServer().getPluginManager().registerEvents(blockListener, this);\n\t\t\n\t\t// Register the commands\n\t\tfor (BaseCommand command : commands) {\n", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "        String data = doc.getText();\n        if (data != null && data.trim().length() > 0) {\n            connection.sendPacket(new Challenge(data));\n        }\n    }\n\n    private void parseSuccess(Element doc) throws IOException {\n        String data = doc.getText();\n        if (data != null && data.trim().", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "    # Feal32 = feal.get_Feal_instance(feal.FealInstance.feal_32_64)\n    # Cham32 = cham.get_Cham_instance(cham.ChamInstance.cham_32_64)\n    # Shacal132 = sh", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "    private Toolbar mToolbar;\n    private FastScroller mFastScroller;\n    private PlaylistPicker mPlaylistPicker;\n    private SongListAdapter mAdapter;\n    private Playlist mPlaylist;\n    private OnPlaylistPickedListener mListener;\n    private boolean mShowToolbar = true;\n    private boolean mShowFastScroller = true", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "        FlowAbsEffect flowAbsEffect = (FlowAbsEffect) effect;\n        flowAbsEffect.setPipelineResolution(PipelineResolution.SOURCE);\n        mSpectaculumView.setPipelineResolution(PipelineResolution.SOURCE);\n        }\n        if(effect instanceof ImmersiveEffect) {\n            if (mImmersiveSensorNavigation", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "    Bit('ESMCause', Pt=0, BitLen=4, Dict=ESMCause_dict, Repr='hum'),\n    Bit('ESM', Pt=0, BitLen=1, Repr='hex'),\n    Bit('ESMType', Pt=0, BitLen=1,", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "            if (mSongListAdapter != null) {\n                mSongListAdapter.notifyDataSetChanged();\n            }\n        }\n    };\n    private OnItemClickListener mOnItemClickListener = new OnItemClickListener() {\n        @Override\n        public void onItemClick(int position, View view) {\n            if (mSongListAdapter != null) {\n                mSongListAdapter", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "```\nself.log_debug(f\"    Found {len(exts.lab_files)} .lab files\")\nself.log_debug(f\"    Found {len(exts.textgrid_files)} .TextGrid files\")\n```\n```\n\nPlease determine whether the given text is related to computer science, if yes please return \"YES\", else", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t\t@Override\n\t\tpublic boolean addRemittUser(UserDTO user) {\n\t\t\treturn UserManagement.addUser(user.getUsername(), user.getPassword(),\n\t\t\t\t\tuser.getCallbackServiceUri(), user.getCallbackServiceWsdlUri(),\n\t\t\t\t\tuser.getCallbackUsername(), user.getCallbackPassword());\n\t\t}\n\n\t@POST\n\t@Path(\"", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "    @GET(\"api-info\")\n    Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns information about the Shodan account linked to the api key.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"account/profile\")\n    Observable<Account", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "    @Override public void visit(LogMessage message) {\n      if (message instanceof VmOptionLogMessage) {\n        vmOptionsBuilder.put(((VmOptionLogMessage) message).optionName(), ((VmOptionLogMessage) message).value());\n      } else if (message instanceof VmPropertiesLogMessage) {\n       ", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "    def test_glasberg_moore_83_example(self, freq, bandwidth):\n      \"\"\"\n      Test the Glasberg and Moore 1983 example.\n\n      Parameters\n      ----------\n      freq :\n        Frequency in hertz.\n      bandwidth :\n        Bandwidth in hertz.\n\n      Returns\n      -------\n     ", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "    fp.seek(fp_tell() - 4)\n    fp_tell = fp.tell\n    fpStart = fp_tell()\n    fp.seek(fp_tell() - 4)\n    fp_tell = fp.tell\n    fpStart = fp_tell()\n    fp.seek(fp_tell() - 4", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "    try {\n      final T expressionContext = proxyBuilder.build();\n      CoordinatesWalker walker = new BaseCoordinatesWalker(document) {\n        @Override\n        protected void onParagraph(ParagraphCoordinates paragraphCoordinates) {\n          runProcessorsForParagraph(paragraphCoordinates.getParagraph(), expressionContext, document);\n        }\n      };\n      walker", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "    @Override\n    protected void onScrollStateChanged(AbsListView view, int scrollState) {\n        super.onScrollStateChanged(view, scrollState);\n        if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE) {\n            if (paginator != null && paginator.page < paginator.pageCount) {\n                loadData", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "    @flags.register(NotationDataFlags)\n    def flags_int(self, val):\n        self._flags += NotationDataFlags & val\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self.flags = self.bytes_to_int(val)\n\n    @sdproperty\n    def data", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "        self.textArea.append(convertTags(lexmsg))\n        self.textArea.append(convertTags(lexmsgs))\n        self.textArea.append(convertTags(lexmsgs))\n        self.textArea.append(convertTags(lexmsgs))\n        self.textArea.append(convertTags(lexmsgs))\n        self.textArea.append(convertTags(lex", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "def check_arg(arg, type_, env):\n    arg = check(arg, env)\n    with env.errors.location(arg.location):\n        unify(arg.__type__, type_)\n    return arg\nkinko/types.py\nclass TypeRef(with_metaclass(TypeRefMeta, object)):\n    pass\nkinko/types.py\n", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "    if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date10, DateTime10)):\n            return GregorianMonthDay(value.month, value.day, value", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "    feature_transforms = feature_transforms if features is not None else {}\n    feature_transforms = {k: v for k, v in feature_transforms.items() if k in features}\n    feature_list = []\n    for feature_name, feature in features.items():\n        feature_list.append(feature)\n    feature_matrix =", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "        if (adMedia != null) {\n            adMedia.setVpaid(true);\n            adMedia.setVpaidClient(new VpaidClient() {\n                @Override\n                public void init(MediaModel adMediaModel) {\n                    fsmPlayer.setVpaidClient(new VpaidClient() {\n                        @Override\n                        public", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "        PressureSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 7 || type == 0) {\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 8 || type == 0) {\n            ProximitySensorCollector.flushDBCache(deviceID);\n        }\n", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "    Call<Void> getSuggest(@Url String imageUrl);\n    @FormUrlEncoded\n    @POST(\"suggest\")Next line of code:\n    Call<Void> getSuggest(@Url String imageUrl);\n    @FormUrlEncoded\n    @POST(\"suggest\")Next line of code:\n    Call<Void> getSuggest(@Url", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "        return Stream(\n            model=model, engine=self)\n        # noinspection PyUnresolvedReferences\n        # TODO | this is a hack to get around the fact that Stream is a class\n        # TODO | and not a function.  We need to find a better way to do this.\n        # TODO |", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "        self.plot_confusion_matrix(confusion_matrix, classes=data_set.label_map.keys())\n        self.plot_confusion_matrix(confusion_matrix, classes=data_set.label_map.keys(), normalize=True)\n        self.plot_confusion_matrix(confusion_matrix, classes=data_set.label_map.keys(), normalize=True, title=\"Normalized confusion matrix\")\n       ", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate BannedIpServices bannedIpServices;\n\t@Resource\n\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate Users user;\n\t@Resource\n\tprivate CommonUtils commonUtils;\n", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "    def query(self, first_entity, *entities):\n        return Query(self, (first_entity,) + entities)\npyorient/ogm/commands.py\nclass BatchVariable(object):\n    def __init__(self, name, command):\n        self.name = name\n        self.command = command\n\n    def __str", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "    @scoped_subgraph\n    def decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the decoder input sequences as input, and is initialized with zero initial states.\n\n        Returns\n        -------\n        FeedPreviousRNN\n            The decoder RNN\n", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "for platform in Platform.objects.all():\n    all_platform_slugs.append(platform.platform_slug)\nall_platform_slugs = tuple(all_platform_slugs)\n\nall_transifex_slugs = []\nfor transifex in Transifex.objects.all():\n    all_transifex_slugs.append(transifex.transifex_slug)\nall", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "    public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorGroupNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "public static FormFor formFor(Object resource, Object... fields) {\n\treturn new FormFor(resource);\n}\npublic static A link(Url destination) {\n\treturn a(href(destination));\n}\npublic static Link css(String cssFile) {\n\treturn link(rel(\"stylesheet\"), type(\"text/css\"), href(cssFile));\n}\npublic static Script", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "        final NiceTable table = new NiceTable(numberOfColumns);\n        table.addHeader(\"Method\", '=', Alignment.Left);\n        table.addHeader(\"Unit\", '=', Alignment.Left);\n        table.addHeader(\"Mean\", '=', Alignment.Left);\n        table.addHeader(\"StdDev\", '=', Alignment.Left);\n        table.addHeader(\"Min", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "      visitor.visit(node)\n      return visitor.edges\n\n    def get_parent_loop(node):\n      class BwdEdges(EdgeVisitor):\n        def __init__(self):\n          EdgeVisitor.__init__(self)\n          self.edges = []\n\n        def visit(self, edge):\n          self.edges.append(edge)\n\n      visitor = Bwd", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\t\tthis.tree = new PrecomputedTree(this.treeFile);\n\t\t\t\tbreak;\n\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.treeFile);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.err.println(\"Unknown tree type\");\n\t\t\t\tSystem.exit(-1);\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "    from .xpath30.xpath30_helpers import parse_datetime_marker, parse_datetime_picture, \\\n        int_to_roman, int_to_alphabetic, format_digits, int_to_words, parse_datetime_picture, \\\n        parse_datetime_marker, ordinal_suffix, decimal_to_string, int_to_roman, int_to", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                }\n            });\n        }\n\n        @Override\n        public void onLiveEventsChunkProcessed() {\n            if (null != mConsoleMessageListFragment) {\n                mConsoleMessageListFragment.update();\n            }\n        }\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n       ", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tprivate DDIModelPreprocessor ddiModel = new DDIModelPreprocessor();\n\t\n\tprivate DDITitlePreprocessor ddiTitle = new DDITitlePreprocessor();\n\t\n\tprivate DDITitlePreprocessor ddiTitle2 = new DDITitlePreprocessor();\n\t\n\tprivate DDITitlePreprocessor ddiTitle", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n        self.UpdateContents()\n\n    def OnGenerationEtatsPresences(self, _):\n        site = self.GetSelectedSite()\n        date = str2date(self.presences_date.GetValue())\n        DocumentDialog(self, Et", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "        H += dot(crossmat(c - p), m * J_rot) + dot(I, J_rot)\n        H += dot(crossmat(c - p), m * crosstens(J_trans)) + dot(I, crosstens(J_trans))\n        return H\n\n    def compute_angular_m", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "        if (queuedProjectResult != null) {\n            JsonObject jsonObject = queuedProjectResult.getJsonObject();\n            JsonObject pattern = jsonObject.getJsonObject(\"pattern\");\n            JsonObject notes = jsonObject.getJsonObject(\"notes\");\n            JsonObject notesHtml = notes.getJsonObject(\"notes_html\");\n            JsonObject notesHtmlJson = notesHtml.getJsonObject(\"notes", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "        });\n    }\n\n    private void initializeFiles() {\n        // Load the currencies\n        List<Currency> currencies = new ArrayList<>();\n        CommentedConfigurationNode con = configManager.getNode();\n        con.getNode(\"currencies\").getChildrenMap().keySet().forEach(raw -> {\n            if (raw instanceof String) {\n", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "    return build_prior_specs(prior, params)\n        else:\n            raise ValueError(\"Unknown prior spec {}. Should be either a PriorSpec instance or a dict\".format(prior))\n    return prior\n\n    def _fit(self, symbols, datasets, *args, **kwargs):\n        \"\"\"\n        Optimize a set of", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "    return Const.fromValue(arg, is_symbol=False)\n  elif op in STORE_OPCODES:\n    if op == STORE_NAME:\n      return Ref.fromName(arg)\n    elif op == STORE_ATTR:\n      return Ref.fromName(arg)\n    elif op == STORE_GLOBAL:\n      return Ref.fromName(arg)\n    elif op", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final Physics physics;\n\tprivate final FringeLayer fringeLayer;\n\tprivate final EntityParser parser;\n\tprivate final EntityControllerFactory factory;\n\tprivate final EntityControllerFactory factory2;\n\tprivate final EntityControllerFactory factory3;\n\tprivate final EntityControllerFactory factory4;\n\tprivate final EntityControllerFactory factory5;\n\tprivate final EntityControllerFactory factory", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMPERATURE:\n                    TempSensorView tview = new TempSensorView();\n                    o = tview.getView();\n                    ((TempSensorPresenter) tview.get", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic AuthorWithBooks authorWithBooks(Long id) {\n\t\tAuthor author = authorRepository.findById(id);\n\t\tList<Book> books = bookRepository.findAllByAuthorId(id);\n\t\treturn new AuthorWithBooks(author, books);\n\t}\n\n\t@Transactional(readOnly = true)\n\tpublic AuthorWithBooks authorWithBooks(String name)", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "public SQLBatch(Class<T> rootClass) {\n\tsuper();\n\tthis.schema = new Schema(rootClass);\n}\nsrc/batch/sql/syntax/Factory.java\npublic interface Factory {\n\n\tpublic <E> E create(SQLQuery rootQuery, ISchema schema);\n\n\tpublic <E> E create(SQLQuery rootQuery, ISchema schema", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "        # install_and_run(DYNAMIC_TOOL_DIR, file_path, app_info['packagename'], app_info['launcher'], True)\n        install_and_run(DYNAMIC_TOOL_DIR, file_path, app_info['packagename'], app_info['launcher'], False)\n        \n        # web_proxy(DYNAMIC_TOOL_DIR, app", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "    /**\n     * Parse the specified input stream and return genotypes.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into genotypes\n     */\n    Genotype parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "                Symbol.typed(bar_type, 'bar'),\n                Keyword('baz'),\n                Number.typed(IntType, 1),\n            ])\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_list():\n    inc_type = Func[[IntType], IntType]\n    check_expr_type", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "        PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, queries(0, is(\"...\")));   // string matcher\n        assertThat(pe, queries(hasItems(\"...\", \"...\")));  // collection matcher\n        assertThat(pe, queryTypes(0,", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\t\tself._ribbon_widget.setCurrentIndex(1)\n\t\tself._ribbon_widget.setCurrentIndex(2)\n\t\tself._ribbon_widget.setCurrentIndex(3)\n\t\tself._ribbon_widget.setCurrentIndex(4)\n\t\tself._ribbon_widget.setCurrentIndex(5)\n\t\tself._ribbon_widget.setCurrentIndex(6)\n\t\tself._ribbon", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                            return new NotFoundException(cause);\n                        case 409:\n                            return new ApiException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                }\n                return null;\n            }\n        };\n        // Set up the RestAdapter\n        mAdapter = new RestAdapter.Builder()\n                .setEndpoint(BASE", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t\tregisterRenderer(String.class, new DefaultStringRenderer());\r\n\t\tregisterRenderer(Token.class, new DefaultTokenRenderer());\r\n\t\tregisterRenderer(IfToken.class, new DefaultIfTokenRenderer());\r\n\t\tregisterRenderer(AnnotationProcessor.class, new DefaultAnnotationProcessor());\r\n\t\tregisterRenderer", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t}\n\t\treturn labelFactory;\n\t}\n\t\n\tprivate static final FacetSubQueryType getFacetSubQueryType(SearchConfig search, Element elt) {\n\t\tFacetSubQueryType subQueryType;\n\t\tif (elt.hasAttribute(AlvisIRConstants.XML_SEARCH_SUB_QUERY_TYPE)) {\n\t\t\tString s", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "    url(r'^new/(?P<slug>[\\w\\-\\+]+)$', NewReleaseBranchView.as_view(), name=\"release-branch-new\"),\n    url(r'^new/(?P<slug>[\\w\\-\\+]+)/(?P<stream_slug>[\\w\\-\\+]+)$', New", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        StateListAnimator stateListAnimator = AnimatorInflater\n                .loadStateListAnimator(mContext, R.animator.card_lift);\n        card.setStateListAnimator(stateListAnimator);\n    }\n}", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "    account = account_for_vimeo_id(access_token_data['vimeo_id'], person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            random_name = ''.join(choice(string.letters + string.digits) for i in range(20))\n", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "                # Compute the pointing direction and the vignetting and extinction loss for the mean location\n                x_mean = (x0 + xe)/2\n                y_mean = (y0 + ye)/2\n\n                # Use a test pixel sum\n                test_px_sum = 400\n\n                # Compute the", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "    grid = gen_grid(data, options)\n    # Compute likelihood across grid\n    likelihood = grid_likelihood(data, options, grid)\n    # Compute integral of likelihood\n    integral = calc_integral(likelihood, options, metrics)\n    # Compute posterior\n    posterior = apply_priors(data, options, likelihood, grid", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "            UIDialog.getDicesDialog(false);\n          }\n        else {\n          UIDialog.getYesNoDialog(Events.HUMAN_DOUBLE_RESPONSE, \"Accept double?\");\n        }\n      }\n    });\n    rollBtn.addListener(new ClickListener() {\n      @Override\n      public void clicked(InputEvent event, float x, float y)", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "        self.assertEqual(list(etree_iter_paths(root, '/')), [(root, '/'), (root[0], '/b1'), (root[0][0], '/b1/c1'), (root[0][0][0], '/b1/c2'), (root[0][1], '/b2", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "        self.runner.add(self.rule, with_child=True)\n        self.runner.add(StopRequest(), with_child=True)\n\n    @async_test()\n    async def test_detect_soft_404(self):\n        r = await self.runner.run(Entry.create(\"http://example.om/test\", response=StaticResponse(40", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "    cfe = CFeCancelamento(\n            destinatario=Destinatario(\n                    CPF='11122233396',\n                    xNome=u'João de Teste'),\n            chCanc=_opcao('--ch-canc'),\n            CNPJ=_opcao('--", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "    /**\n     * Parse the specified input stream and return a user name.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a user name\n     */\n    UserName parseUserName(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "            // 4.1. Get the response\n            EtsiResponse resp = this.client.sendRequest(req);\n            \n            // 4.2. Get the signature\n            byte[] signature = resp.getSignatureValue();\n            \n            // 4.3. Get the certificate chain\n            X509", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calc\")\n\t\telif type(obj) is Proformer:\n\t\t\treturn get_icon(\"proformer\")\n\t\telif type(obj) is ProformerType:\n\t\t\treturn get_icon(\"proformer\")\n\t\telif type(obj) is ProformerType:\n\t\t\treturn", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "        RotationVectorSensorCollector.flushDBCache(deviceID);\n    }\n    if(type == 12 || type == 0) {\n        RelativeHumiditySensorCollector.flushDBCache(deviceID);\n    }\n    if(type == 13 || type == 0) {\n        AmbientTemperatureSensorCollector.flushDBCache(device", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<Game> schedule;\n\tprivate List<PlayerOverview> players;\n\tprivate List<TeamLeaders> leaders;\n\tprivate List<TeamRosterResponse> rosters;\n\tprivate List<TeamScheduleResponse> schedules;\n\tprivate List<TeamSummaryResponse> summaries;\n\tprivate List<TeamLeadersResponse> leadersSummaries;\n\t\n\tpublic Team", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "        FeedbackUseCase feedbackUseCase = FeedbackUseCase.Companion.getInstance();\n        Feedback feedback = new Feedback(userFeedback.getMessage(), userFeedback.getScreenCapture());\n        feedbackUseCase.sendFeedback(feedback, new Function0<Unit>() {\n            @Override\n            public Unit invoke() {\n                onSuccess();\n                return null;\n            }\n", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "        if table_name not in table_index:\n            table_index[table_name] = self.session.describe_table(table_name)\n        if table_name not in object_index:\n            object_index[table_name] = self.session.load_items([obj])\n\n        for obj in objs:\n            key = dump_key(self, obj)\n            if key", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "        print('Fingerprint: {0}'.format(format_fingerprint(fingerprint)))\n        print('Description: {0}'.format(description))\n        print('Created at: {0}'.format(created_at))\n        print('')\n\n    async def list_vaults(self):\n        logger.debug('Retrieving vault list...')\n        backend", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, ComponentAdmin)\nadmin.site.register(Progress, ProgressAdmin)\nadmin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Progress, ProgressAdmin)\nadmin", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "        return RespostaSAT.extrair_logs(retorno)\n    def bloquear_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.bloquear_sat`.\n\n        :return: Uma resposta SAT padrão.\n        :rtype: satcfe.resposta.padra", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "    self.assertEqual(node_document_uri(ElementTree.XML('<A xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xml:base=\"/\" />')), '/')\n    document = ElementTree.parse(io.StringIO(xml_test))\n    self.assertEqual(node_document_uri(document), '/')\n    self.assertIsNone(node_document", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                    Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case START_DATE_DESC:Next line of code:\n                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case DURATION_ASC:Next line of code:\n                    Arrays.sort(sorted, new ItemDurationComparator(true));\n                    break;\n", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "```\n        self.logger.error(f\"Error initializing training: {e}\")\n        self.training_complete = True\n        return\n```\nWhat should I do next?\nThe next line of code you want to execute is:\n\n```python\nself.logger.error(f\"Error initializing training: {e}\")\nself.training_complete = True", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "    private final OAuth2Requester requester;\n    \n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        Checks.check(clientId >= 0, \"Client ID is invalid!\");\n        Checks.notEmpty(clientSecret, \"Client Secret\");\n", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "    private final Errands errands;\n    private final Jobs jobs;\n    private final Tasks tasks;\n    private final Vms vms;\n    \n    public SpringDirectorClient(RestOperations restOperations, URI root) {\n        this(restOperations, root, null);\n    }\n    \n    public SpringDirectorClient(RestOperations", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "    public void sendChatMessage(ChatMessage message)\n    {\n        Log.d(TAG, \"sendChatMessage: pre lock\");\n        synchronized (_lockObject) { // ok to take _lockObject: _lockObject is not taken by caller of sendChatMessage.\n            synchronized (_lockObject) {\n                Log.d(TAG", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "        return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBlameCommand()\n    {\n        return new SvnJavaBlameCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "    @Override\n    public void drawComponent(int mouseX, int mouseY) {\n        GlStateManager.pushMatrix();\n        GlStateManager.translate(0, 0, 0);\n        GlStateManager.scale(0.5F, 0.5F, 0.5F);\n        GlStateManager.translate(0,", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "          DATA[looptest], EPSILON, FiniteDifferenceSchemes.FORWARD);\n        double[] d3Put = FiniteDifferenceFirstOrder.differentiate(callPut[looppc] ? new blackPut() : new blackCall(), Next line of code:\n          DATA[looptest], EPSILON, Finite", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "            VotingModule.class\n    };\n\n\n    /**\n     * List of module instances to create\n     */\n    private static HashMap<String, Module> modules = new HashMap<String, Module>();\n\n\n    /**\n     * List of module listeners to register\n     */\n    private static HashMap<String, Listener> listeners = new HashMap<String,", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize handle the number of concurrent.\n     * @return {@link DownloadQueue}.\n     * @see #newDownloadQueue()\n    ", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": "  @Override\n  public void init(MutableConfig config) {\n    // TODO Auto-generated method stub\n  }\n\n  @Override\n  public void configure(MutableConfig config) {\n    // TODO Auto-generated method stub\n  }\n\n  @Override\n  public void watch(Config config, WatcherRegistry registry)", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        QuerySetConfig querySetConfig = new QuerySetConfig();\n        NodeList nodeList = element.getElementsByTagName(QUERY_SET_CONFIG_TAG);\n        if (nodeList != null && nodeList.getLength() > 0) {\n            for (int index = 0;", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "        for x in L:\n            try :\n                ret = self.CheckIt(S, x)\n            except Exception :\n                print('In check Exception: ')\n                print('S: ',S)\n                print('x: ',x)\n                traceback.print_exc()\n            #print('ret ---> ',ret)\n            if ret", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "        left_foot_task = ContactTask(\n            self.robot, self.robot.left_foot, self.swing_foot, weight=swing_weight)\n        self.robot.ik.add(left_foot_task)\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.robot, self.robot.right_foot", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "    @given(integers(min_value=MIN_SIZE, max_value=MAX_SIZE))\n    def test_simple_op(self, size):\n        \"\"\"Test the simple operations.\"\"\"\n        for op in simple_op:\n            x = bitvectify(integers(min_value=0, max_value=2 ** size - 1), size", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t{\n\t\t\tnew APP2Segment(aJPEG, aLog).encode(aOutput).log(aLog);\n\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\taLog.println(\"  ICC profile not found\");\n\t\t}\n\n\t\tnew DHTSegment(aJPEG).encode(aOutput).log(aLog);\n\n", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "            if (sl == null) {\n                JOptionPane.showMessageDialog(null, \"Keine Sammellastschrift ausgewählt.\");\n                return;\n            }\n\n            HibiscusExporter exporter = new HibiscusExporter(conf, session);\n            boolean allSuccessful = true;\n\n            switch (type) {\n            case SAMMEL", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "def generate_pronunciations(\n    log_path: str,\n    dictionaries: List[str],\n    text_int_paths: Dict[str, str],\n    word_boundary_paths: Dict[str, str],\n    ali_paths: Dict[str, str],\n    model_path: str,\n    pron_paths: Dict[str, str],\n)", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "        LoreLoader.getLore(key).commands = Commands.BLANK;\n        LoreLoader.getLore(key).autoplay = false;\n        LoreLoader.getLore(key).notify = false;\n        LoreLoader.getLore(key).hidden = false;\n        LoreLoader.getLore(key).sound = \"\";\n        LoreLoader", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "    private static final DateTimeFormatter USAGE_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM yyyy\");\n    private static final DateTimeFormatter TRANSACTION_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM yyyy\");\n    private static final DateTimeFormatter TRANSACTION_DATE_FORMATTER_WITHOUT_YEAR = DateTimeFormatter.ofPattern(\"dd MMM\");\n    private", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "public static Util getInstance() {\n\treturn instance;\n}\npublic static void main(String[] args) {\n\tUtil util = Util.getInstance();\n\tutil.print(\"Hello World!\");\n}\npublic void print(String s) {\n\tSystem.out.println(s);\n}\npublic void print(String s, Object... args) {\n\tSystem.out.println(s, args);\n", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n    FadeOutUp(FadingOutUp.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInYaxis(FlipInYaxis.class),\n    FlipOutXaxis(FlipOutXaxis", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "        problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if verbose_level >= 1:\n        smart_print(\"SMT problem:\")\n        smart_print(problem)\n\n    if check:\n        try:\n            problem.solve(initial_weight, solver_name, search_mode=search_mode, check=check,\n                          verbose_level=", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "        h5 =  LocalHost5\n        return { 'h1': [ h1() ], 'h2': [ h2() ], 'h3': [ h3() ], 'h4': [ h4() ], 'h5': [ h5() ] }\n\n    def test_init(self):\n", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "            return command.startswith(self.get_tc_command(TcSubCommand.QDISC))\n\n        return self.__tc_command_output.splitlines() if self.__tc_command_output else []\n\n    def get_tc_command_output(self):\n        return self.__tc_command_output\n\n    def get_tc_command_output_str(self):\n        return self.__tc", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "  assert isinstance(encoder, GLONASSL1BitEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1.NAME: False,\n                  NormalRateConfig.GPS.L2.NAME: False,\n                 ", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        Cursor cursor =  db.query(ExpenseManagerContract.ExpenseTable.TABLE_NAME, null,\n                ExpenseManagerContract.ExpenseTable.COLUMN_NAME_FOREIGN_KEY_C", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "    private SimpleDateFormat monthFormatter;\n    private SimpleDateFormat dayFormatter;\n    private SimpleDateFormat dayOfWeekFormatter;\n    private SimpleDateFormat dayOfMonthFormatter;\n    private SimpleDateFormat dayOfYearFormatter;\n    private SimpleDateFormat dayOfYearOfWeekFormatter;\n    private SimpleDateFormat dayOfWeekOfYearFormatter;\n    private SimpleDateFormat dayOfWeekOfMonthFormatter;\n    private SimpleDateFormat dayOfMonthOfWeekFormatter", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "  def test_inf_input(self):\n    my_stream = white_noise(inf)\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(30) == [0.0] * 30\n\n  @p(\"dur\", [-1, 0, .4, .5, 1", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "                isinstance(t1, RecordMeta) and\n                isinstance(t2, RecordMeta) and\n                t1.__items__ == t2.__items__\n            ):\n                t1.__instance__ = t2.__instance__\n            else:\n                raise TypeCheckError('Cannot unify {!r} with {!r}'.", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "    def __init__(self, account_id, region_id, client_id, username, password,\n    auth_url=LOGIN_ENDPOINT, auth_data=None, auth_token=None,\n    auth_host=None, auth_region_id=None, auth_client_id=None, auth_account_id=None,\n    auth_no_prompt=False, auth_backoff", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\tif isinstance(model_item.data, SketchView):\n\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\tif isinstance(model_item.data, PartView):\n\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\tif isinstance(model_item.data, Field):\n\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "  def AsyncProcessResponse(self, sink_stack, context, stream, msg):\n    pass\nscales/sink.py\nclass ClientMessageSink(ClientMessageSink):\n  \"\"\"ClientMessageSinks take a message, stream, and headers and perform\n  processing on them.\n  \"\"\"\n  __slots__ = '_on", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "        // https://github.com/olivergondza/dumpling/blob/master/src/main/java/com/github/olivergondza/dumpling/cli/SourceTest.java#L100\n        assertThat(out.toString(), startsWith(\"remotely-observed-thread\"));\n    }\n\n    @Test\n", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "        data.setOperation(DrumOperation.APPEND_UPDATE);\n        return data;\n    }\n\n    @Test\n    void testAppendUpdate2() throws Exception {\n        try (SimpleDataStore<PLDTestData> dataStore = new SimpleDataStoreImpl<>(this.testDir + \"/cache.db\", \"test\", PLD", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" 部\");\n            }\n        });\n    }\n}\nmedialoader/src", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "    return mock(RoxanaProperties.class);\n}\n    private ResponseProcessorManager getResponseProcessorManagerForTest() {\n        return new ResponseProcessorManager(this.getRoxanaProperties());\n    }\n\n    @Test\n    void processBusinessExceptionTest() throws Exception {\n        String parameterValue = \"test\";\n        MockedBusiness", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "    self._socket.write(self._ping_msg)\n    self._last_ping_start = time.time()\n\n  def _HandleTimeout(self, msg_properties):\n    \"\"\"Determine if a message has timed out yet (because it waited in the queue\n    for too long).  If it hasn't, initialize the timeout handler", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "  assert freq2lag(v) == v\n  assert lag2freq(v) == v\n  assert freq2lag(lag2freq(v)) == v\n  assert lag2freq(freq2lag(v)) == v\n  assert freq2lag(lag2freq(freq2lag(v))) == v\n", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "            Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy20Service.class,\n            Proxy21Service.class,\n            Proxy22Service.class,\n           ", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "    self._cache = dict()\n    by_guild = dict()\n    by_channel = dict()\n    by_config_name = dict()\n    by_guild_id = dict()\n    by_channel_id = dict()\n    by_config_name = dict()\n    by_guild_id = dict()\n    by_channel_id = dict()\n", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "    if isinstance(operands[0], UntypedAtomic) and isinstance(operands[1], UntypedAtomic):\n        return operands[0] == operands[1]\n    elif isinstance(operands[0], UntypedAtomic) and isinstance(operands[1], int):\n        return operands[0] == operands[", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "        welcomeString.setText(getString(R.string.app_name));\n        welcomeString.setGravity(Gravity.CENTER);\n        welcomeString.setTextSize(20);\n        welcomeString.setTextColor(getResources().getColor(R.color.white));\n        welcomeString.setTypeface(null, Typeface.BOLD);\n        welcomeString.setPadding(0, 0, 0, 0);\n", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "            // Create a new chat activity\n            if (classToNotify == InviteToChatFragment.class) {\n                InviteToChatFragment fragment = new InviteToChatFragment();\n                fragment.updateChatPartnersList(selectedUsers);\n                fragment.startChat(newChatId);\n            } else if (classToNotify == UserDetailsFragment", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "        request.setFeeType(\"CNY\");\n        request.setLimitPay(\"10000\");\n        request.setTradeType(\"NATIVE\");\n        request.setDeviceInfo(\"013467007045764\");\n        request.setBody(\"商品名称\");\n        request.setDetail", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "        List<Parameter> parameters = new ArrayList<>();\n        parameters.add(new Parameter(STRING, STRING_PARAMETER_NAME_01, RANDOM_STRING_PARAMETER_VALUE_01));\n        parameters.add(new Parameter(STRING, STRING_PARAMETER_NAME_02, RANDOM_STRING_PARAMETER_VALUE_02));\n        MessageMapperEnum messageMapperEnum =", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "    public int readCodeInteger() throws IOException {\n\t\tint d1 = in.read1();\n\t\tint tag = d1 & 0x07;\n\t\tif (tag == CODEINT4_TAG)\n\t\t\treturn readSmallIntValue(d1);\n\t\telse\n\t\t\tthrow new IOException(\"Not a code-int:", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "    def __init__(self, session, auth, **kwargs):\n        self.session = session\n        self.auth = auth\n        self._auth = auth\n        self._session = session\n        self._auth_plugin = auth_plugin\n        self._auth_system = auth_system\n        self._auth_url =", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "        parser_class_list.append(MacOsPingParser)\n        parser_class_list.append(AlpineLinuxPingParser)\n\n        for parser_class in parser_class_list:\n            try:\n                self.__parser = parser_class()\n                break\n            except Exception:\n                logger.debug(f\"failed to parse ping result with {parser_class", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "        if (e.getActionCommand().equals(MainController.SET_INPUT_WAV)) {\r\n            m.fcIn.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);\r\n            m.fcIn.setFileFilter(new InputFilter());\r\n            m.fcIn.setAcceptAllFileFilterUsed(true);\r\n            m.fcIn.showOpenDialog(null);\r\n            m", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "        self._probe = probe\n        # Load the spike detection parameters.\n        self._kwargs = kwargs\n        # Set the default parameters.\n        self._kwargs.setdefault('tempdir', tempdir)\n        self._kwargs.setdefault('probe', probe)\n        self._kwargs.setdefault('thresholds', {})\n        self._", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "    @Override\n    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports.buildPingUri(context);\n        final BoundRequestBuilder boundRequest", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "    self._cdg = ControlDependence(self)\n    return self._cdg\n\n  @property\n  def entry_node(self):\n    \"\"\"\n      Returns the entry node of the CFG.\n    \"\"\"\n    return self._entry_node\n\n  @property\n  def exit_node(self):\n    \"\"\"\n      Returns the", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "        // TODO: Implement this method to set up your fragment (e.g., running initial operations).\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View rootView = inflater.inflate(R.layout.fragment_qrcode, container, false);\n\n        scanButton = (Button)", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "    result.append(OPEN_BRACKET);\n    acceptOrVisitValue(betweenExp.getValueStart(), column.getName());\n    result.append(\" \").append(Operator.AND).append(\" \");\n    acceptOrVisitValue(betweenExp.getValueEnd(), column.getName());\n    result.append(CLOSE_BRACKET);\n  }\n\n  public void visit", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile inputFile = new File(basePath + \"/simple.ddi\");\n\t\t\tFile outputFile = new File(basePath + \"/simple.xforms\");\n\t\t\tFile inputFile2 = new File(basePath + \"/simple.ddi\");\n\t\t\tFile outputFile2 = new File(basePath + \"/simple.xforms\");\n\t\t\tFile inputFile3 = new", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "        self.assertEqual(\n            np.all(\n                np.isclose(\n                    calc_expectation(\n                        IndexDistribution(\n                            Bernoulli(0.5),\n                            {\"p\": [0.5, 0.5]},\n                            seed=0,\n                        ),\n                        lambda x: x,\n                        0,\n                    ),\n", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "        state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpad state\n        state = stateFactory.createState(VpadState.class);\n\n        assertThat(state instanceof TestVpadState, is(true));\n\n    }\n\n    private", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptBoolean(BooleanTag tag, boolean value) {\n\t\tValidity validity = isValid(tag);\n\t\tif (validity == null) {\n\t\t\tthrow new InvalidValueException(tag, \"Boolean tag is not valid\");\n\t\t}\n\t\tvalidity.acceptBoolean(tag, value);\n\t}\n\tpublic void acceptChar(CharTag", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "        self.assertEqual(\"Your child\", replace_blank_name(name=\"Harvey\", language=\"English\"))\n        self.assertEqual(\"Your child\", replace_blank_name(name=\"Harvey\", language=\"Hindi\"))\n        self.assertEqual(\"Your child\", replace_blank_name(name=\"Harvey\", language=\"Gujarati\"))\n        self.assertEqual", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                        expectLastCall().andThrow(new ExpectedException());\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                                .givenArgument(() -> {\n                                    givenWhenThenDefinitionMock.givenAContextThatDefinesTheInitialStateOfTheSystem();\n                                    return GIVEN", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "        # if we have not enough bits to map the string\n        if rem:\n            # if we have a padding bit\n            if self.L[done%8] == 1:\n                # then, map the padding bit\n                self.append(Bit('%s' % self.rest_name, Pt={'L':", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "        validate_not_abstract(model)\n\n        # Create the table if it doesn't exist\n        if not skip_table_setup:\n            self._create_table(model)\n\n        # Bind the model\n        model.Meta.bind(self, skip_table_setup=skip_table_setup)\n\n    def _create_table(self, model):\n        \"\"\"Create the", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n        return RespostaExtrairLogs.analis", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "    with pytest.raises(InvalidModel):\n        engine.bind(123)\n\n\ndef test_bind_abstract(engine):\n    \"\"\"Can't bind abstract models\"\"\"\n    with pytest.raises(InvalidModel):\n        engine.bind(BaseModel)\n\n\ndef test_bind(engine, session):\n    \"\"\"Bind a model to the engine\"\"\"\n    engine.bind(User", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "    assert u6.dimensions == mass_sun_kg\n    assert u6.base_value == 1.0\n\n    # test that we can create units from a string with a unit symbol\n    u7 = Unit(\"A\")\n    assert u7.dimensions == current_mks_unit\n    assert u7.base_value", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "    'rc': 0,\n    'test': 'lines'},\n     ASSOC_MOCK_FILE, OK],\n\n    ['Verify instance command references --no, returns paths',\n     ['references', 'TST_Person.name=\"Mike\"', '--no'],\n     {'stdout': ['\"root/cimv2:TST", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "        List<Module> modules = new ArrayList<>();\n        modules.add(new CurrencyRegistryModule());\n        modules.add(new SqlModule());\n        modules.add(new LoanModule());\n        modules.add(new VirtualEconModule());\n        modules.add(new VirtualBalanceModule());\n        modules.add(new VirtualSetModule());\n        modules.add(new VirtualRemoveModule", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "        tag = c_void_p()\n        self._call_fmod(\n            \"FMOD_Sound_GetTag\",\n            c_void_p(self),\n            c_int(index),\n            byref(tag),\n            len(name),\n            name,\n        )\n        return TAG(tag)\n\n    @property\n    def num_tags(self):\n       ", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                    public void showOrderListActivity(Account account) {\n                        startActivity(OrderListActivity.newIntent(MainActivity.this, account.getId()));\n                    }\n\n                    @Override\n                    public void showOrderEditActivity(Account account) {\n                        startActivity(OrderEditController.newIntent(MainActivity.this, account.getId()));\n                    }\n\n                    @Override\n                    public void show", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<ImgurResponseWrapper<List<String>>> listAccountImageIds(\n\t\t\t", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "        resource = ThermometerResource(aircraft.instruments.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"], 3)\n\nclass PitotTubeResourceTests(TestCase):\n    def test_get_pitot_tube_data(self", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "    column = User.age\n    value = 3\n    expected_ref = \":v0\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0\": expected_action.value}\n\n    ref, action = reference_tracker._value_ref(column, value)\n\n    assert ref == expected", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "        } catch (NoSuchBuildNumberException e) {\n        } catch (NoSuchVersionException e) {\n        } catch (NoBuildsForVersionException e) {\n        } catch (InvalidSourceIntegerException e) {\n        } catch (InvalidSourceException e) {\n        } catch (InvalidSourceParameterException e", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "        comments = Comment.objects.filter(post=post).filter(deleted=False)\n        comments = sorted(comments, key=attrgetter('created'), reverse=True)\n        comments = chain(nodes, comments)\n        comments = Paginator(comments, 10)\n        page = request.GET.get('page')\n        try:\n            comments", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "    @GET(\"tags?platform=android&type=emoji\")\n    Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of trending gifs to be displayed as gif categories,\n     * which when clicked will perform a gif search of that tag\n", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "            of(mConnectionWpsListener).ifPresent(wpsListener -> wpsListener.isSuccessful(false));\n            of(mConnectionSuccessListener).ifPresent(successListener -> successListener.success());\n            of(mConnectionScanResultsListener).ifPresent(connectionResultsListener -> connectionResultsListener.onConnectWithScanResult(new ArrayList<>()));\n            of(m", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "        AmbientTemperatureSensorCollector.flushDBCache(deviceID);\n    }\n    if(type == 6 || type == 0) {\n        PressureSensorCollector.flushDBCache(deviceID);\n    }\n    if(type == 7 || type == 0) {\n        LightSensorCollector.flushDBCache(deviceID);\n    }\n   ", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "        dbHelper.updateStackProperties(stack);\n        log(\"Updated stack properties (archive status) :\" + stack.getName());\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "    if self.uses_voiced:\n        feats = f\"ark,s,cs:add-deltas scp:{feat_path} ark:- |\"\n        if self.uses_cmvn:\n            feats += \" apply-cmvn-sliding --norm-vars=false --center=true --cmn-window=300", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "    private final Deployments deployments;\n    private final Jobs jobs;\n    private final Errands errands;\n    private final Vms vms;\n    private final Tasks tasks;\n    private final SpringTasks springTasks;\n    private final SpringStemcells springStemcells;\n    private final SpringDeployments springDeployments", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "        self._call_fmod(\n            \"FMOD_Sound_GetTag\",\n            c_void_p(self),\n            c_int(index),\n            byref(tag),\n            len(name),\n            byref(tag.updated),\n        )\n        return tag\n\n    @property\n    def num_tags(self):\n        \"\"\"The number of tags", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "            bufr_message.length.value = nbytes_write\n            section = bufr_message.length.parent\n            bit_writer.set_uint(\n                bufr_message.length.value,\n                bufr_message.length.nbits,\n            )\n        else:\n            # TODO: this is not correct. The length should be calculated from the\n            #", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "    form = ReportAbuseForm(request.POST)\n    if form.is_valid():\n        abuse_report = AbuseReport.objects.create(\n            logged_against=logged_against,\n            logged_by=logged_by,\n            abuse_comment=form.cleaned_data['comments'],\n        )\n\n        # Log moderation event\n        log_comment = form.cleaned", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "    @Override\n    public void listenToResultSet(final BenchmarkMethod meth, final AbstractMeter meter, final double data) {\n        try {\n            out.println(meth.getMethodWithClassName() + \" \" + meter.getValue() + \" \" + meter.getUnit());\n        } catch (final PerfidixMethodInvocationException e", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "        ApplicationOptions options = factory.createApplicationOptions(args);\n        ProtTestArgumentParser parser = factory.createProtTestArgumentParser(args, options);\n        ApplicationGlobals ap = factory.getApplicationGlobals();\n        ProtTestLogger.getDefaultLogger().setStdHandlerLevel(Level.OFF);\n        ProtTestLogger.getDefaultLogger().setLevel(Level.ALL", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.startRecording(URL(\"http://localhost:8080/record\"));\n\t\ttropo.say(\"Please press the button to start recording.\");\n\t\ttropo.wait(1000);\n\t\ttropo.say(\"Recording in progress. Please wait.\");\n\t\ttropo.wait(1", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "                //listaDeRespostas.getPropriedades().getEstado() == EstadoDaListaDeRespostas.FINALIZADA) {\n            //TODO: Verificar se a lista de respostas está finalizada\n            //TODO: Verificar se a lista de respostas está corrigida\n", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\tif (code == 200) {\n\t\t\t\t\tProgramManager.getInstance().parseTrack(connector.getResultDoc().toString());\n\t\t\t\t\tadapter = new PageViewPagerAdapter<ProgramTrack>(ProgramTrack.class", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "    @MockNext\n    AdRetriever adRetriever;\n\n    @MockNext\n    CuePointsRetriever cuePointsRetriever;\n\n    @MockNext\n    AdInterface adInterface;\n\n    @MockNext\n    AdPlayingMonitor adPlayingMonitor;\n\n    @MockNext\n    CuePoint", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t// TODO: add the code to close the drive client\n\t\t\t\t\t// TODO: add the code to close the browser\n\t\t\t\t\t// TODO: add the code to close the dialog\n\t\t\t\t\t// TODO: add the code to close the app\n\t\t\t\t\t// TODO: add the code to close the", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "    String adapterName = adapterName(type, INJECT_ADAPTER_SUFFIX);\n    JavaFile.Builder builder = JavaFile.builder(packageName, TypeSpec.classBuilder(adapterName)\n        .addModifiers(PUBLIC)\n        .addMethod(createInjectAdapterMethod(type, constructor, fields))\n        .build());\n    builder.writeTo(processing", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "        new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n    }\r\n\r\n        /**\r\n         * 打开/关闭透传消息\r\n         * @param enable 打开/关闭\r\n         */\r\n        public static void enableReceiveNormalMsg(boolean enable){\rNext line of code:\n        new EnableReceiveNormal", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 0\n\n\ndef test_parameters_msgtype3():\n  '''\n  Const message test\n  '''\n  parser = prepareArgsParser()\n ", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "    return f'{path}{suffix}'\n    return f'{path}{suffix}'\n    return f'{path}{suffix}'\n    return f'{path}{suffix}'\n    return f'{path}{suffix}'\n    return f'{path}{suffix}'\n    return f'{path}{suffix}'\n    return f'{path}{suffix}'\n", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "def _check_length(i, k, v, length_last):\n    if length_last == 0:\n        length_last = v.shape[0]\n    elif v.shape[0] > length_last:\n        length_last = v.shape[0]\n    return length_last\ngtable/lib.py\ndef reduce_by_key", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "                _isTyping = true;\n            }\n            else if (message.getType() == MessageType.ALERT)\n            {\n                AlertMessage m = (AlertMessage)message;\n\n                addMessage(new ChatMessage(ChatMessageSource.SYSTEM, ChatMessage.TEXT_ALERT(m.getText()), m.getReMessage()));\n            }\n            else if (", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\tEXOG.append(dmy_mediator)\n\n\t\tTvalues_A = glm_typeI(dmy_rightvar,\n\t\t\t\t\t\tEXOG,\n\t\t\t\t\t\tdmy_covariates=dmy_covariates,\n\t\t\t\t\t\toutput_fvalues = False,\n\t\t\t\t\t\toutput_tvalues = True,\n\t\t\t\t\t\toutput_reduced_residuals = False)[1", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "        assertThat(main.getStackTrace().size(), equalTo(1));\n        assertThat(main.getStackTrace().get(0).getMethodName(), equalTo(\"main\"));\n        assertThat(main.getStackTrace().get(0).getFileName(), equalTo(\"main\"));\n        assertThat(main.getStackTrace().get(0).getLineNumber(), equalTo(1));\n   ", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "                DatePicker datePicker = new DatePicker(this);\n                datePicker.setOnDatePickListener(new DatePicker.OnDatePickListener() {\n                    @Override\n                    public void onDatePicked(int year, int month, int day) {\n                        // 选择日期\n                        mRecord.setRecordTime(new LunarCalendar(year, month, day));\n", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "        GyroscopeSensorCollector.flushDBCache(deviceID);\n    }\n    if(type == 5 || type == 0) {\n        LightSensorCollector.flushDBCache(deviceID);\n    }\n    if(type == 6 || type == 0) {\n        PressureSensorCollector.flushDBCache(deviceID);\n    }\n   ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "    private SetOtherFragment setOtherFragment;\n    private SetMomoFragment setMomoFragment;\n    private ViewPager mViewPager;\n    private Toolbar mToolbar;\n    private TabLayout mTabLayout;\n    private List<ShortCut> mShortCutData;\n    private XpNavBarSetting mXpNavBarSetting;\n", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "        self.tracerouter = Tracerouter.Tracerouter()\n        self.tracerouter.start()\n        self.tracerouter.join()\n        self.tracerouter = None\n        self.tracerouter = Tracerouter.Tracerouter()\n        self.tracerouter.start()\n        self.tracerouter.join()\n        self", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "    assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.deltas[4].id == \"delta-5\"\n    assert deltas.deltas[4].", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "    @property\n    def neural(self):\n        return Neural(self)\n\n    @property\n    def neural_sentiment_analysis(self):\n        return NeuralSentimentAnalysis(self)\n\n    @property\n    def neural_signature_extraction(self):\n        return NeuralSignatureExtraction(self)\n\n    @property\n    def neural_ocr(self):\n", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "    // TODO(jontayler): figure out if we should break out the\n    // time dialog and time player into separate activities.\n    // TODO(jontayler): figure out if we should break out the\n    // time dialog and time player into separate activities.\n    // TODO(jontayler):", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "        non_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_thermochemical_prob = 0\n        _log.debug('Multi-phase error: %0.4f, equilibrium", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "class MSCm2(Layer):\r\n    constructorList = [\r\n        Bit('spare1', Pt=0, BitLen=1),\r\n        Bit('rev', Pt=1, BitLen=2, Repr='hum', Dict=Revision_level),\r\n        Bit('ES', ReprName='Controlled early", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "        self.__parse_tc_qdisc(device)\n        self.__parse_tc_filter(device)\n        self.__parse_tc_class(device)\n        self.__parse_tc_shaping(device)\n        self.__parse_tc_shaping(device)\n        self.__parse_tc_shaping(device)\n        self.__parse_tc_shaping(device)\n        self.__", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "        result, index = apply_fast_eq(left.values, right.values,\n                                      left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)\n    \ndef apply_ne(left: Column, right):\n    if type(right) == Column:\n        result", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "    assert isinstance(exc, RequestValidationError)\n\n\ndef test_validation_error_decorator_transforms_SwaggerMappingError():\n    settings = {'pyramid_swagger.swagger_versions': ['1.2', '2.0']}\n    with pytest.raises(RequestValidationError) as excinfo:\n        handle_request(\n            PyramidSwaggerRequest(\n                request", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
